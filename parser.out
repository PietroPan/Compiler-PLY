Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> VarBlc MainBlc
Rule 2     VarBlc -> vars { Dcls }
Rule 3     Dcls -> Dcl Dcls
Rule 4     Dcls -> <empty>
Rule 5     MainBlc -> main { Insts }
Rule 6     Insts -> Attr Insts
Rule 7     Insts -> Print Insts
Rule 8     Insts -> Println Insts
Rule 9     Insts -> Repeat Insts
Rule 10    Insts -> Read Insts
Rule 11    Insts -> <empty>
Rule 12    Repeat -> RepeatS ( num ) { Insts }
Rule 13    RepeatS -> repeat
Rule 14    Read -> read ( id )
Rule 15    Print -> print ( Exp )
Rule 16    Println -> println ( Exp )
Rule 17    Dcl -> int id [ num ]
Rule 18    Dcl -> int id
Rule 19    Dcl -> int id = num
Rule 20    Attr -> id = Exp
Rule 21    Attr -> id [ Exp ] = Exp
Rule 22    Attr -> id = id [ Exp ]
Rule 23    Exp -> Exp + Term
Rule 24    Exp -> Exp - Term
Rule 25    Exp -> Term
Rule 26    Term -> Term * Factor
Rule 27    Term -> Term / Factor
Rule 28    Term -> Factor
Rule 29    Factor -> id
Rule 30    Factor -> num
Rule 31    Factor -> ( Exp )

Terminals, with rules where they appear

(                    : 12 14 15 16 31
)                    : 12 14 15 16 31
*                    : 26
+                    : 23
-                    : 24
/                    : 27
=                    : 19 20 21 22
[                    : 17 21 22
]                    : 17 21 22
error                : 
id                   : 14 17 18 19 20 21 22 22 29
int                  : 17 18 19
main                 : 5
num                  : 12 17 19 30
print                : 15
println              : 16
read                 : 14
repeat               : 13
vars                 : 2
{                    : 2 5 12
}                    : 2 5 12

Nonterminals, with rules where they appear

Attr                 : 6
Dcl                  : 3
Dcls                 : 2 3
Exp                  : 15 16 20 21 21 22 23 24 31
Factor               : 26 27 28
Insts                : 5 6 7 8 9 10 12
MainBlc              : 1
Print                : 7
Println              : 8
Prog                 : 0
Read                 : 10
Repeat               : 9
RepeatS              : 12
Term                 : 23 24 25 26 27
VarBlc               : 1

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . VarBlc MainBlc
    (2) VarBlc -> . vars { Dcls }

    vars            shift and go to state 3

    Prog                           shift and go to state 1
    VarBlc                         shift and go to state 2

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> VarBlc . MainBlc
    (5) MainBlc -> . main { Insts }

    main            shift and go to state 5

    MainBlc                        shift and go to state 4

state 3

    (2) VarBlc -> vars . { Dcls }

    {               shift and go to state 6


state 4

    (1) Prog -> VarBlc MainBlc .

    $end            reduce using rule 1 (Prog -> VarBlc MainBlc .)


state 5

    (5) MainBlc -> main . { Insts }

    {               shift and go to state 7


state 6

    (2) VarBlc -> vars { . Dcls }
    (3) Dcls -> . Dcl Dcls
    (4) Dcls -> .
    (17) Dcl -> . int id [ num ]
    (18) Dcl -> . int id
    (19) Dcl -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcls                           shift and go to state 8
    Dcl                            shift and go to state 9

state 7

    (5) MainBlc -> main { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (20) Attr -> . id = Exp
    (21) Attr -> . id [ Exp ] = Exp
    (22) Attr -> . id = id [ Exp ]
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Insts                          shift and go to state 11
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 8

    (2) VarBlc -> vars { Dcls . }

    }               shift and go to state 23


state 9

    (3) Dcls -> Dcl . Dcls
    (3) Dcls -> . Dcl Dcls
    (4) Dcls -> .
    (17) Dcl -> . int id [ num ]
    (18) Dcl -> . int id
    (19) Dcl -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcl                            shift and go to state 9
    Dcls                           shift and go to state 24

state 10

    (17) Dcl -> int . id [ num ]
    (18) Dcl -> int . id
    (19) Dcl -> int . id = num

    id              shift and go to state 25


state 11

    (5) MainBlc -> main { Insts . }

    }               shift and go to state 26


state 12

    (6) Insts -> Attr . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (20) Attr -> . id = Exp
    (21) Attr -> . id [ Exp ] = Exp
    (22) Attr -> . id = id [ Exp ]
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Attr                           shift and go to state 12
    Insts                          shift and go to state 27
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 13

    (7) Insts -> Print . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (20) Attr -> . id = Exp
    (21) Attr -> . id [ Exp ] = Exp
    (22) Attr -> . id = id [ Exp ]
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Print                          shift and go to state 13
    Insts                          shift and go to state 28
    Attr                           shift and go to state 12
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 14

    (8) Insts -> Println . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (20) Attr -> . id = Exp
    (21) Attr -> . id [ Exp ] = Exp
    (22) Attr -> . id = id [ Exp ]
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Println                        shift and go to state 14
    Insts                          shift and go to state 29
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 15

    (9) Insts -> Repeat . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (20) Attr -> . id = Exp
    (21) Attr -> . id [ Exp ] = Exp
    (22) Attr -> . id = id [ Exp ]
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Repeat                         shift and go to state 15
    Insts                          shift and go to state 30
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 16

    (10) Insts -> Read . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (20) Attr -> . id = Exp
    (21) Attr -> . id [ Exp ] = Exp
    (22) Attr -> . id = id [ Exp ]
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Read                           shift and go to state 16
    Insts                          shift and go to state 31
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    RepeatS                        shift and go to state 20

state 17

    (20) Attr -> id . = Exp
    (21) Attr -> id . [ Exp ] = Exp
    (22) Attr -> id . = id [ Exp ]

    =               shift and go to state 32
    [               shift and go to state 33


state 18

    (15) Print -> print . ( Exp )

    (               shift and go to state 34


state 19

    (16) Println -> println . ( Exp )

    (               shift and go to state 35


state 20

    (12) Repeat -> RepeatS . ( num ) { Insts }

    (               shift and go to state 36


state 21

    (14) Read -> read . ( id )

    (               shift and go to state 37


state 22

    (13) RepeatS -> repeat .

    (               reduce using rule 13 (RepeatS -> repeat .)


state 23

    (2) VarBlc -> vars { Dcls } .

    main            reduce using rule 2 (VarBlc -> vars { Dcls } .)


state 24

    (3) Dcls -> Dcl Dcls .

    }               reduce using rule 3 (Dcls -> Dcl Dcls .)


state 25

    (17) Dcl -> int id . [ num ]
    (18) Dcl -> int id .
    (19) Dcl -> int id . = num

    [               shift and go to state 38
    int             reduce using rule 18 (Dcl -> int id .)
    }               reduce using rule 18 (Dcl -> int id .)
    =               shift and go to state 39


state 26

    (5) MainBlc -> main { Insts } .

    $end            reduce using rule 5 (MainBlc -> main { Insts } .)


state 27

    (6) Insts -> Attr Insts .

    }               reduce using rule 6 (Insts -> Attr Insts .)


state 28

    (7) Insts -> Print Insts .

    }               reduce using rule 7 (Insts -> Print Insts .)


state 29

    (8) Insts -> Println Insts .

    }               reduce using rule 8 (Insts -> Println Insts .)


state 30

    (9) Insts -> Repeat Insts .

    }               reduce using rule 9 (Insts -> Repeat Insts .)


state 31

    (10) Insts -> Read Insts .

    }               reduce using rule 10 (Insts -> Read Insts .)


state 32

    (20) Attr -> id = . Exp
    (22) Attr -> id = . id [ Exp ]
    (23) Exp -> . Exp + Term
    (24) Exp -> . Exp - Term
    (25) Exp -> . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 41
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 33

    (21) Attr -> id [ . Exp ] = Exp
    (23) Exp -> . Exp + Term
    (24) Exp -> . Exp - Term
    (25) Exp -> . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 47
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 34

    (15) Print -> print ( . Exp )
    (23) Exp -> . Exp + Term
    (24) Exp -> . Exp - Term
    (25) Exp -> . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 48
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 35

    (16) Println -> println ( . Exp )
    (23) Exp -> . Exp + Term
    (24) Exp -> . Exp - Term
    (25) Exp -> . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 49
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 36

    (12) Repeat -> RepeatS ( . num ) { Insts }

    num             shift and go to state 50


state 37

    (14) Read -> read ( . id )

    id              shift and go to state 51


state 38

    (17) Dcl -> int id [ . num ]

    num             shift and go to state 52


state 39

    (19) Dcl -> int id = . num

    num             shift and go to state 53


state 40

    (22) Attr -> id = id . [ Exp ]
    (29) Factor -> id .

    [               shift and go to state 54
    *               reduce using rule 29 (Factor -> id .)
    /               reduce using rule 29 (Factor -> id .)
    +               reduce using rule 29 (Factor -> id .)
    -               reduce using rule 29 (Factor -> id .)
    id              reduce using rule 29 (Factor -> id .)
    print           reduce using rule 29 (Factor -> id .)
    println         reduce using rule 29 (Factor -> id .)
    read            reduce using rule 29 (Factor -> id .)
    repeat          reduce using rule 29 (Factor -> id .)
    }               reduce using rule 29 (Factor -> id .)


state 41

    (20) Attr -> id = Exp .
    (23) Exp -> Exp . + Term
    (24) Exp -> Exp . - Term

    id              reduce using rule 20 (Attr -> id = Exp .)
    print           reduce using rule 20 (Attr -> id = Exp .)
    println         reduce using rule 20 (Attr -> id = Exp .)
    read            reduce using rule 20 (Attr -> id = Exp .)
    repeat          reduce using rule 20 (Attr -> id = Exp .)
    }               reduce using rule 20 (Attr -> id = Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 42

    (25) Exp -> Term .
    (26) Term -> Term . * Factor
    (27) Term -> Term . / Factor

    +               reduce using rule 25 (Exp -> Term .)
    -               reduce using rule 25 (Exp -> Term .)
    id              reduce using rule 25 (Exp -> Term .)
    print           reduce using rule 25 (Exp -> Term .)
    println         reduce using rule 25 (Exp -> Term .)
    read            reduce using rule 25 (Exp -> Term .)
    repeat          reduce using rule 25 (Exp -> Term .)
    }               reduce using rule 25 (Exp -> Term .)
    ]               reduce using rule 25 (Exp -> Term .)
    )               reduce using rule 25 (Exp -> Term .)
    *               shift and go to state 57
    /               shift and go to state 58


state 43

    (28) Term -> Factor .

    *               reduce using rule 28 (Term -> Factor .)
    /               reduce using rule 28 (Term -> Factor .)
    +               reduce using rule 28 (Term -> Factor .)
    -               reduce using rule 28 (Term -> Factor .)
    id              reduce using rule 28 (Term -> Factor .)
    print           reduce using rule 28 (Term -> Factor .)
    println         reduce using rule 28 (Term -> Factor .)
    read            reduce using rule 28 (Term -> Factor .)
    repeat          reduce using rule 28 (Term -> Factor .)
    }               reduce using rule 28 (Term -> Factor .)
    ]               reduce using rule 28 (Term -> Factor .)
    )               reduce using rule 28 (Term -> Factor .)


state 44

    (30) Factor -> num .

    *               reduce using rule 30 (Factor -> num .)
    /               reduce using rule 30 (Factor -> num .)
    +               reduce using rule 30 (Factor -> num .)
    -               reduce using rule 30 (Factor -> num .)
    id              reduce using rule 30 (Factor -> num .)
    print           reduce using rule 30 (Factor -> num .)
    println         reduce using rule 30 (Factor -> num .)
    read            reduce using rule 30 (Factor -> num .)
    repeat          reduce using rule 30 (Factor -> num .)
    }               reduce using rule 30 (Factor -> num .)
    ]               reduce using rule 30 (Factor -> num .)
    )               reduce using rule 30 (Factor -> num .)


state 45

    (31) Factor -> ( . Exp )
    (23) Exp -> . Exp + Term
    (24) Exp -> . Exp - Term
    (25) Exp -> . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 59
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 46

    (29) Factor -> id .

    *               reduce using rule 29 (Factor -> id .)
    /               reduce using rule 29 (Factor -> id .)
    ]               reduce using rule 29 (Factor -> id .)
    +               reduce using rule 29 (Factor -> id .)
    -               reduce using rule 29 (Factor -> id .)
    )               reduce using rule 29 (Factor -> id .)
    id              reduce using rule 29 (Factor -> id .)
    print           reduce using rule 29 (Factor -> id .)
    println         reduce using rule 29 (Factor -> id .)
    read            reduce using rule 29 (Factor -> id .)
    repeat          reduce using rule 29 (Factor -> id .)
    }               reduce using rule 29 (Factor -> id .)


state 47

    (21) Attr -> id [ Exp . ] = Exp
    (23) Exp -> Exp . + Term
    (24) Exp -> Exp . - Term

    ]               shift and go to state 60
    +               shift and go to state 55
    -               shift and go to state 56


state 48

    (15) Print -> print ( Exp . )
    (23) Exp -> Exp . + Term
    (24) Exp -> Exp . - Term

    )               shift and go to state 61
    +               shift and go to state 55
    -               shift and go to state 56


state 49

    (16) Println -> println ( Exp . )
    (23) Exp -> Exp . + Term
    (24) Exp -> Exp . - Term

    )               shift and go to state 62
    +               shift and go to state 55
    -               shift and go to state 56


state 50

    (12) Repeat -> RepeatS ( num . ) { Insts }

    )               shift and go to state 63


state 51

    (14) Read -> read ( id . )

    )               shift and go to state 64


state 52

    (17) Dcl -> int id [ num . ]

    ]               shift and go to state 65


state 53

    (19) Dcl -> int id = num .

    int             reduce using rule 19 (Dcl -> int id = num .)
    }               reduce using rule 19 (Dcl -> int id = num .)


state 54

    (22) Attr -> id = id [ . Exp ]
    (23) Exp -> . Exp + Term
    (24) Exp -> . Exp - Term
    (25) Exp -> . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 66
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 55

    (23) Exp -> Exp + . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Term                           shift and go to state 67
    Factor                         shift and go to state 43

state 56

    (24) Exp -> Exp - . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Term                           shift and go to state 68
    Factor                         shift and go to state 43

state 57

    (26) Term -> Term * . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Factor                         shift and go to state 69

state 58

    (27) Term -> Term / . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Factor                         shift and go to state 70

state 59

    (31) Factor -> ( Exp . )
    (23) Exp -> Exp . + Term
    (24) Exp -> Exp . - Term

    )               shift and go to state 71
    +               shift and go to state 55
    -               shift and go to state 56


state 60

    (21) Attr -> id [ Exp ] . = Exp

    =               shift and go to state 72


state 61

    (15) Print -> print ( Exp ) .

    id              reduce using rule 15 (Print -> print ( Exp ) .)
    print           reduce using rule 15 (Print -> print ( Exp ) .)
    println         reduce using rule 15 (Print -> print ( Exp ) .)
    read            reduce using rule 15 (Print -> print ( Exp ) .)
    repeat          reduce using rule 15 (Print -> print ( Exp ) .)
    }               reduce using rule 15 (Print -> print ( Exp ) .)


state 62

    (16) Println -> println ( Exp ) .

    id              reduce using rule 16 (Println -> println ( Exp ) .)
    print           reduce using rule 16 (Println -> println ( Exp ) .)
    println         reduce using rule 16 (Println -> println ( Exp ) .)
    read            reduce using rule 16 (Println -> println ( Exp ) .)
    repeat          reduce using rule 16 (Println -> println ( Exp ) .)
    }               reduce using rule 16 (Println -> println ( Exp ) .)


state 63

    (12) Repeat -> RepeatS ( num ) . { Insts }

    {               shift and go to state 73


state 64

    (14) Read -> read ( id ) .

    id              reduce using rule 14 (Read -> read ( id ) .)
    print           reduce using rule 14 (Read -> read ( id ) .)
    println         reduce using rule 14 (Read -> read ( id ) .)
    read            reduce using rule 14 (Read -> read ( id ) .)
    repeat          reduce using rule 14 (Read -> read ( id ) .)
    }               reduce using rule 14 (Read -> read ( id ) .)


state 65

    (17) Dcl -> int id [ num ] .

    int             reduce using rule 17 (Dcl -> int id [ num ] .)
    }               reduce using rule 17 (Dcl -> int id [ num ] .)


state 66

    (22) Attr -> id = id [ Exp . ]
    (23) Exp -> Exp . + Term
    (24) Exp -> Exp . - Term

    ]               shift and go to state 74
    +               shift and go to state 55
    -               shift and go to state 56


state 67

    (23) Exp -> Exp + Term .
    (26) Term -> Term . * Factor
    (27) Term -> Term . / Factor

    +               reduce using rule 23 (Exp -> Exp + Term .)
    -               reduce using rule 23 (Exp -> Exp + Term .)
    id              reduce using rule 23 (Exp -> Exp + Term .)
    print           reduce using rule 23 (Exp -> Exp + Term .)
    println         reduce using rule 23 (Exp -> Exp + Term .)
    read            reduce using rule 23 (Exp -> Exp + Term .)
    repeat          reduce using rule 23 (Exp -> Exp + Term .)
    }               reduce using rule 23 (Exp -> Exp + Term .)
    ]               reduce using rule 23 (Exp -> Exp + Term .)
    )               reduce using rule 23 (Exp -> Exp + Term .)
    *               shift and go to state 57
    /               shift and go to state 58


state 68

    (24) Exp -> Exp - Term .
    (26) Term -> Term . * Factor
    (27) Term -> Term . / Factor

    +               reduce using rule 24 (Exp -> Exp - Term .)
    -               reduce using rule 24 (Exp -> Exp - Term .)
    id              reduce using rule 24 (Exp -> Exp - Term .)
    print           reduce using rule 24 (Exp -> Exp - Term .)
    println         reduce using rule 24 (Exp -> Exp - Term .)
    read            reduce using rule 24 (Exp -> Exp - Term .)
    repeat          reduce using rule 24 (Exp -> Exp - Term .)
    }               reduce using rule 24 (Exp -> Exp - Term .)
    ]               reduce using rule 24 (Exp -> Exp - Term .)
    )               reduce using rule 24 (Exp -> Exp - Term .)
    *               shift and go to state 57
    /               shift and go to state 58


state 69

    (26) Term -> Term * Factor .

    *               reduce using rule 26 (Term -> Term * Factor .)
    /               reduce using rule 26 (Term -> Term * Factor .)
    +               reduce using rule 26 (Term -> Term * Factor .)
    -               reduce using rule 26 (Term -> Term * Factor .)
    id              reduce using rule 26 (Term -> Term * Factor .)
    print           reduce using rule 26 (Term -> Term * Factor .)
    println         reduce using rule 26 (Term -> Term * Factor .)
    read            reduce using rule 26 (Term -> Term * Factor .)
    repeat          reduce using rule 26 (Term -> Term * Factor .)
    }               reduce using rule 26 (Term -> Term * Factor .)
    ]               reduce using rule 26 (Term -> Term * Factor .)
    )               reduce using rule 26 (Term -> Term * Factor .)


state 70

    (27) Term -> Term / Factor .

    *               reduce using rule 27 (Term -> Term / Factor .)
    /               reduce using rule 27 (Term -> Term / Factor .)
    +               reduce using rule 27 (Term -> Term / Factor .)
    -               reduce using rule 27 (Term -> Term / Factor .)
    id              reduce using rule 27 (Term -> Term / Factor .)
    print           reduce using rule 27 (Term -> Term / Factor .)
    println         reduce using rule 27 (Term -> Term / Factor .)
    read            reduce using rule 27 (Term -> Term / Factor .)
    repeat          reduce using rule 27 (Term -> Term / Factor .)
    }               reduce using rule 27 (Term -> Term / Factor .)
    ]               reduce using rule 27 (Term -> Term / Factor .)
    )               reduce using rule 27 (Term -> Term / Factor .)


state 71

    (31) Factor -> ( Exp ) .

    *               reduce using rule 31 (Factor -> ( Exp ) .)
    /               reduce using rule 31 (Factor -> ( Exp ) .)
    +               reduce using rule 31 (Factor -> ( Exp ) .)
    -               reduce using rule 31 (Factor -> ( Exp ) .)
    id              reduce using rule 31 (Factor -> ( Exp ) .)
    print           reduce using rule 31 (Factor -> ( Exp ) .)
    println         reduce using rule 31 (Factor -> ( Exp ) .)
    read            reduce using rule 31 (Factor -> ( Exp ) .)
    repeat          reduce using rule 31 (Factor -> ( Exp ) .)
    }               reduce using rule 31 (Factor -> ( Exp ) .)
    ]               reduce using rule 31 (Factor -> ( Exp ) .)
    )               reduce using rule 31 (Factor -> ( Exp ) .)


state 72

    (21) Attr -> id [ Exp ] = . Exp
    (23) Exp -> . Exp + Term
    (24) Exp -> . Exp - Term
    (25) Exp -> . Term
    (26) Term -> . Term * Factor
    (27) Term -> . Term / Factor
    (28) Term -> . Factor
    (29) Factor -> . id
    (30) Factor -> . num
    (31) Factor -> . ( Exp )

    id              shift and go to state 46
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 75
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 73

    (12) Repeat -> RepeatS ( num ) { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (20) Attr -> . id = Exp
    (21) Attr -> . id [ Exp ] = Exp
    (22) Attr -> . id = id [ Exp ]
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    RepeatS                        shift and go to state 20
    Insts                          shift and go to state 76
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16

state 74

    (22) Attr -> id = id [ Exp ] .

    id              reduce using rule 22 (Attr -> id = id [ Exp ] .)
    print           reduce using rule 22 (Attr -> id = id [ Exp ] .)
    println         reduce using rule 22 (Attr -> id = id [ Exp ] .)
    read            reduce using rule 22 (Attr -> id = id [ Exp ] .)
    repeat          reduce using rule 22 (Attr -> id = id [ Exp ] .)
    }               reduce using rule 22 (Attr -> id = id [ Exp ] .)


state 75

    (21) Attr -> id [ Exp ] = Exp .
    (23) Exp -> Exp . + Term
    (24) Exp -> Exp . - Term

    id              reduce using rule 21 (Attr -> id [ Exp ] = Exp .)
    print           reduce using rule 21 (Attr -> id [ Exp ] = Exp .)
    println         reduce using rule 21 (Attr -> id [ Exp ] = Exp .)
    read            reduce using rule 21 (Attr -> id [ Exp ] = Exp .)
    repeat          reduce using rule 21 (Attr -> id [ Exp ] = Exp .)
    }               reduce using rule 21 (Attr -> id [ Exp ] = Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 76

    (12) Repeat -> RepeatS ( num ) { Insts . }

    }               shift and go to state 77


state 77

    (12) Repeat -> RepeatS ( num ) { Insts } .

    id              reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    print           reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    println         reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    read            reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    repeat          reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    }               reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)

