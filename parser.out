Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> VarBlc MainBlc
Rule 2     VarBlc -> vars { Dcls }
Rule 3     Dcls -> DclInt Dcls
Rule 4     Dcls -> <empty>
Rule 5     MainBlc -> main { Insts
Rule 6     Insts -> AttrInt Insts
Rule 7     Insts -> Print Insts
Rule 8     Insts -> Println Insts
Rule 9     Insts -> }
Rule 10    Print -> print ( id )
Rule 11    Println -> println ( id )
Rule 12    DclInt -> int id
Rule 13    DclInt -> int id num
Rule 14    DclInt -> int id = num
Rule 15    AttrInt -> id num
Rule 16    AttrInt -> id = num

Terminals, with rules where they appear

(                    : 10 11
)                    : 10 11
=                    : 14 16
error                : 
id                   : 10 11 12 13 14 15 16
int                  : 12 13 14
main                 : 5
num                  : 13 14 15 16
print                : 10
println              : 11
vars                 : 2
{                    : 2 5
}                    : 2 9

Nonterminals, with rules where they appear

AttrInt              : 6
DclInt               : 3
Dcls                 : 2 3
Insts                : 5 6 7 8
MainBlc              : 1
Print                : 7
Println              : 8
Prog                 : 0
VarBlc               : 1

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . VarBlc MainBlc
    (2) VarBlc -> . vars { Dcls }

    vars            shift and go to state 3

    Prog                           shift and go to state 1
    VarBlc                         shift and go to state 2

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> VarBlc . MainBlc
    (5) MainBlc -> . main { Insts

    main            shift and go to state 5

    MainBlc                        shift and go to state 4

state 3

    (2) VarBlc -> vars . { Dcls }

    {               shift and go to state 6


state 4

    (1) Prog -> VarBlc MainBlc .

    $end            reduce using rule 1 (Prog -> VarBlc MainBlc .)


state 5

    (5) MainBlc -> main . { Insts

    {               shift and go to state 7


state 6

    (2) VarBlc -> vars { . Dcls }
    (3) Dcls -> . DclInt Dcls
    (4) Dcls -> .
    (12) DclInt -> . int id
    (13) DclInt -> . int id num
    (14) DclInt -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcls                           shift and go to state 8
    DclInt                         shift and go to state 9

state 7

    (5) MainBlc -> main { . Insts
    (6) Insts -> . AttrInt Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . }
    (15) AttrInt -> . id num
    (16) AttrInt -> . id = num
    (10) Print -> . print ( id )
    (11) Println -> . println ( id )

    }               shift and go to state 15
    id              shift and go to state 16
    print           shift and go to state 17
    println         shift and go to state 18

    Insts                          shift and go to state 11
    AttrInt                        shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14

state 8

    (2) VarBlc -> vars { Dcls . }

    }               shift and go to state 19


state 9

    (3) Dcls -> DclInt . Dcls
    (3) Dcls -> . DclInt Dcls
    (4) Dcls -> .
    (12) DclInt -> . int id
    (13) DclInt -> . int id num
    (14) DclInt -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    DclInt                         shift and go to state 9
    Dcls                           shift and go to state 20

state 10

    (12) DclInt -> int . id
    (13) DclInt -> int . id num
    (14) DclInt -> int . id = num

    id              shift and go to state 21


state 11

    (5) MainBlc -> main { Insts .

    $end            reduce using rule 5 (MainBlc -> main { Insts .)


state 12

    (6) Insts -> AttrInt . Insts
    (6) Insts -> . AttrInt Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . }
    (15) AttrInt -> . id num
    (16) AttrInt -> . id = num
    (10) Print -> . print ( id )
    (11) Println -> . println ( id )

    }               shift and go to state 15
    id              shift and go to state 16
    print           shift and go to state 17
    println         shift and go to state 18

    AttrInt                        shift and go to state 12
    Insts                          shift and go to state 22
    Print                          shift and go to state 13
    Println                        shift and go to state 14

state 13

    (7) Insts -> Print . Insts
    (6) Insts -> . AttrInt Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . }
    (15) AttrInt -> . id num
    (16) AttrInt -> . id = num
    (10) Print -> . print ( id )
    (11) Println -> . println ( id )

    }               shift and go to state 15
    id              shift and go to state 16
    print           shift and go to state 17
    println         shift and go to state 18

    Print                          shift and go to state 13
    Insts                          shift and go to state 23
    AttrInt                        shift and go to state 12
    Println                        shift and go to state 14

state 14

    (8) Insts -> Println . Insts
    (6) Insts -> . AttrInt Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . }
    (15) AttrInt -> . id num
    (16) AttrInt -> . id = num
    (10) Print -> . print ( id )
    (11) Println -> . println ( id )

    }               shift and go to state 15
    id              shift and go to state 16
    print           shift and go to state 17
    println         shift and go to state 18

    Println                        shift and go to state 14
    Insts                          shift and go to state 24
    AttrInt                        shift and go to state 12
    Print                          shift and go to state 13

state 15

    (9) Insts -> } .

    $end            reduce using rule 9 (Insts -> } .)


state 16

    (15) AttrInt -> id . num
    (16) AttrInt -> id . = num

    num             shift and go to state 25
    =               shift and go to state 26


state 17

    (10) Print -> print . ( id )

    (               shift and go to state 27


state 18

    (11) Println -> println . ( id )

    (               shift and go to state 28


state 19

    (2) VarBlc -> vars { Dcls } .

    main            reduce using rule 2 (VarBlc -> vars { Dcls } .)


state 20

    (3) Dcls -> DclInt Dcls .

    }               reduce using rule 3 (Dcls -> DclInt Dcls .)


state 21

    (12) DclInt -> int id .
    (13) DclInt -> int id . num
    (14) DclInt -> int id . = num

    int             reduce using rule 12 (DclInt -> int id .)
    }               reduce using rule 12 (DclInt -> int id .)
    num             shift and go to state 29
    =               shift and go to state 30


state 22

    (6) Insts -> AttrInt Insts .

    $end            reduce using rule 6 (Insts -> AttrInt Insts .)


state 23

    (7) Insts -> Print Insts .

    $end            reduce using rule 7 (Insts -> Print Insts .)


state 24

    (8) Insts -> Println Insts .

    $end            reduce using rule 8 (Insts -> Println Insts .)


state 25

    (15) AttrInt -> id num .

    }               reduce using rule 15 (AttrInt -> id num .)
    id              reduce using rule 15 (AttrInt -> id num .)
    print           reduce using rule 15 (AttrInt -> id num .)
    println         reduce using rule 15 (AttrInt -> id num .)


state 26

    (16) AttrInt -> id = . num

    num             shift and go to state 31


state 27

    (10) Print -> print ( . id )

    id              shift and go to state 32


state 28

    (11) Println -> println ( . id )

    id              shift and go to state 33


state 29

    (13) DclInt -> int id num .

    int             reduce using rule 13 (DclInt -> int id num .)
    }               reduce using rule 13 (DclInt -> int id num .)


state 30

    (14) DclInt -> int id = . num

    num             shift and go to state 34


state 31

    (16) AttrInt -> id = num .

    }               reduce using rule 16 (AttrInt -> id = num .)
    id              reduce using rule 16 (AttrInt -> id = num .)
    print           reduce using rule 16 (AttrInt -> id = num .)
    println         reduce using rule 16 (AttrInt -> id = num .)


state 32

    (10) Print -> print ( id . )

    )               shift and go to state 35


state 33

    (11) Println -> println ( id . )

    )               shift and go to state 36


state 34

    (14) DclInt -> int id = num .

    int             reduce using rule 14 (DclInt -> int id = num .)
    }               reduce using rule 14 (DclInt -> int id = num .)


state 35

    (10) Print -> print ( id ) .

    }               reduce using rule 10 (Print -> print ( id ) .)
    id              reduce using rule 10 (Print -> print ( id ) .)
    print           reduce using rule 10 (Print -> print ( id ) .)
    println         reduce using rule 10 (Print -> print ( id ) .)


state 36

    (11) Println -> println ( id ) .

    }               reduce using rule 11 (Println -> println ( id ) .)
    id              reduce using rule 11 (Println -> println ( id ) .)
    print           reduce using rule 11 (Println -> println ( id ) .)
    println         reduce using rule 11 (Println -> println ( id ) .)

