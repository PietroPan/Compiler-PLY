Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> VarBlc MainBlc
Rule 2     VarBlc -> vars { Dcls }
Rule 3     Dcls -> Dcls Dcl
Rule 4     Dcls -> <empty>
Rule 5     MainBlc -> main { Insts }
Rule 6     Insts -> Insts Inst
Rule 7     Insts -> <empty>
Rule 8     Inst -> Attr
Rule 9     Inst -> Exp
Rule 10    Inst -> Print
Rule 11    Inst -> Println
Rule 12    Inst -> Prints
Rule 13    Inst -> Repeat
Rule 14    Inst -> For
Rule 15    Inst -> While
Rule 16    Inst -> Read
Rule 17    Inst -> If
Rule 18    Repeat -> RepeatS ( num ) { Insts }
Rule 19    RepeatS -> repeat
Rule 20    For -> for ( Insts ; Cond ; Insts ) { Insts }
Rule 21    While -> while ( Cond ) { Insts }
Rule 22    Read -> read ( id )
Rule 23    Print -> print ( Exp )
Rule 24    Println -> println ( Exp )
Rule 25    Prints -> prints ( string )
Rule 26    Dcl -> int id [ num ]
Rule 27    Dcl -> int id [ num ] [ num ]
Rule 28    Dcl -> int id
Rule 29    Dcl -> int id = num
Rule 30    Attr -> id = Exp
Rule 31    Attr -> id [ Exp ] = Exp
Rule 32    Attr -> id [ Exp ] [ Exp ] = Exp
Rule 33    If -> if ( Cond ) { Insts }
Rule 34    If -> if ( Cond ) Inst
Rule 35    IfStart -> if ( Cond )
Rule 36    If -> if ( Cond ) { Insts } else { Insts }
Rule 37    ElseStart -> else
Rule 38    Exp -> Exp + Term
Rule 39    Exp -> Exp - Term
Rule 40    Exp -> id addeq Term
Rule 41    Exp -> id subeq Term
Rule 42    Exp -> id addeql Term
Rule 43    Exp -> id subeql Term
Rule 44    Exp -> Term
Rule 45    Term -> Term * Factor
Rule 46    Term -> Term / Factor
Rule 47    Term -> Term % Factor
Rule 48    Term -> id muleq Factor
Rule 49    Term -> id diveq Factor
Rule 50    Term -> id modeq Factor
Rule 51    Term -> id muleql Factor
Rule 52    Term -> id diveql Factor
Rule 53    Term -> id modeql Factor
Rule 54    Term -> Factor
Rule 55    Factor -> id plus
Rule 56    Factor -> id plusl
Rule 57    Factor -> id minus
Rule 58    Factor -> id minusl
Rule 59    Factor -> id
Rule 60    Factor -> num
Rule 61    Factor -> ( Cond )
Rule 62    Factor -> ( Exp )
Rule 63    Id -> id
Rule 64    Id -> id [ Exp ]
Rule 65    Id -> id [ Exp ] [ Exp ]
Rule 66    Cond -> Cond and Cond
Rule 67    Cond -> Cond or Cond
Rule 68    Cond -> ( Cond and Cond )
Rule 69    Cond -> ( Cond or Cond )
Rule 70    Cond -> Exp sup Exp
Rule 71    Cond -> Exp inf Exp
Rule 72    Cond -> Exp supeq Exp
Rule 73    Cond -> Exp infeq Exp
Rule 74    Cond -> not Exp
Rule 75    Cond -> Exp eq Exp
Rule 76    Cond -> Exp diff Exp

Terminals, with rules where they appear

%                    : 47
(                    : 18 20 21 22 23 24 25 33 34 35 36 61 62 68 69
)                    : 18 20 21 22 23 24 25 33 34 35 36 61 62 68 69
*                    : 45
+                    : 38
-                    : 39
/                    : 46
;                    : 20 20
=                    : 29 30 31 32
[                    : 26 27 27 31 32 32 64 65 65
]                    : 26 27 27 31 32 32 64 65 65
addeq                : 40
addeql               : 42
and                  : 66 68
diff                 : 76
diveq                : 49
diveql               : 52
else                 : 36 37
eq                   : 75
error                : 
for                  : 20
id                   : 22 26 27 28 29 30 31 32 40 41 42 43 48 49 50 51 52 53 55 56 57 58 59 63 64 65
if                   : 33 34 35 36
inf                  : 71
infeq                : 73
int                  : 26 27 28 29
main                 : 5
minus                : 57
minusl               : 58
modeq                : 50
modeql               : 53
muleq                : 48
muleql               : 51
not                  : 74
num                  : 18 26 27 27 29 60
or                   : 67 69
plus                 : 55
plusl                : 56
print                : 23
println              : 24
prints               : 25
read                 : 22
repeat               : 19
string               : 25
subeq                : 41
subeql               : 43
sup                  : 70
supeq                : 72
vars                 : 2
while                : 21
{                    : 2 5 18 20 21 33 36 36
}                    : 2 5 18 20 21 33 36 36

Nonterminals, with rules where they appear

Attr                 : 8
Cond                 : 20 21 33 34 35 36 61 66 66 67 67 68 68 69 69
Dcl                  : 3
Dcls                 : 2 3
ElseStart            : 
Exp                  : 9 23 24 30 31 31 32 32 32 38 39 62 64 65 65 70 70 71 71 72 72 73 73 74 75 75 76 76
Factor               : 45 46 47 48 49 50 51 52 53 54
For                  : 14
Id                   : 
If                   : 17
IfStart              : 
Inst                 : 6 34
Insts                : 5 6 18 20 20 20 21 33 36 36
MainBlc              : 1
Print                : 10
Println              : 11
Prints               : 12
Prog                 : 0
Read                 : 16
Repeat               : 13
RepeatS              : 18
Term                 : 38 39 40 41 42 43 44 45 46 47
VarBlc               : 1
While                : 15

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . VarBlc MainBlc
    (2) VarBlc -> . vars { Dcls }

    vars            shift and go to state 3

    Prog                           shift and go to state 1
    VarBlc                         shift and go to state 2

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> VarBlc . MainBlc
    (5) MainBlc -> . main { Insts }

    main            shift and go to state 5

    MainBlc                        shift and go to state 4

state 3

    (2) VarBlc -> vars . { Dcls }

    {               shift and go to state 6


state 4

    (1) Prog -> VarBlc MainBlc .

    $end            reduce using rule 1 (Prog -> VarBlc MainBlc .)


state 5

    (5) MainBlc -> main . { Insts }

    {               shift and go to state 7


state 6

    (2) VarBlc -> vars { . Dcls }
    (3) Dcls -> . Dcls Dcl
    (4) Dcls -> .

    }               reduce using rule 4 (Dcls -> .)
    int             reduce using rule 4 (Dcls -> .)

    Dcls                           shift and go to state 8

state 7

    (5) MainBlc -> main { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    while           reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)
    num             reduce using rule 7 (Insts -> .)
    (               reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 9

state 8

    (2) VarBlc -> vars { Dcls . }
    (3) Dcls -> Dcls . Dcl
    (26) Dcl -> . int id [ num ]
    (27) Dcl -> . int id [ num ] [ num ]
    (28) Dcl -> . int id
    (29) Dcl -> . int id = num

    }               shift and go to state 10
    int             shift and go to state 12

    Dcl                            shift and go to state 11

state 9

    (5) MainBlc -> main { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    }               shift and go to state 13
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    RepeatS                        shift and go to state 31
    Factor                         shift and go to state 37

state 10

    (2) VarBlc -> vars { Dcls } .

    main            reduce using rule 2 (VarBlc -> vars { Dcls } .)


state 11

    (3) Dcls -> Dcls Dcl .

    }               reduce using rule 3 (Dcls -> Dcls Dcl .)
    int             reduce using rule 3 (Dcls -> Dcls Dcl .)


state 12

    (26) Dcl -> int . id [ num ]
    (27) Dcl -> int . id [ num ] [ num ]
    (28) Dcl -> int . id
    (29) Dcl -> int . id = num

    id              shift and go to state 39


state 13

    (5) MainBlc -> main { Insts } .

    $end            reduce using rule 5 (MainBlc -> main { Insts } .)


state 14

    (6) Insts -> Insts Inst .

    }               reduce using rule 6 (Insts -> Insts Inst .)
    id              reduce using rule 6 (Insts -> Insts Inst .)
    print           reduce using rule 6 (Insts -> Insts Inst .)
    println         reduce using rule 6 (Insts -> Insts Inst .)
    prints          reduce using rule 6 (Insts -> Insts Inst .)
    for             reduce using rule 6 (Insts -> Insts Inst .)
    while           reduce using rule 6 (Insts -> Insts Inst .)
    read            reduce using rule 6 (Insts -> Insts Inst .)
    if              reduce using rule 6 (Insts -> Insts Inst .)
    repeat          reduce using rule 6 (Insts -> Insts Inst .)
    num             reduce using rule 6 (Insts -> Insts Inst .)
    (               reduce using rule 6 (Insts -> Insts Inst .)
    ;               reduce using rule 6 (Insts -> Insts Inst .)
    )               reduce using rule 6 (Insts -> Insts Inst .)


state 15

    (8) Inst -> Attr .

    }               reduce using rule 8 (Inst -> Attr .)
    id              reduce using rule 8 (Inst -> Attr .)
    print           reduce using rule 8 (Inst -> Attr .)
    println         reduce using rule 8 (Inst -> Attr .)
    prints          reduce using rule 8 (Inst -> Attr .)
    for             reduce using rule 8 (Inst -> Attr .)
    while           reduce using rule 8 (Inst -> Attr .)
    read            reduce using rule 8 (Inst -> Attr .)
    if              reduce using rule 8 (Inst -> Attr .)
    repeat          reduce using rule 8 (Inst -> Attr .)
    num             reduce using rule 8 (Inst -> Attr .)
    (               reduce using rule 8 (Inst -> Attr .)
    ;               reduce using rule 8 (Inst -> Attr .)
    )               reduce using rule 8 (Inst -> Attr .)


state 16

    (9) Inst -> Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    }               reduce using rule 9 (Inst -> Exp .)
    id              reduce using rule 9 (Inst -> Exp .)
    print           reduce using rule 9 (Inst -> Exp .)
    println         reduce using rule 9 (Inst -> Exp .)
    prints          reduce using rule 9 (Inst -> Exp .)
    for             reduce using rule 9 (Inst -> Exp .)
    while           reduce using rule 9 (Inst -> Exp .)
    read            reduce using rule 9 (Inst -> Exp .)
    if              reduce using rule 9 (Inst -> Exp .)
    repeat          reduce using rule 9 (Inst -> Exp .)
    num             reduce using rule 9 (Inst -> Exp .)
    (               reduce using rule 9 (Inst -> Exp .)
    ;               reduce using rule 9 (Inst -> Exp .)
    )               reduce using rule 9 (Inst -> Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 17

    (10) Inst -> Print .

    }               reduce using rule 10 (Inst -> Print .)
    id              reduce using rule 10 (Inst -> Print .)
    print           reduce using rule 10 (Inst -> Print .)
    println         reduce using rule 10 (Inst -> Print .)
    prints          reduce using rule 10 (Inst -> Print .)
    for             reduce using rule 10 (Inst -> Print .)
    while           reduce using rule 10 (Inst -> Print .)
    read            reduce using rule 10 (Inst -> Print .)
    if              reduce using rule 10 (Inst -> Print .)
    repeat          reduce using rule 10 (Inst -> Print .)
    num             reduce using rule 10 (Inst -> Print .)
    (               reduce using rule 10 (Inst -> Print .)
    ;               reduce using rule 10 (Inst -> Print .)
    )               reduce using rule 10 (Inst -> Print .)


state 18

    (11) Inst -> Println .

    }               reduce using rule 11 (Inst -> Println .)
    id              reduce using rule 11 (Inst -> Println .)
    print           reduce using rule 11 (Inst -> Println .)
    println         reduce using rule 11 (Inst -> Println .)
    prints          reduce using rule 11 (Inst -> Println .)
    for             reduce using rule 11 (Inst -> Println .)
    while           reduce using rule 11 (Inst -> Println .)
    read            reduce using rule 11 (Inst -> Println .)
    if              reduce using rule 11 (Inst -> Println .)
    repeat          reduce using rule 11 (Inst -> Println .)
    num             reduce using rule 11 (Inst -> Println .)
    (               reduce using rule 11 (Inst -> Println .)
    ;               reduce using rule 11 (Inst -> Println .)
    )               reduce using rule 11 (Inst -> Println .)


state 19

    (12) Inst -> Prints .

    }               reduce using rule 12 (Inst -> Prints .)
    id              reduce using rule 12 (Inst -> Prints .)
    print           reduce using rule 12 (Inst -> Prints .)
    println         reduce using rule 12 (Inst -> Prints .)
    prints          reduce using rule 12 (Inst -> Prints .)
    for             reduce using rule 12 (Inst -> Prints .)
    while           reduce using rule 12 (Inst -> Prints .)
    read            reduce using rule 12 (Inst -> Prints .)
    if              reduce using rule 12 (Inst -> Prints .)
    repeat          reduce using rule 12 (Inst -> Prints .)
    num             reduce using rule 12 (Inst -> Prints .)
    (               reduce using rule 12 (Inst -> Prints .)
    ;               reduce using rule 12 (Inst -> Prints .)
    )               reduce using rule 12 (Inst -> Prints .)


state 20

    (13) Inst -> Repeat .

    }               reduce using rule 13 (Inst -> Repeat .)
    id              reduce using rule 13 (Inst -> Repeat .)
    print           reduce using rule 13 (Inst -> Repeat .)
    println         reduce using rule 13 (Inst -> Repeat .)
    prints          reduce using rule 13 (Inst -> Repeat .)
    for             reduce using rule 13 (Inst -> Repeat .)
    while           reduce using rule 13 (Inst -> Repeat .)
    read            reduce using rule 13 (Inst -> Repeat .)
    if              reduce using rule 13 (Inst -> Repeat .)
    repeat          reduce using rule 13 (Inst -> Repeat .)
    num             reduce using rule 13 (Inst -> Repeat .)
    (               reduce using rule 13 (Inst -> Repeat .)
    ;               reduce using rule 13 (Inst -> Repeat .)
    )               reduce using rule 13 (Inst -> Repeat .)


state 21

    (14) Inst -> For .

    }               reduce using rule 14 (Inst -> For .)
    id              reduce using rule 14 (Inst -> For .)
    print           reduce using rule 14 (Inst -> For .)
    println         reduce using rule 14 (Inst -> For .)
    prints          reduce using rule 14 (Inst -> For .)
    for             reduce using rule 14 (Inst -> For .)
    while           reduce using rule 14 (Inst -> For .)
    read            reduce using rule 14 (Inst -> For .)
    if              reduce using rule 14 (Inst -> For .)
    repeat          reduce using rule 14 (Inst -> For .)
    num             reduce using rule 14 (Inst -> For .)
    (               reduce using rule 14 (Inst -> For .)
    ;               reduce using rule 14 (Inst -> For .)
    )               reduce using rule 14 (Inst -> For .)


state 22

    (15) Inst -> While .

    }               reduce using rule 15 (Inst -> While .)
    id              reduce using rule 15 (Inst -> While .)
    print           reduce using rule 15 (Inst -> While .)
    println         reduce using rule 15 (Inst -> While .)
    prints          reduce using rule 15 (Inst -> While .)
    for             reduce using rule 15 (Inst -> While .)
    while           reduce using rule 15 (Inst -> While .)
    read            reduce using rule 15 (Inst -> While .)
    if              reduce using rule 15 (Inst -> While .)
    repeat          reduce using rule 15 (Inst -> While .)
    num             reduce using rule 15 (Inst -> While .)
    (               reduce using rule 15 (Inst -> While .)
    ;               reduce using rule 15 (Inst -> While .)
    )               reduce using rule 15 (Inst -> While .)


state 23

    (16) Inst -> Read .

    }               reduce using rule 16 (Inst -> Read .)
    id              reduce using rule 16 (Inst -> Read .)
    print           reduce using rule 16 (Inst -> Read .)
    println         reduce using rule 16 (Inst -> Read .)
    prints          reduce using rule 16 (Inst -> Read .)
    for             reduce using rule 16 (Inst -> Read .)
    while           reduce using rule 16 (Inst -> Read .)
    read            reduce using rule 16 (Inst -> Read .)
    if              reduce using rule 16 (Inst -> Read .)
    repeat          reduce using rule 16 (Inst -> Read .)
    num             reduce using rule 16 (Inst -> Read .)
    (               reduce using rule 16 (Inst -> Read .)
    ;               reduce using rule 16 (Inst -> Read .)
    )               reduce using rule 16 (Inst -> Read .)


state 24

    (17) Inst -> If .

    }               reduce using rule 17 (Inst -> If .)
    id              reduce using rule 17 (Inst -> If .)
    print           reduce using rule 17 (Inst -> If .)
    println         reduce using rule 17 (Inst -> If .)
    prints          reduce using rule 17 (Inst -> If .)
    for             reduce using rule 17 (Inst -> If .)
    while           reduce using rule 17 (Inst -> If .)
    read            reduce using rule 17 (Inst -> If .)
    if              reduce using rule 17 (Inst -> If .)
    repeat          reduce using rule 17 (Inst -> If .)
    num             reduce using rule 17 (Inst -> If .)
    (               reduce using rule 17 (Inst -> If .)
    ;               reduce using rule 17 (Inst -> If .)
    )               reduce using rule 17 (Inst -> If .)


state 25

    (30) Attr -> id . = Exp
    (31) Attr -> id . [ Exp ] = Exp
    (32) Attr -> id . [ Exp ] [ Exp ] = Exp
    (40) Exp -> id . addeq Term
    (41) Exp -> id . subeq Term
    (42) Exp -> id . addeql Term
    (43) Exp -> id . subeql Term
    (48) Term -> id . muleq Factor
    (49) Term -> id . diveq Factor
    (50) Term -> id . modeq Factor
    (51) Term -> id . muleql Factor
    (52) Term -> id . diveql Factor
    (53) Term -> id . modeql Factor
    (55) Factor -> id . plus
    (56) Factor -> id . plusl
    (57) Factor -> id . minus
    (58) Factor -> id . minusl
    (59) Factor -> id .

    =               shift and go to state 42
    [               shift and go to state 43
    addeq           shift and go to state 44
    subeq           shift and go to state 45
    addeql          shift and go to state 46
    subeql          shift and go to state 47
    muleq           shift and go to state 48
    diveq           shift and go to state 49
    modeq           shift and go to state 50
    muleql          shift and go to state 51
    diveql          shift and go to state 52
    modeql          shift and go to state 53
    plus            shift and go to state 54
    plusl           shift and go to state 55
    minus           shift and go to state 56
    minusl          shift and go to state 57
    *               reduce using rule 59 (Factor -> id .)
    /               reduce using rule 59 (Factor -> id .)
    %               reduce using rule 59 (Factor -> id .)
    +               reduce using rule 59 (Factor -> id .)
    -               reduce using rule 59 (Factor -> id .)
    }               reduce using rule 59 (Factor -> id .)
    id              reduce using rule 59 (Factor -> id .)
    print           reduce using rule 59 (Factor -> id .)
    println         reduce using rule 59 (Factor -> id .)
    prints          reduce using rule 59 (Factor -> id .)
    for             reduce using rule 59 (Factor -> id .)
    while           reduce using rule 59 (Factor -> id .)
    read            reduce using rule 59 (Factor -> id .)
    if              reduce using rule 59 (Factor -> id .)
    repeat          reduce using rule 59 (Factor -> id .)
    num             reduce using rule 59 (Factor -> id .)
    (               reduce using rule 59 (Factor -> id .)
    ;               reduce using rule 59 (Factor -> id .)
    )               reduce using rule 59 (Factor -> id .)


state 26

    (44) Exp -> Term .
    (45) Term -> Term . * Factor
    (46) Term -> Term . / Factor
    (47) Term -> Term . % Factor

    +               reduce using rule 44 (Exp -> Term .)
    -               reduce using rule 44 (Exp -> Term .)
    }               reduce using rule 44 (Exp -> Term .)
    id              reduce using rule 44 (Exp -> Term .)
    print           reduce using rule 44 (Exp -> Term .)
    println         reduce using rule 44 (Exp -> Term .)
    prints          reduce using rule 44 (Exp -> Term .)
    for             reduce using rule 44 (Exp -> Term .)
    while           reduce using rule 44 (Exp -> Term .)
    read            reduce using rule 44 (Exp -> Term .)
    if              reduce using rule 44 (Exp -> Term .)
    repeat          reduce using rule 44 (Exp -> Term .)
    num             reduce using rule 44 (Exp -> Term .)
    (               reduce using rule 44 (Exp -> Term .)
    )               reduce using rule 44 (Exp -> Term .)
    sup             reduce using rule 44 (Exp -> Term .)
    inf             reduce using rule 44 (Exp -> Term .)
    supeq           reduce using rule 44 (Exp -> Term .)
    infeq           reduce using rule 44 (Exp -> Term .)
    eq              reduce using rule 44 (Exp -> Term .)
    diff            reduce using rule 44 (Exp -> Term .)
    ;               reduce using rule 44 (Exp -> Term .)
    ]               reduce using rule 44 (Exp -> Term .)
    and             reduce using rule 44 (Exp -> Term .)
    or              reduce using rule 44 (Exp -> Term .)
    *               shift and go to state 58
    /               shift and go to state 59
    %               shift and go to state 60


state 27

    (23) Print -> print . ( Exp )

    (               shift and go to state 61


state 28

    (61) Factor -> ( . Cond )
    (62) Factor -> ( . Exp )
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 63
    Exp                            shift and go to state 64
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 29

    (24) Println -> println . ( Exp )

    (               shift and go to state 67


state 30

    (25) Prints -> prints . ( string )

    (               shift and go to state 68


state 31

    (18) Repeat -> RepeatS . ( num ) { Insts }

    (               shift and go to state 69


state 32

    (60) Factor -> num .

    *               reduce using rule 60 (Factor -> num .)
    /               reduce using rule 60 (Factor -> num .)
    %               reduce using rule 60 (Factor -> num .)
    +               reduce using rule 60 (Factor -> num .)
    -               reduce using rule 60 (Factor -> num .)
    }               reduce using rule 60 (Factor -> num .)
    id              reduce using rule 60 (Factor -> num .)
    print           reduce using rule 60 (Factor -> num .)
    println         reduce using rule 60 (Factor -> num .)
    prints          reduce using rule 60 (Factor -> num .)
    for             reduce using rule 60 (Factor -> num .)
    while           reduce using rule 60 (Factor -> num .)
    read            reduce using rule 60 (Factor -> num .)
    if              reduce using rule 60 (Factor -> num .)
    repeat          reduce using rule 60 (Factor -> num .)
    num             reduce using rule 60 (Factor -> num .)
    (               reduce using rule 60 (Factor -> num .)
    )               reduce using rule 60 (Factor -> num .)
    sup             reduce using rule 60 (Factor -> num .)
    inf             reduce using rule 60 (Factor -> num .)
    supeq           reduce using rule 60 (Factor -> num .)
    infeq           reduce using rule 60 (Factor -> num .)
    eq              reduce using rule 60 (Factor -> num .)
    diff            reduce using rule 60 (Factor -> num .)
    ;               reduce using rule 60 (Factor -> num .)
    ]               reduce using rule 60 (Factor -> num .)
    and             reduce using rule 60 (Factor -> num .)
    or              reduce using rule 60 (Factor -> num .)


state 33

    (20) For -> for . ( Insts ; Cond ; Insts ) { Insts }

    (               shift and go to state 70


state 34

    (21) While -> while . ( Cond ) { Insts }

    (               shift and go to state 71


state 35

    (22) Read -> read . ( id )

    (               shift and go to state 72


state 36

    (33) If -> if . ( Cond ) { Insts }
    (34) If -> if . ( Cond ) Inst
    (36) If -> if . ( Cond ) { Insts } else { Insts }

    (               shift and go to state 73


state 37

    (54) Term -> Factor .

    *               reduce using rule 54 (Term -> Factor .)
    /               reduce using rule 54 (Term -> Factor .)
    %               reduce using rule 54 (Term -> Factor .)
    +               reduce using rule 54 (Term -> Factor .)
    -               reduce using rule 54 (Term -> Factor .)
    }               reduce using rule 54 (Term -> Factor .)
    id              reduce using rule 54 (Term -> Factor .)
    print           reduce using rule 54 (Term -> Factor .)
    println         reduce using rule 54 (Term -> Factor .)
    prints          reduce using rule 54 (Term -> Factor .)
    for             reduce using rule 54 (Term -> Factor .)
    while           reduce using rule 54 (Term -> Factor .)
    read            reduce using rule 54 (Term -> Factor .)
    if              reduce using rule 54 (Term -> Factor .)
    repeat          reduce using rule 54 (Term -> Factor .)
    num             reduce using rule 54 (Term -> Factor .)
    (               reduce using rule 54 (Term -> Factor .)
    )               reduce using rule 54 (Term -> Factor .)
    sup             reduce using rule 54 (Term -> Factor .)
    inf             reduce using rule 54 (Term -> Factor .)
    supeq           reduce using rule 54 (Term -> Factor .)
    infeq           reduce using rule 54 (Term -> Factor .)
    eq              reduce using rule 54 (Term -> Factor .)
    diff            reduce using rule 54 (Term -> Factor .)
    ;               reduce using rule 54 (Term -> Factor .)
    ]               reduce using rule 54 (Term -> Factor .)
    and             reduce using rule 54 (Term -> Factor .)
    or              reduce using rule 54 (Term -> Factor .)


state 38

    (19) RepeatS -> repeat .

    (               reduce using rule 19 (RepeatS -> repeat .)


state 39

    (26) Dcl -> int id . [ num ]
    (27) Dcl -> int id . [ num ] [ num ]
    (28) Dcl -> int id .
    (29) Dcl -> int id . = num

    [               shift and go to state 74
    }               reduce using rule 28 (Dcl -> int id .)
    int             reduce using rule 28 (Dcl -> int id .)
    =               shift and go to state 75


state 40

    (38) Exp -> Exp + . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 77
    num             shift and go to state 32
    (               shift and go to state 28

    Term                           shift and go to state 76
    Factor                         shift and go to state 37

state 41

    (39) Exp -> Exp - . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 77
    num             shift and go to state 32
    (               shift and go to state 28

    Term                           shift and go to state 78
    Factor                         shift and go to state 37

state 42

    (30) Attr -> id = . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 79
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 43

    (31) Attr -> id [ . Exp ] = Exp
    (32) Attr -> id [ . Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 80
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 44

    (40) Exp -> id addeq . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 77
    num             shift and go to state 32
    (               shift and go to state 28

    Term                           shift and go to state 81
    Factor                         shift and go to state 37

state 45

    (41) Exp -> id subeq . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 77
    num             shift and go to state 32
    (               shift and go to state 28

    Term                           shift and go to state 82
    Factor                         shift and go to state 37

state 46

    (42) Exp -> id addeql . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 77
    num             shift and go to state 32
    (               shift and go to state 28

    Term                           shift and go to state 83
    Factor                         shift and go to state 37

state 47

    (43) Exp -> id subeql . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 77
    num             shift and go to state 32
    (               shift and go to state 28

    Term                           shift and go to state 84
    Factor                         shift and go to state 37

state 48

    (48) Term -> id muleq . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 86

state 49

    (49) Term -> id diveq . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 87

state 50

    (50) Term -> id modeq . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 88

state 51

    (51) Term -> id muleql . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 89

state 52

    (52) Term -> id diveql . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 90

state 53

    (53) Term -> id modeql . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 91

state 54

    (55) Factor -> id plus .

    *               reduce using rule 55 (Factor -> id plus .)
    /               reduce using rule 55 (Factor -> id plus .)
    %               reduce using rule 55 (Factor -> id plus .)
    +               reduce using rule 55 (Factor -> id plus .)
    -               reduce using rule 55 (Factor -> id plus .)
    }               reduce using rule 55 (Factor -> id plus .)
    id              reduce using rule 55 (Factor -> id plus .)
    print           reduce using rule 55 (Factor -> id plus .)
    println         reduce using rule 55 (Factor -> id plus .)
    prints          reduce using rule 55 (Factor -> id plus .)
    for             reduce using rule 55 (Factor -> id plus .)
    while           reduce using rule 55 (Factor -> id plus .)
    read            reduce using rule 55 (Factor -> id plus .)
    if              reduce using rule 55 (Factor -> id plus .)
    repeat          reduce using rule 55 (Factor -> id plus .)
    num             reduce using rule 55 (Factor -> id plus .)
    (               reduce using rule 55 (Factor -> id plus .)
    )               reduce using rule 55 (Factor -> id plus .)
    sup             reduce using rule 55 (Factor -> id plus .)
    inf             reduce using rule 55 (Factor -> id plus .)
    supeq           reduce using rule 55 (Factor -> id plus .)
    infeq           reduce using rule 55 (Factor -> id plus .)
    eq              reduce using rule 55 (Factor -> id plus .)
    diff            reduce using rule 55 (Factor -> id plus .)
    ;               reduce using rule 55 (Factor -> id plus .)
    ]               reduce using rule 55 (Factor -> id plus .)
    and             reduce using rule 55 (Factor -> id plus .)
    or              reduce using rule 55 (Factor -> id plus .)


state 55

    (56) Factor -> id plusl .

    *               reduce using rule 56 (Factor -> id plusl .)
    /               reduce using rule 56 (Factor -> id plusl .)
    %               reduce using rule 56 (Factor -> id plusl .)
    +               reduce using rule 56 (Factor -> id plusl .)
    -               reduce using rule 56 (Factor -> id plusl .)
    }               reduce using rule 56 (Factor -> id plusl .)
    id              reduce using rule 56 (Factor -> id plusl .)
    print           reduce using rule 56 (Factor -> id plusl .)
    println         reduce using rule 56 (Factor -> id plusl .)
    prints          reduce using rule 56 (Factor -> id plusl .)
    for             reduce using rule 56 (Factor -> id plusl .)
    while           reduce using rule 56 (Factor -> id plusl .)
    read            reduce using rule 56 (Factor -> id plusl .)
    if              reduce using rule 56 (Factor -> id plusl .)
    repeat          reduce using rule 56 (Factor -> id plusl .)
    num             reduce using rule 56 (Factor -> id plusl .)
    (               reduce using rule 56 (Factor -> id plusl .)
    )               reduce using rule 56 (Factor -> id plusl .)
    sup             reduce using rule 56 (Factor -> id plusl .)
    inf             reduce using rule 56 (Factor -> id plusl .)
    supeq           reduce using rule 56 (Factor -> id plusl .)
    infeq           reduce using rule 56 (Factor -> id plusl .)
    eq              reduce using rule 56 (Factor -> id plusl .)
    diff            reduce using rule 56 (Factor -> id plusl .)
    ;               reduce using rule 56 (Factor -> id plusl .)
    ]               reduce using rule 56 (Factor -> id plusl .)
    and             reduce using rule 56 (Factor -> id plusl .)
    or              reduce using rule 56 (Factor -> id plusl .)


state 56

    (57) Factor -> id minus .

    *               reduce using rule 57 (Factor -> id minus .)
    /               reduce using rule 57 (Factor -> id minus .)
    %               reduce using rule 57 (Factor -> id minus .)
    +               reduce using rule 57 (Factor -> id minus .)
    -               reduce using rule 57 (Factor -> id minus .)
    }               reduce using rule 57 (Factor -> id minus .)
    id              reduce using rule 57 (Factor -> id minus .)
    print           reduce using rule 57 (Factor -> id minus .)
    println         reduce using rule 57 (Factor -> id minus .)
    prints          reduce using rule 57 (Factor -> id minus .)
    for             reduce using rule 57 (Factor -> id minus .)
    while           reduce using rule 57 (Factor -> id minus .)
    read            reduce using rule 57 (Factor -> id minus .)
    if              reduce using rule 57 (Factor -> id minus .)
    repeat          reduce using rule 57 (Factor -> id minus .)
    num             reduce using rule 57 (Factor -> id minus .)
    (               reduce using rule 57 (Factor -> id minus .)
    )               reduce using rule 57 (Factor -> id minus .)
    sup             reduce using rule 57 (Factor -> id minus .)
    inf             reduce using rule 57 (Factor -> id minus .)
    supeq           reduce using rule 57 (Factor -> id minus .)
    infeq           reduce using rule 57 (Factor -> id minus .)
    eq              reduce using rule 57 (Factor -> id minus .)
    diff            reduce using rule 57 (Factor -> id minus .)
    ;               reduce using rule 57 (Factor -> id minus .)
    ]               reduce using rule 57 (Factor -> id minus .)
    and             reduce using rule 57 (Factor -> id minus .)
    or              reduce using rule 57 (Factor -> id minus .)


state 57

    (58) Factor -> id minusl .

    *               reduce using rule 58 (Factor -> id minusl .)
    /               reduce using rule 58 (Factor -> id minusl .)
    %               reduce using rule 58 (Factor -> id minusl .)
    +               reduce using rule 58 (Factor -> id minusl .)
    -               reduce using rule 58 (Factor -> id minusl .)
    }               reduce using rule 58 (Factor -> id minusl .)
    id              reduce using rule 58 (Factor -> id minusl .)
    print           reduce using rule 58 (Factor -> id minusl .)
    println         reduce using rule 58 (Factor -> id minusl .)
    prints          reduce using rule 58 (Factor -> id minusl .)
    for             reduce using rule 58 (Factor -> id minusl .)
    while           reduce using rule 58 (Factor -> id minusl .)
    read            reduce using rule 58 (Factor -> id minusl .)
    if              reduce using rule 58 (Factor -> id minusl .)
    repeat          reduce using rule 58 (Factor -> id minusl .)
    num             reduce using rule 58 (Factor -> id minusl .)
    (               reduce using rule 58 (Factor -> id minusl .)
    )               reduce using rule 58 (Factor -> id minusl .)
    sup             reduce using rule 58 (Factor -> id minusl .)
    inf             reduce using rule 58 (Factor -> id minusl .)
    supeq           reduce using rule 58 (Factor -> id minusl .)
    infeq           reduce using rule 58 (Factor -> id minusl .)
    eq              reduce using rule 58 (Factor -> id minusl .)
    diff            reduce using rule 58 (Factor -> id minusl .)
    ;               reduce using rule 58 (Factor -> id minusl .)
    ]               reduce using rule 58 (Factor -> id minusl .)
    and             reduce using rule 58 (Factor -> id minusl .)
    or              reduce using rule 58 (Factor -> id minusl .)


state 58

    (45) Term -> Term * . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 92

state 59

    (46) Term -> Term / . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 93

state 60

    (47) Term -> Term % . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 85
    num             shift and go to state 32
    (               shift and go to state 28

    Factor                         shift and go to state 94

state 61

    (23) Print -> print ( . Exp )
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 95
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 62

    (68) Cond -> ( . Cond and Cond )
    (69) Cond -> ( . Cond or Cond )
    (61) Factor -> ( . Cond )
    (62) Factor -> ( . Exp )
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 96
    Exp                            shift and go to state 64
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 63

    (61) Factor -> ( Cond . )
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

    )               shift and go to state 97
    and             shift and go to state 98
    or              shift and go to state 99


state 64

    (62) Factor -> ( Exp . )
    (70) Cond -> Exp . sup Exp
    (71) Cond -> Exp . inf Exp
    (72) Cond -> Exp . supeq Exp
    (73) Cond -> Exp . infeq Exp
    (75) Cond -> Exp . eq Exp
    (76) Cond -> Exp . diff Exp
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               shift and go to state 100
    sup             shift and go to state 101
    inf             shift and go to state 102
    supeq           shift and go to state 103
    infeq           shift and go to state 104
    eq              shift and go to state 105
    diff            shift and go to state 106
    +               shift and go to state 40
    -               shift and go to state 41


state 65

    (74) Cond -> not . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 107
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 66

    (40) Exp -> id . addeq Term
    (41) Exp -> id . subeq Term
    (42) Exp -> id . addeql Term
    (43) Exp -> id . subeql Term
    (48) Term -> id . muleq Factor
    (49) Term -> id . diveq Factor
    (50) Term -> id . modeq Factor
    (51) Term -> id . muleql Factor
    (52) Term -> id . diveql Factor
    (53) Term -> id . modeql Factor
    (55) Factor -> id . plus
    (56) Factor -> id . plusl
    (57) Factor -> id . minus
    (58) Factor -> id . minusl
    (59) Factor -> id .

    addeq           shift and go to state 44
    subeq           shift and go to state 45
    addeql          shift and go to state 46
    subeql          shift and go to state 47
    muleq           shift and go to state 48
    diveq           shift and go to state 49
    modeq           shift and go to state 50
    muleql          shift and go to state 51
    diveql          shift and go to state 52
    modeql          shift and go to state 53
    plus            shift and go to state 54
    plusl           shift and go to state 55
    minus           shift and go to state 56
    minusl          shift and go to state 57
    *               reduce using rule 59 (Factor -> id .)
    /               reduce using rule 59 (Factor -> id .)
    %               reduce using rule 59 (Factor -> id .)
    )               reduce using rule 59 (Factor -> id .)
    sup             reduce using rule 59 (Factor -> id .)
    inf             reduce using rule 59 (Factor -> id .)
    supeq           reduce using rule 59 (Factor -> id .)
    infeq           reduce using rule 59 (Factor -> id .)
    eq              reduce using rule 59 (Factor -> id .)
    diff            reduce using rule 59 (Factor -> id .)
    +               reduce using rule 59 (Factor -> id .)
    -               reduce using rule 59 (Factor -> id .)
    }               reduce using rule 59 (Factor -> id .)
    id              reduce using rule 59 (Factor -> id .)
    print           reduce using rule 59 (Factor -> id .)
    println         reduce using rule 59 (Factor -> id .)
    prints          reduce using rule 59 (Factor -> id .)
    for             reduce using rule 59 (Factor -> id .)
    while           reduce using rule 59 (Factor -> id .)
    read            reduce using rule 59 (Factor -> id .)
    if              reduce using rule 59 (Factor -> id .)
    repeat          reduce using rule 59 (Factor -> id .)
    num             reduce using rule 59 (Factor -> id .)
    (               reduce using rule 59 (Factor -> id .)
    ;               reduce using rule 59 (Factor -> id .)
    ]               reduce using rule 59 (Factor -> id .)
    and             reduce using rule 59 (Factor -> id .)
    or              reduce using rule 59 (Factor -> id .)


state 67

    (24) Println -> println ( . Exp )
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 108
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 68

    (25) Prints -> prints ( . string )

    string          shift and go to state 109


state 69

    (18) Repeat -> RepeatS ( . num ) { Insts }

    num             shift and go to state 110


state 70

    (20) For -> for ( . Insts ; Cond ; Insts ) { Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    ;               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    while           reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)
    num             reduce using rule 7 (Insts -> .)
    (               reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 111

state 71

    (21) While -> while ( . Cond ) { Insts }
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 112
    Exp                            shift and go to state 113
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 72

    (22) Read -> read ( . id )

    id              shift and go to state 114


state 73

    (33) If -> if ( . Cond ) { Insts }
    (34) If -> if ( . Cond ) Inst
    (36) If -> if ( . Cond ) { Insts } else { Insts }
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 115
    Exp                            shift and go to state 113
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 74

    (26) Dcl -> int id [ . num ]
    (27) Dcl -> int id [ . num ] [ num ]

    num             shift and go to state 116


state 75

    (29) Dcl -> int id = . num

    num             shift and go to state 117


state 76

    (38) Exp -> Exp + Term .
    (45) Term -> Term . * Factor
    (46) Term -> Term . / Factor
    (47) Term -> Term . % Factor

    +               reduce using rule 38 (Exp -> Exp + Term .)
    -               reduce using rule 38 (Exp -> Exp + Term .)
    }               reduce using rule 38 (Exp -> Exp + Term .)
    id              reduce using rule 38 (Exp -> Exp + Term .)
    print           reduce using rule 38 (Exp -> Exp + Term .)
    println         reduce using rule 38 (Exp -> Exp + Term .)
    prints          reduce using rule 38 (Exp -> Exp + Term .)
    for             reduce using rule 38 (Exp -> Exp + Term .)
    while           reduce using rule 38 (Exp -> Exp + Term .)
    read            reduce using rule 38 (Exp -> Exp + Term .)
    if              reduce using rule 38 (Exp -> Exp + Term .)
    repeat          reduce using rule 38 (Exp -> Exp + Term .)
    num             reduce using rule 38 (Exp -> Exp + Term .)
    (               reduce using rule 38 (Exp -> Exp + Term .)
    )               reduce using rule 38 (Exp -> Exp + Term .)
    sup             reduce using rule 38 (Exp -> Exp + Term .)
    inf             reduce using rule 38 (Exp -> Exp + Term .)
    supeq           reduce using rule 38 (Exp -> Exp + Term .)
    infeq           reduce using rule 38 (Exp -> Exp + Term .)
    eq              reduce using rule 38 (Exp -> Exp + Term .)
    diff            reduce using rule 38 (Exp -> Exp + Term .)
    ;               reduce using rule 38 (Exp -> Exp + Term .)
    ]               reduce using rule 38 (Exp -> Exp + Term .)
    and             reduce using rule 38 (Exp -> Exp + Term .)
    or              reduce using rule 38 (Exp -> Exp + Term .)
    *               shift and go to state 58
    /               shift and go to state 59
    %               shift and go to state 60


state 77

    (48) Term -> id . muleq Factor
    (49) Term -> id . diveq Factor
    (50) Term -> id . modeq Factor
    (51) Term -> id . muleql Factor
    (52) Term -> id . diveql Factor
    (53) Term -> id . modeql Factor
    (55) Factor -> id . plus
    (56) Factor -> id . plusl
    (57) Factor -> id . minus
    (58) Factor -> id . minusl
    (59) Factor -> id .

    muleq           shift and go to state 48
    diveq           shift and go to state 49
    modeq           shift and go to state 50
    muleql          shift and go to state 51
    diveql          shift and go to state 52
    modeql          shift and go to state 53
    plus            shift and go to state 54
    plusl           shift and go to state 55
    minus           shift and go to state 56
    minusl          shift and go to state 57
    *               reduce using rule 59 (Factor -> id .)
    /               reduce using rule 59 (Factor -> id .)
    %               reduce using rule 59 (Factor -> id .)
    +               reduce using rule 59 (Factor -> id .)
    -               reduce using rule 59 (Factor -> id .)
    }               reduce using rule 59 (Factor -> id .)
    id              reduce using rule 59 (Factor -> id .)
    print           reduce using rule 59 (Factor -> id .)
    println         reduce using rule 59 (Factor -> id .)
    prints          reduce using rule 59 (Factor -> id .)
    for             reduce using rule 59 (Factor -> id .)
    while           reduce using rule 59 (Factor -> id .)
    read            reduce using rule 59 (Factor -> id .)
    if              reduce using rule 59 (Factor -> id .)
    repeat          reduce using rule 59 (Factor -> id .)
    num             reduce using rule 59 (Factor -> id .)
    (               reduce using rule 59 (Factor -> id .)
    )               reduce using rule 59 (Factor -> id .)
    sup             reduce using rule 59 (Factor -> id .)
    inf             reduce using rule 59 (Factor -> id .)
    supeq           reduce using rule 59 (Factor -> id .)
    infeq           reduce using rule 59 (Factor -> id .)
    eq              reduce using rule 59 (Factor -> id .)
    diff            reduce using rule 59 (Factor -> id .)
    ;               reduce using rule 59 (Factor -> id .)
    ]               reduce using rule 59 (Factor -> id .)
    and             reduce using rule 59 (Factor -> id .)
    or              reduce using rule 59 (Factor -> id .)


state 78

    (39) Exp -> Exp - Term .
    (45) Term -> Term . * Factor
    (46) Term -> Term . / Factor
    (47) Term -> Term . % Factor

    +               reduce using rule 39 (Exp -> Exp - Term .)
    -               reduce using rule 39 (Exp -> Exp - Term .)
    }               reduce using rule 39 (Exp -> Exp - Term .)
    id              reduce using rule 39 (Exp -> Exp - Term .)
    print           reduce using rule 39 (Exp -> Exp - Term .)
    println         reduce using rule 39 (Exp -> Exp - Term .)
    prints          reduce using rule 39 (Exp -> Exp - Term .)
    for             reduce using rule 39 (Exp -> Exp - Term .)
    while           reduce using rule 39 (Exp -> Exp - Term .)
    read            reduce using rule 39 (Exp -> Exp - Term .)
    if              reduce using rule 39 (Exp -> Exp - Term .)
    repeat          reduce using rule 39 (Exp -> Exp - Term .)
    num             reduce using rule 39 (Exp -> Exp - Term .)
    (               reduce using rule 39 (Exp -> Exp - Term .)
    )               reduce using rule 39 (Exp -> Exp - Term .)
    sup             reduce using rule 39 (Exp -> Exp - Term .)
    inf             reduce using rule 39 (Exp -> Exp - Term .)
    supeq           reduce using rule 39 (Exp -> Exp - Term .)
    infeq           reduce using rule 39 (Exp -> Exp - Term .)
    eq              reduce using rule 39 (Exp -> Exp - Term .)
    diff            reduce using rule 39 (Exp -> Exp - Term .)
    ;               reduce using rule 39 (Exp -> Exp - Term .)
    ]               reduce using rule 39 (Exp -> Exp - Term .)
    and             reduce using rule 39 (Exp -> Exp - Term .)
    or              reduce using rule 39 (Exp -> Exp - Term .)
    *               shift and go to state 58
    /               shift and go to state 59
    %               shift and go to state 60


state 79

    (30) Attr -> id = Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    }               reduce using rule 30 (Attr -> id = Exp .)
    id              reduce using rule 30 (Attr -> id = Exp .)
    print           reduce using rule 30 (Attr -> id = Exp .)
    println         reduce using rule 30 (Attr -> id = Exp .)
    prints          reduce using rule 30 (Attr -> id = Exp .)
    for             reduce using rule 30 (Attr -> id = Exp .)
    while           reduce using rule 30 (Attr -> id = Exp .)
    read            reduce using rule 30 (Attr -> id = Exp .)
    if              reduce using rule 30 (Attr -> id = Exp .)
    repeat          reduce using rule 30 (Attr -> id = Exp .)
    num             reduce using rule 30 (Attr -> id = Exp .)
    (               reduce using rule 30 (Attr -> id = Exp .)
    ;               reduce using rule 30 (Attr -> id = Exp .)
    )               reduce using rule 30 (Attr -> id = Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 80

    (31) Attr -> id [ Exp . ] = Exp
    (32) Attr -> id [ Exp . ] [ Exp ] = Exp
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    ]               shift and go to state 118
    +               shift and go to state 40
    -               shift and go to state 41


state 81

    (40) Exp -> id addeq Term .
    (45) Term -> Term . * Factor
    (46) Term -> Term . / Factor
    (47) Term -> Term . % Factor

    +               reduce using rule 40 (Exp -> id addeq Term .)
    -               reduce using rule 40 (Exp -> id addeq Term .)
    }               reduce using rule 40 (Exp -> id addeq Term .)
    id              reduce using rule 40 (Exp -> id addeq Term .)
    print           reduce using rule 40 (Exp -> id addeq Term .)
    println         reduce using rule 40 (Exp -> id addeq Term .)
    prints          reduce using rule 40 (Exp -> id addeq Term .)
    for             reduce using rule 40 (Exp -> id addeq Term .)
    while           reduce using rule 40 (Exp -> id addeq Term .)
    read            reduce using rule 40 (Exp -> id addeq Term .)
    if              reduce using rule 40 (Exp -> id addeq Term .)
    repeat          reduce using rule 40 (Exp -> id addeq Term .)
    num             reduce using rule 40 (Exp -> id addeq Term .)
    (               reduce using rule 40 (Exp -> id addeq Term .)
    )               reduce using rule 40 (Exp -> id addeq Term .)
    sup             reduce using rule 40 (Exp -> id addeq Term .)
    inf             reduce using rule 40 (Exp -> id addeq Term .)
    supeq           reduce using rule 40 (Exp -> id addeq Term .)
    infeq           reduce using rule 40 (Exp -> id addeq Term .)
    eq              reduce using rule 40 (Exp -> id addeq Term .)
    diff            reduce using rule 40 (Exp -> id addeq Term .)
    ;               reduce using rule 40 (Exp -> id addeq Term .)
    ]               reduce using rule 40 (Exp -> id addeq Term .)
    and             reduce using rule 40 (Exp -> id addeq Term .)
    or              reduce using rule 40 (Exp -> id addeq Term .)
    *               shift and go to state 58
    /               shift and go to state 59
    %               shift and go to state 60


state 82

    (41) Exp -> id subeq Term .
    (45) Term -> Term . * Factor
    (46) Term -> Term . / Factor
    (47) Term -> Term . % Factor

    +               reduce using rule 41 (Exp -> id subeq Term .)
    -               reduce using rule 41 (Exp -> id subeq Term .)
    }               reduce using rule 41 (Exp -> id subeq Term .)
    id              reduce using rule 41 (Exp -> id subeq Term .)
    print           reduce using rule 41 (Exp -> id subeq Term .)
    println         reduce using rule 41 (Exp -> id subeq Term .)
    prints          reduce using rule 41 (Exp -> id subeq Term .)
    for             reduce using rule 41 (Exp -> id subeq Term .)
    while           reduce using rule 41 (Exp -> id subeq Term .)
    read            reduce using rule 41 (Exp -> id subeq Term .)
    if              reduce using rule 41 (Exp -> id subeq Term .)
    repeat          reduce using rule 41 (Exp -> id subeq Term .)
    num             reduce using rule 41 (Exp -> id subeq Term .)
    (               reduce using rule 41 (Exp -> id subeq Term .)
    )               reduce using rule 41 (Exp -> id subeq Term .)
    sup             reduce using rule 41 (Exp -> id subeq Term .)
    inf             reduce using rule 41 (Exp -> id subeq Term .)
    supeq           reduce using rule 41 (Exp -> id subeq Term .)
    infeq           reduce using rule 41 (Exp -> id subeq Term .)
    eq              reduce using rule 41 (Exp -> id subeq Term .)
    diff            reduce using rule 41 (Exp -> id subeq Term .)
    ;               reduce using rule 41 (Exp -> id subeq Term .)
    ]               reduce using rule 41 (Exp -> id subeq Term .)
    and             reduce using rule 41 (Exp -> id subeq Term .)
    or              reduce using rule 41 (Exp -> id subeq Term .)
    *               shift and go to state 58
    /               shift and go to state 59
    %               shift and go to state 60


state 83

    (42) Exp -> id addeql Term .
    (45) Term -> Term . * Factor
    (46) Term -> Term . / Factor
    (47) Term -> Term . % Factor

    +               reduce using rule 42 (Exp -> id addeql Term .)
    -               reduce using rule 42 (Exp -> id addeql Term .)
    }               reduce using rule 42 (Exp -> id addeql Term .)
    id              reduce using rule 42 (Exp -> id addeql Term .)
    print           reduce using rule 42 (Exp -> id addeql Term .)
    println         reduce using rule 42 (Exp -> id addeql Term .)
    prints          reduce using rule 42 (Exp -> id addeql Term .)
    for             reduce using rule 42 (Exp -> id addeql Term .)
    while           reduce using rule 42 (Exp -> id addeql Term .)
    read            reduce using rule 42 (Exp -> id addeql Term .)
    if              reduce using rule 42 (Exp -> id addeql Term .)
    repeat          reduce using rule 42 (Exp -> id addeql Term .)
    num             reduce using rule 42 (Exp -> id addeql Term .)
    (               reduce using rule 42 (Exp -> id addeql Term .)
    )               reduce using rule 42 (Exp -> id addeql Term .)
    sup             reduce using rule 42 (Exp -> id addeql Term .)
    inf             reduce using rule 42 (Exp -> id addeql Term .)
    supeq           reduce using rule 42 (Exp -> id addeql Term .)
    infeq           reduce using rule 42 (Exp -> id addeql Term .)
    eq              reduce using rule 42 (Exp -> id addeql Term .)
    diff            reduce using rule 42 (Exp -> id addeql Term .)
    ;               reduce using rule 42 (Exp -> id addeql Term .)
    ]               reduce using rule 42 (Exp -> id addeql Term .)
    and             reduce using rule 42 (Exp -> id addeql Term .)
    or              reduce using rule 42 (Exp -> id addeql Term .)
    *               shift and go to state 58
    /               shift and go to state 59
    %               shift and go to state 60


state 84

    (43) Exp -> id subeql Term .
    (45) Term -> Term . * Factor
    (46) Term -> Term . / Factor
    (47) Term -> Term . % Factor

    +               reduce using rule 43 (Exp -> id subeql Term .)
    -               reduce using rule 43 (Exp -> id subeql Term .)
    }               reduce using rule 43 (Exp -> id subeql Term .)
    id              reduce using rule 43 (Exp -> id subeql Term .)
    print           reduce using rule 43 (Exp -> id subeql Term .)
    println         reduce using rule 43 (Exp -> id subeql Term .)
    prints          reduce using rule 43 (Exp -> id subeql Term .)
    for             reduce using rule 43 (Exp -> id subeql Term .)
    while           reduce using rule 43 (Exp -> id subeql Term .)
    read            reduce using rule 43 (Exp -> id subeql Term .)
    if              reduce using rule 43 (Exp -> id subeql Term .)
    repeat          reduce using rule 43 (Exp -> id subeql Term .)
    num             reduce using rule 43 (Exp -> id subeql Term .)
    (               reduce using rule 43 (Exp -> id subeql Term .)
    )               reduce using rule 43 (Exp -> id subeql Term .)
    sup             reduce using rule 43 (Exp -> id subeql Term .)
    inf             reduce using rule 43 (Exp -> id subeql Term .)
    supeq           reduce using rule 43 (Exp -> id subeql Term .)
    infeq           reduce using rule 43 (Exp -> id subeql Term .)
    eq              reduce using rule 43 (Exp -> id subeql Term .)
    diff            reduce using rule 43 (Exp -> id subeql Term .)
    ;               reduce using rule 43 (Exp -> id subeql Term .)
    ]               reduce using rule 43 (Exp -> id subeql Term .)
    and             reduce using rule 43 (Exp -> id subeql Term .)
    or              reduce using rule 43 (Exp -> id subeql Term .)
    *               shift and go to state 58
    /               shift and go to state 59
    %               shift and go to state 60


state 85

    (55) Factor -> id . plus
    (56) Factor -> id . plusl
    (57) Factor -> id . minus
    (58) Factor -> id . minusl
    (59) Factor -> id .

    plus            shift and go to state 54
    plusl           shift and go to state 55
    minus           shift and go to state 56
    minusl          shift and go to state 57
    *               reduce using rule 59 (Factor -> id .)
    /               reduce using rule 59 (Factor -> id .)
    %               reduce using rule 59 (Factor -> id .)
    +               reduce using rule 59 (Factor -> id .)
    -               reduce using rule 59 (Factor -> id .)
    }               reduce using rule 59 (Factor -> id .)
    id              reduce using rule 59 (Factor -> id .)
    print           reduce using rule 59 (Factor -> id .)
    println         reduce using rule 59 (Factor -> id .)
    prints          reduce using rule 59 (Factor -> id .)
    for             reduce using rule 59 (Factor -> id .)
    while           reduce using rule 59 (Factor -> id .)
    read            reduce using rule 59 (Factor -> id .)
    if              reduce using rule 59 (Factor -> id .)
    repeat          reduce using rule 59 (Factor -> id .)
    num             reduce using rule 59 (Factor -> id .)
    (               reduce using rule 59 (Factor -> id .)
    )               reduce using rule 59 (Factor -> id .)
    sup             reduce using rule 59 (Factor -> id .)
    inf             reduce using rule 59 (Factor -> id .)
    supeq           reduce using rule 59 (Factor -> id .)
    infeq           reduce using rule 59 (Factor -> id .)
    eq              reduce using rule 59 (Factor -> id .)
    diff            reduce using rule 59 (Factor -> id .)
    ;               reduce using rule 59 (Factor -> id .)
    ]               reduce using rule 59 (Factor -> id .)
    and             reduce using rule 59 (Factor -> id .)
    or              reduce using rule 59 (Factor -> id .)


state 86

    (48) Term -> id muleq Factor .

    *               reduce using rule 48 (Term -> id muleq Factor .)
    /               reduce using rule 48 (Term -> id muleq Factor .)
    %               reduce using rule 48 (Term -> id muleq Factor .)
    +               reduce using rule 48 (Term -> id muleq Factor .)
    -               reduce using rule 48 (Term -> id muleq Factor .)
    }               reduce using rule 48 (Term -> id muleq Factor .)
    id              reduce using rule 48 (Term -> id muleq Factor .)
    print           reduce using rule 48 (Term -> id muleq Factor .)
    println         reduce using rule 48 (Term -> id muleq Factor .)
    prints          reduce using rule 48 (Term -> id muleq Factor .)
    for             reduce using rule 48 (Term -> id muleq Factor .)
    while           reduce using rule 48 (Term -> id muleq Factor .)
    read            reduce using rule 48 (Term -> id muleq Factor .)
    if              reduce using rule 48 (Term -> id muleq Factor .)
    repeat          reduce using rule 48 (Term -> id muleq Factor .)
    num             reduce using rule 48 (Term -> id muleq Factor .)
    (               reduce using rule 48 (Term -> id muleq Factor .)
    )               reduce using rule 48 (Term -> id muleq Factor .)
    sup             reduce using rule 48 (Term -> id muleq Factor .)
    inf             reduce using rule 48 (Term -> id muleq Factor .)
    supeq           reduce using rule 48 (Term -> id muleq Factor .)
    infeq           reduce using rule 48 (Term -> id muleq Factor .)
    eq              reduce using rule 48 (Term -> id muleq Factor .)
    diff            reduce using rule 48 (Term -> id muleq Factor .)
    ;               reduce using rule 48 (Term -> id muleq Factor .)
    ]               reduce using rule 48 (Term -> id muleq Factor .)
    and             reduce using rule 48 (Term -> id muleq Factor .)
    or              reduce using rule 48 (Term -> id muleq Factor .)


state 87

    (49) Term -> id diveq Factor .

    *               reduce using rule 49 (Term -> id diveq Factor .)
    /               reduce using rule 49 (Term -> id diveq Factor .)
    %               reduce using rule 49 (Term -> id diveq Factor .)
    +               reduce using rule 49 (Term -> id diveq Factor .)
    -               reduce using rule 49 (Term -> id diveq Factor .)
    }               reduce using rule 49 (Term -> id diveq Factor .)
    id              reduce using rule 49 (Term -> id diveq Factor .)
    print           reduce using rule 49 (Term -> id diveq Factor .)
    println         reduce using rule 49 (Term -> id diveq Factor .)
    prints          reduce using rule 49 (Term -> id diveq Factor .)
    for             reduce using rule 49 (Term -> id diveq Factor .)
    while           reduce using rule 49 (Term -> id diveq Factor .)
    read            reduce using rule 49 (Term -> id diveq Factor .)
    if              reduce using rule 49 (Term -> id diveq Factor .)
    repeat          reduce using rule 49 (Term -> id diveq Factor .)
    num             reduce using rule 49 (Term -> id diveq Factor .)
    (               reduce using rule 49 (Term -> id diveq Factor .)
    )               reduce using rule 49 (Term -> id diveq Factor .)
    sup             reduce using rule 49 (Term -> id diveq Factor .)
    inf             reduce using rule 49 (Term -> id diveq Factor .)
    supeq           reduce using rule 49 (Term -> id diveq Factor .)
    infeq           reduce using rule 49 (Term -> id diveq Factor .)
    eq              reduce using rule 49 (Term -> id diveq Factor .)
    diff            reduce using rule 49 (Term -> id diveq Factor .)
    ;               reduce using rule 49 (Term -> id diveq Factor .)
    ]               reduce using rule 49 (Term -> id diveq Factor .)
    and             reduce using rule 49 (Term -> id diveq Factor .)
    or              reduce using rule 49 (Term -> id diveq Factor .)


state 88

    (50) Term -> id modeq Factor .

    *               reduce using rule 50 (Term -> id modeq Factor .)
    /               reduce using rule 50 (Term -> id modeq Factor .)
    %               reduce using rule 50 (Term -> id modeq Factor .)
    +               reduce using rule 50 (Term -> id modeq Factor .)
    -               reduce using rule 50 (Term -> id modeq Factor .)
    }               reduce using rule 50 (Term -> id modeq Factor .)
    id              reduce using rule 50 (Term -> id modeq Factor .)
    print           reduce using rule 50 (Term -> id modeq Factor .)
    println         reduce using rule 50 (Term -> id modeq Factor .)
    prints          reduce using rule 50 (Term -> id modeq Factor .)
    for             reduce using rule 50 (Term -> id modeq Factor .)
    while           reduce using rule 50 (Term -> id modeq Factor .)
    read            reduce using rule 50 (Term -> id modeq Factor .)
    if              reduce using rule 50 (Term -> id modeq Factor .)
    repeat          reduce using rule 50 (Term -> id modeq Factor .)
    num             reduce using rule 50 (Term -> id modeq Factor .)
    (               reduce using rule 50 (Term -> id modeq Factor .)
    )               reduce using rule 50 (Term -> id modeq Factor .)
    sup             reduce using rule 50 (Term -> id modeq Factor .)
    inf             reduce using rule 50 (Term -> id modeq Factor .)
    supeq           reduce using rule 50 (Term -> id modeq Factor .)
    infeq           reduce using rule 50 (Term -> id modeq Factor .)
    eq              reduce using rule 50 (Term -> id modeq Factor .)
    diff            reduce using rule 50 (Term -> id modeq Factor .)
    ;               reduce using rule 50 (Term -> id modeq Factor .)
    ]               reduce using rule 50 (Term -> id modeq Factor .)
    and             reduce using rule 50 (Term -> id modeq Factor .)
    or              reduce using rule 50 (Term -> id modeq Factor .)


state 89

    (51) Term -> id muleql Factor .

    *               reduce using rule 51 (Term -> id muleql Factor .)
    /               reduce using rule 51 (Term -> id muleql Factor .)
    %               reduce using rule 51 (Term -> id muleql Factor .)
    +               reduce using rule 51 (Term -> id muleql Factor .)
    -               reduce using rule 51 (Term -> id muleql Factor .)
    }               reduce using rule 51 (Term -> id muleql Factor .)
    id              reduce using rule 51 (Term -> id muleql Factor .)
    print           reduce using rule 51 (Term -> id muleql Factor .)
    println         reduce using rule 51 (Term -> id muleql Factor .)
    prints          reduce using rule 51 (Term -> id muleql Factor .)
    for             reduce using rule 51 (Term -> id muleql Factor .)
    while           reduce using rule 51 (Term -> id muleql Factor .)
    read            reduce using rule 51 (Term -> id muleql Factor .)
    if              reduce using rule 51 (Term -> id muleql Factor .)
    repeat          reduce using rule 51 (Term -> id muleql Factor .)
    num             reduce using rule 51 (Term -> id muleql Factor .)
    (               reduce using rule 51 (Term -> id muleql Factor .)
    )               reduce using rule 51 (Term -> id muleql Factor .)
    sup             reduce using rule 51 (Term -> id muleql Factor .)
    inf             reduce using rule 51 (Term -> id muleql Factor .)
    supeq           reduce using rule 51 (Term -> id muleql Factor .)
    infeq           reduce using rule 51 (Term -> id muleql Factor .)
    eq              reduce using rule 51 (Term -> id muleql Factor .)
    diff            reduce using rule 51 (Term -> id muleql Factor .)
    ;               reduce using rule 51 (Term -> id muleql Factor .)
    ]               reduce using rule 51 (Term -> id muleql Factor .)
    and             reduce using rule 51 (Term -> id muleql Factor .)
    or              reduce using rule 51 (Term -> id muleql Factor .)


state 90

    (52) Term -> id diveql Factor .

    *               reduce using rule 52 (Term -> id diveql Factor .)
    /               reduce using rule 52 (Term -> id diveql Factor .)
    %               reduce using rule 52 (Term -> id diveql Factor .)
    +               reduce using rule 52 (Term -> id diveql Factor .)
    -               reduce using rule 52 (Term -> id diveql Factor .)
    }               reduce using rule 52 (Term -> id diveql Factor .)
    id              reduce using rule 52 (Term -> id diveql Factor .)
    print           reduce using rule 52 (Term -> id diveql Factor .)
    println         reduce using rule 52 (Term -> id diveql Factor .)
    prints          reduce using rule 52 (Term -> id diveql Factor .)
    for             reduce using rule 52 (Term -> id diveql Factor .)
    while           reduce using rule 52 (Term -> id diveql Factor .)
    read            reduce using rule 52 (Term -> id diveql Factor .)
    if              reduce using rule 52 (Term -> id diveql Factor .)
    repeat          reduce using rule 52 (Term -> id diveql Factor .)
    num             reduce using rule 52 (Term -> id diveql Factor .)
    (               reduce using rule 52 (Term -> id diveql Factor .)
    )               reduce using rule 52 (Term -> id diveql Factor .)
    sup             reduce using rule 52 (Term -> id diveql Factor .)
    inf             reduce using rule 52 (Term -> id diveql Factor .)
    supeq           reduce using rule 52 (Term -> id diveql Factor .)
    infeq           reduce using rule 52 (Term -> id diveql Factor .)
    eq              reduce using rule 52 (Term -> id diveql Factor .)
    diff            reduce using rule 52 (Term -> id diveql Factor .)
    ;               reduce using rule 52 (Term -> id diveql Factor .)
    ]               reduce using rule 52 (Term -> id diveql Factor .)
    and             reduce using rule 52 (Term -> id diveql Factor .)
    or              reduce using rule 52 (Term -> id diveql Factor .)


state 91

    (53) Term -> id modeql Factor .

    *               reduce using rule 53 (Term -> id modeql Factor .)
    /               reduce using rule 53 (Term -> id modeql Factor .)
    %               reduce using rule 53 (Term -> id modeql Factor .)
    +               reduce using rule 53 (Term -> id modeql Factor .)
    -               reduce using rule 53 (Term -> id modeql Factor .)
    }               reduce using rule 53 (Term -> id modeql Factor .)
    id              reduce using rule 53 (Term -> id modeql Factor .)
    print           reduce using rule 53 (Term -> id modeql Factor .)
    println         reduce using rule 53 (Term -> id modeql Factor .)
    prints          reduce using rule 53 (Term -> id modeql Factor .)
    for             reduce using rule 53 (Term -> id modeql Factor .)
    while           reduce using rule 53 (Term -> id modeql Factor .)
    read            reduce using rule 53 (Term -> id modeql Factor .)
    if              reduce using rule 53 (Term -> id modeql Factor .)
    repeat          reduce using rule 53 (Term -> id modeql Factor .)
    num             reduce using rule 53 (Term -> id modeql Factor .)
    (               reduce using rule 53 (Term -> id modeql Factor .)
    )               reduce using rule 53 (Term -> id modeql Factor .)
    sup             reduce using rule 53 (Term -> id modeql Factor .)
    inf             reduce using rule 53 (Term -> id modeql Factor .)
    supeq           reduce using rule 53 (Term -> id modeql Factor .)
    infeq           reduce using rule 53 (Term -> id modeql Factor .)
    eq              reduce using rule 53 (Term -> id modeql Factor .)
    diff            reduce using rule 53 (Term -> id modeql Factor .)
    ;               reduce using rule 53 (Term -> id modeql Factor .)
    ]               reduce using rule 53 (Term -> id modeql Factor .)
    and             reduce using rule 53 (Term -> id modeql Factor .)
    or              reduce using rule 53 (Term -> id modeql Factor .)


state 92

    (45) Term -> Term * Factor .

    *               reduce using rule 45 (Term -> Term * Factor .)
    /               reduce using rule 45 (Term -> Term * Factor .)
    %               reduce using rule 45 (Term -> Term * Factor .)
    +               reduce using rule 45 (Term -> Term * Factor .)
    -               reduce using rule 45 (Term -> Term * Factor .)
    }               reduce using rule 45 (Term -> Term * Factor .)
    id              reduce using rule 45 (Term -> Term * Factor .)
    print           reduce using rule 45 (Term -> Term * Factor .)
    println         reduce using rule 45 (Term -> Term * Factor .)
    prints          reduce using rule 45 (Term -> Term * Factor .)
    for             reduce using rule 45 (Term -> Term * Factor .)
    while           reduce using rule 45 (Term -> Term * Factor .)
    read            reduce using rule 45 (Term -> Term * Factor .)
    if              reduce using rule 45 (Term -> Term * Factor .)
    repeat          reduce using rule 45 (Term -> Term * Factor .)
    num             reduce using rule 45 (Term -> Term * Factor .)
    (               reduce using rule 45 (Term -> Term * Factor .)
    )               reduce using rule 45 (Term -> Term * Factor .)
    sup             reduce using rule 45 (Term -> Term * Factor .)
    inf             reduce using rule 45 (Term -> Term * Factor .)
    supeq           reduce using rule 45 (Term -> Term * Factor .)
    infeq           reduce using rule 45 (Term -> Term * Factor .)
    eq              reduce using rule 45 (Term -> Term * Factor .)
    diff            reduce using rule 45 (Term -> Term * Factor .)
    ;               reduce using rule 45 (Term -> Term * Factor .)
    ]               reduce using rule 45 (Term -> Term * Factor .)
    and             reduce using rule 45 (Term -> Term * Factor .)
    or              reduce using rule 45 (Term -> Term * Factor .)


state 93

    (46) Term -> Term / Factor .

    *               reduce using rule 46 (Term -> Term / Factor .)
    /               reduce using rule 46 (Term -> Term / Factor .)
    %               reduce using rule 46 (Term -> Term / Factor .)
    +               reduce using rule 46 (Term -> Term / Factor .)
    -               reduce using rule 46 (Term -> Term / Factor .)
    }               reduce using rule 46 (Term -> Term / Factor .)
    id              reduce using rule 46 (Term -> Term / Factor .)
    print           reduce using rule 46 (Term -> Term / Factor .)
    println         reduce using rule 46 (Term -> Term / Factor .)
    prints          reduce using rule 46 (Term -> Term / Factor .)
    for             reduce using rule 46 (Term -> Term / Factor .)
    while           reduce using rule 46 (Term -> Term / Factor .)
    read            reduce using rule 46 (Term -> Term / Factor .)
    if              reduce using rule 46 (Term -> Term / Factor .)
    repeat          reduce using rule 46 (Term -> Term / Factor .)
    num             reduce using rule 46 (Term -> Term / Factor .)
    (               reduce using rule 46 (Term -> Term / Factor .)
    )               reduce using rule 46 (Term -> Term / Factor .)
    sup             reduce using rule 46 (Term -> Term / Factor .)
    inf             reduce using rule 46 (Term -> Term / Factor .)
    supeq           reduce using rule 46 (Term -> Term / Factor .)
    infeq           reduce using rule 46 (Term -> Term / Factor .)
    eq              reduce using rule 46 (Term -> Term / Factor .)
    diff            reduce using rule 46 (Term -> Term / Factor .)
    ;               reduce using rule 46 (Term -> Term / Factor .)
    ]               reduce using rule 46 (Term -> Term / Factor .)
    and             reduce using rule 46 (Term -> Term / Factor .)
    or              reduce using rule 46 (Term -> Term / Factor .)


state 94

    (47) Term -> Term % Factor .

    *               reduce using rule 47 (Term -> Term % Factor .)
    /               reduce using rule 47 (Term -> Term % Factor .)
    %               reduce using rule 47 (Term -> Term % Factor .)
    +               reduce using rule 47 (Term -> Term % Factor .)
    -               reduce using rule 47 (Term -> Term % Factor .)
    }               reduce using rule 47 (Term -> Term % Factor .)
    id              reduce using rule 47 (Term -> Term % Factor .)
    print           reduce using rule 47 (Term -> Term % Factor .)
    println         reduce using rule 47 (Term -> Term % Factor .)
    prints          reduce using rule 47 (Term -> Term % Factor .)
    for             reduce using rule 47 (Term -> Term % Factor .)
    while           reduce using rule 47 (Term -> Term % Factor .)
    read            reduce using rule 47 (Term -> Term % Factor .)
    if              reduce using rule 47 (Term -> Term % Factor .)
    repeat          reduce using rule 47 (Term -> Term % Factor .)
    num             reduce using rule 47 (Term -> Term % Factor .)
    (               reduce using rule 47 (Term -> Term % Factor .)
    )               reduce using rule 47 (Term -> Term % Factor .)
    sup             reduce using rule 47 (Term -> Term % Factor .)
    inf             reduce using rule 47 (Term -> Term % Factor .)
    supeq           reduce using rule 47 (Term -> Term % Factor .)
    infeq           reduce using rule 47 (Term -> Term % Factor .)
    eq              reduce using rule 47 (Term -> Term % Factor .)
    diff            reduce using rule 47 (Term -> Term % Factor .)
    ;               reduce using rule 47 (Term -> Term % Factor .)
    ]               reduce using rule 47 (Term -> Term % Factor .)
    and             reduce using rule 47 (Term -> Term % Factor .)
    or              reduce using rule 47 (Term -> Term % Factor .)


state 95

    (23) Print -> print ( Exp . )
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               shift and go to state 119
    +               shift and go to state 40
    -               shift and go to state 41


state 96

    (68) Cond -> ( Cond . and Cond )
    (69) Cond -> ( Cond . or Cond )
    (61) Factor -> ( Cond . )
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

    and             shift and go to state 120
    or              shift and go to state 121
    )               shift and go to state 97


state 97

    (61) Factor -> ( Cond ) .

    *               reduce using rule 61 (Factor -> ( Cond ) .)
    /               reduce using rule 61 (Factor -> ( Cond ) .)
    %               reduce using rule 61 (Factor -> ( Cond ) .)
    +               reduce using rule 61 (Factor -> ( Cond ) .)
    -               reduce using rule 61 (Factor -> ( Cond ) .)
    }               reduce using rule 61 (Factor -> ( Cond ) .)
    id              reduce using rule 61 (Factor -> ( Cond ) .)
    print           reduce using rule 61 (Factor -> ( Cond ) .)
    println         reduce using rule 61 (Factor -> ( Cond ) .)
    prints          reduce using rule 61 (Factor -> ( Cond ) .)
    for             reduce using rule 61 (Factor -> ( Cond ) .)
    while           reduce using rule 61 (Factor -> ( Cond ) .)
    read            reduce using rule 61 (Factor -> ( Cond ) .)
    if              reduce using rule 61 (Factor -> ( Cond ) .)
    repeat          reduce using rule 61 (Factor -> ( Cond ) .)
    num             reduce using rule 61 (Factor -> ( Cond ) .)
    (               reduce using rule 61 (Factor -> ( Cond ) .)
    )               reduce using rule 61 (Factor -> ( Cond ) .)
    sup             reduce using rule 61 (Factor -> ( Cond ) .)
    inf             reduce using rule 61 (Factor -> ( Cond ) .)
    supeq           reduce using rule 61 (Factor -> ( Cond ) .)
    infeq           reduce using rule 61 (Factor -> ( Cond ) .)
    eq              reduce using rule 61 (Factor -> ( Cond ) .)
    diff            reduce using rule 61 (Factor -> ( Cond ) .)
    ;               reduce using rule 61 (Factor -> ( Cond ) .)
    ]               reduce using rule 61 (Factor -> ( Cond ) .)
    and             reduce using rule 61 (Factor -> ( Cond ) .)
    or              reduce using rule 61 (Factor -> ( Cond ) .)


state 98

    (66) Cond -> Cond and . Cond
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 122
    Exp                            shift and go to state 113
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 99

    (67) Cond -> Cond or . Cond
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 123
    Exp                            shift and go to state 113
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 100

    (62) Factor -> ( Exp ) .

    *               reduce using rule 62 (Factor -> ( Exp ) .)
    /               reduce using rule 62 (Factor -> ( Exp ) .)
    %               reduce using rule 62 (Factor -> ( Exp ) .)
    +               reduce using rule 62 (Factor -> ( Exp ) .)
    -               reduce using rule 62 (Factor -> ( Exp ) .)
    }               reduce using rule 62 (Factor -> ( Exp ) .)
    id              reduce using rule 62 (Factor -> ( Exp ) .)
    print           reduce using rule 62 (Factor -> ( Exp ) .)
    println         reduce using rule 62 (Factor -> ( Exp ) .)
    prints          reduce using rule 62 (Factor -> ( Exp ) .)
    for             reduce using rule 62 (Factor -> ( Exp ) .)
    while           reduce using rule 62 (Factor -> ( Exp ) .)
    read            reduce using rule 62 (Factor -> ( Exp ) .)
    if              reduce using rule 62 (Factor -> ( Exp ) .)
    repeat          reduce using rule 62 (Factor -> ( Exp ) .)
    num             reduce using rule 62 (Factor -> ( Exp ) .)
    (               reduce using rule 62 (Factor -> ( Exp ) .)
    )               reduce using rule 62 (Factor -> ( Exp ) .)
    sup             reduce using rule 62 (Factor -> ( Exp ) .)
    inf             reduce using rule 62 (Factor -> ( Exp ) .)
    supeq           reduce using rule 62 (Factor -> ( Exp ) .)
    infeq           reduce using rule 62 (Factor -> ( Exp ) .)
    eq              reduce using rule 62 (Factor -> ( Exp ) .)
    diff            reduce using rule 62 (Factor -> ( Exp ) .)
    ;               reduce using rule 62 (Factor -> ( Exp ) .)
    ]               reduce using rule 62 (Factor -> ( Exp ) .)
    and             reduce using rule 62 (Factor -> ( Exp ) .)
    or              reduce using rule 62 (Factor -> ( Exp ) .)


state 101

    (70) Cond -> Exp sup . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 124
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 102

    (71) Cond -> Exp inf . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 125
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 103

    (72) Cond -> Exp supeq . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 126
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 104

    (73) Cond -> Exp infeq . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 127
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 105

    (75) Cond -> Exp eq . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 128
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 106

    (76) Cond -> Exp diff . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 129
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 107

    (74) Cond -> not Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               reduce using rule 74 (Cond -> not Exp .)
    and             reduce using rule 74 (Cond -> not Exp .)
    or              reduce using rule 74 (Cond -> not Exp .)
    ;               reduce using rule 74 (Cond -> not Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 108

    (24) Println -> println ( Exp . )
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               shift and go to state 130
    +               shift and go to state 40
    -               shift and go to state 41


state 109

    (25) Prints -> prints ( string . )

    )               shift and go to state 131


state 110

    (18) Repeat -> RepeatS ( num . ) { Insts }

    )               shift and go to state 132


state 111

    (20) For -> for ( Insts . ; Cond ; Insts ) { Insts }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    ;               shift and go to state 133
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    RepeatS                        shift and go to state 31
    Factor                         shift and go to state 37

state 112

    (21) While -> while ( Cond . ) { Insts }
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

    )               shift and go to state 134
    and             shift and go to state 98
    or              shift and go to state 99


state 113

    (70) Cond -> Exp . sup Exp
    (71) Cond -> Exp . inf Exp
    (72) Cond -> Exp . supeq Exp
    (73) Cond -> Exp . infeq Exp
    (75) Cond -> Exp . eq Exp
    (76) Cond -> Exp . diff Exp
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    sup             shift and go to state 101
    inf             shift and go to state 102
    supeq           shift and go to state 103
    infeq           shift and go to state 104
    eq              shift and go to state 105
    diff            shift and go to state 106
    +               shift and go to state 40
    -               shift and go to state 41


state 114

    (22) Read -> read ( id . )

    )               shift and go to state 135


state 115

    (33) If -> if ( Cond . ) { Insts }
    (34) If -> if ( Cond . ) Inst
    (36) If -> if ( Cond . ) { Insts } else { Insts }
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

    )               shift and go to state 136
    and             shift and go to state 98
    or              shift and go to state 99


state 116

    (26) Dcl -> int id [ num . ]
    (27) Dcl -> int id [ num . ] [ num ]

    ]               shift and go to state 137


state 117

    (29) Dcl -> int id = num .

    }               reduce using rule 29 (Dcl -> int id = num .)
    int             reduce using rule 29 (Dcl -> int id = num .)


state 118

    (31) Attr -> id [ Exp ] . = Exp
    (32) Attr -> id [ Exp ] . [ Exp ] = Exp

    =               shift and go to state 139
    [               shift and go to state 138


state 119

    (23) Print -> print ( Exp ) .

    }               reduce using rule 23 (Print -> print ( Exp ) .)
    id              reduce using rule 23 (Print -> print ( Exp ) .)
    print           reduce using rule 23 (Print -> print ( Exp ) .)
    println         reduce using rule 23 (Print -> print ( Exp ) .)
    prints          reduce using rule 23 (Print -> print ( Exp ) .)
    for             reduce using rule 23 (Print -> print ( Exp ) .)
    while           reduce using rule 23 (Print -> print ( Exp ) .)
    read            reduce using rule 23 (Print -> print ( Exp ) .)
    if              reduce using rule 23 (Print -> print ( Exp ) .)
    repeat          reduce using rule 23 (Print -> print ( Exp ) .)
    num             reduce using rule 23 (Print -> print ( Exp ) .)
    (               reduce using rule 23 (Print -> print ( Exp ) .)
    ;               reduce using rule 23 (Print -> print ( Exp ) .)
    )               reduce using rule 23 (Print -> print ( Exp ) .)


state 120

    (68) Cond -> ( Cond and . Cond )
    (66) Cond -> Cond and . Cond
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 140
    Exp                            shift and go to state 113
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 121

    (69) Cond -> ( Cond or . Cond )
    (67) Cond -> Cond or . Cond
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 141
    Exp                            shift and go to state 113
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 122

    (66) Cond -> Cond and Cond .
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 66 (Cond -> Cond and Cond .)
    ;               reduce using rule 66 (Cond -> Cond and Cond .)
    and             shift and go to state 98
    or              shift and go to state 99

  ! and             [ reduce using rule 66 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 66 (Cond -> Cond and Cond .) ]


state 123

    (67) Cond -> Cond or Cond .
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 67 (Cond -> Cond or Cond .)
    ;               reduce using rule 67 (Cond -> Cond or Cond .)
    and             shift and go to state 98
    or              shift and go to state 99

  ! and             [ reduce using rule 67 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 67 (Cond -> Cond or Cond .) ]


state 124

    (70) Cond -> Exp sup Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               reduce using rule 70 (Cond -> Exp sup Exp .)
    and             reduce using rule 70 (Cond -> Exp sup Exp .)
    or              reduce using rule 70 (Cond -> Exp sup Exp .)
    ;               reduce using rule 70 (Cond -> Exp sup Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 125

    (71) Cond -> Exp inf Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               reduce using rule 71 (Cond -> Exp inf Exp .)
    and             reduce using rule 71 (Cond -> Exp inf Exp .)
    or              reduce using rule 71 (Cond -> Exp inf Exp .)
    ;               reduce using rule 71 (Cond -> Exp inf Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 126

    (72) Cond -> Exp supeq Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               reduce using rule 72 (Cond -> Exp supeq Exp .)
    and             reduce using rule 72 (Cond -> Exp supeq Exp .)
    or              reduce using rule 72 (Cond -> Exp supeq Exp .)
    ;               reduce using rule 72 (Cond -> Exp supeq Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 127

    (73) Cond -> Exp infeq Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               reduce using rule 73 (Cond -> Exp infeq Exp .)
    and             reduce using rule 73 (Cond -> Exp infeq Exp .)
    or              reduce using rule 73 (Cond -> Exp infeq Exp .)
    ;               reduce using rule 73 (Cond -> Exp infeq Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 128

    (75) Cond -> Exp eq Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               reduce using rule 75 (Cond -> Exp eq Exp .)
    and             reduce using rule 75 (Cond -> Exp eq Exp .)
    or              reduce using rule 75 (Cond -> Exp eq Exp .)
    ;               reduce using rule 75 (Cond -> Exp eq Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 129

    (76) Cond -> Exp diff Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    )               reduce using rule 76 (Cond -> Exp diff Exp .)
    and             reduce using rule 76 (Cond -> Exp diff Exp .)
    or              reduce using rule 76 (Cond -> Exp diff Exp .)
    ;               reduce using rule 76 (Cond -> Exp diff Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 130

    (24) Println -> println ( Exp ) .

    }               reduce using rule 24 (Println -> println ( Exp ) .)
    id              reduce using rule 24 (Println -> println ( Exp ) .)
    print           reduce using rule 24 (Println -> println ( Exp ) .)
    println         reduce using rule 24 (Println -> println ( Exp ) .)
    prints          reduce using rule 24 (Println -> println ( Exp ) .)
    for             reduce using rule 24 (Println -> println ( Exp ) .)
    while           reduce using rule 24 (Println -> println ( Exp ) .)
    read            reduce using rule 24 (Println -> println ( Exp ) .)
    if              reduce using rule 24 (Println -> println ( Exp ) .)
    repeat          reduce using rule 24 (Println -> println ( Exp ) .)
    num             reduce using rule 24 (Println -> println ( Exp ) .)
    (               reduce using rule 24 (Println -> println ( Exp ) .)
    ;               reduce using rule 24 (Println -> println ( Exp ) .)
    )               reduce using rule 24 (Println -> println ( Exp ) .)


state 131

    (25) Prints -> prints ( string ) .

    }               reduce using rule 25 (Prints -> prints ( string ) .)
    id              reduce using rule 25 (Prints -> prints ( string ) .)
    print           reduce using rule 25 (Prints -> prints ( string ) .)
    println         reduce using rule 25 (Prints -> prints ( string ) .)
    prints          reduce using rule 25 (Prints -> prints ( string ) .)
    for             reduce using rule 25 (Prints -> prints ( string ) .)
    while           reduce using rule 25 (Prints -> prints ( string ) .)
    read            reduce using rule 25 (Prints -> prints ( string ) .)
    if              reduce using rule 25 (Prints -> prints ( string ) .)
    repeat          reduce using rule 25 (Prints -> prints ( string ) .)
    num             reduce using rule 25 (Prints -> prints ( string ) .)
    (               reduce using rule 25 (Prints -> prints ( string ) .)
    ;               reduce using rule 25 (Prints -> prints ( string ) .)
    )               reduce using rule 25 (Prints -> prints ( string ) .)


state 132

    (18) Repeat -> RepeatS ( num ) . { Insts }

    {               shift and go to state 142


state 133

    (20) For -> for ( Insts ; . Cond ; Insts ) { Insts }
    (66) Cond -> . Cond and Cond
    (67) Cond -> . Cond or Cond
    (68) Cond -> . ( Cond and Cond )
    (69) Cond -> . ( Cond or Cond )
    (70) Cond -> . Exp sup Exp
    (71) Cond -> . Exp inf Exp
    (72) Cond -> . Exp supeq Exp
    (73) Cond -> . Exp infeq Exp
    (74) Cond -> . not Exp
    (75) Cond -> . Exp eq Exp
    (76) Cond -> . Exp diff Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    (               shift and go to state 62
    not             shift and go to state 65
    id              shift and go to state 66
    num             shift and go to state 32

    Cond                           shift and go to state 143
    Exp                            shift and go to state 113
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 134

    (21) While -> while ( Cond ) . { Insts }

    {               shift and go to state 144


state 135

    (22) Read -> read ( id ) .

    }               reduce using rule 22 (Read -> read ( id ) .)
    id              reduce using rule 22 (Read -> read ( id ) .)
    print           reduce using rule 22 (Read -> read ( id ) .)
    println         reduce using rule 22 (Read -> read ( id ) .)
    prints          reduce using rule 22 (Read -> read ( id ) .)
    for             reduce using rule 22 (Read -> read ( id ) .)
    while           reduce using rule 22 (Read -> read ( id ) .)
    read            reduce using rule 22 (Read -> read ( id ) .)
    if              reduce using rule 22 (Read -> read ( id ) .)
    repeat          reduce using rule 22 (Read -> read ( id ) .)
    num             reduce using rule 22 (Read -> read ( id ) .)
    (               reduce using rule 22 (Read -> read ( id ) .)
    ;               reduce using rule 22 (Read -> read ( id ) .)
    )               reduce using rule 22 (Read -> read ( id ) .)


state 136

    (33) If -> if ( Cond ) . { Insts }
    (34) If -> if ( Cond ) . Inst
    (36) If -> if ( Cond ) . { Insts } else { Insts }
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    {               shift and go to state 145
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    Inst                           shift and go to state 146
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    RepeatS                        shift and go to state 31
    Factor                         shift and go to state 37

state 137

    (26) Dcl -> int id [ num ] .
    (27) Dcl -> int id [ num ] . [ num ]

    }               reduce using rule 26 (Dcl -> int id [ num ] .)
    int             reduce using rule 26 (Dcl -> int id [ num ] .)
    [               shift and go to state 147


state 138

    (32) Attr -> id [ Exp ] [ . Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 148
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 139

    (31) Attr -> id [ Exp ] = . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 149
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 140

    (68) Cond -> ( Cond and Cond . )
    (66) Cond -> Cond and Cond .
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 150
    and             shift and go to state 98
    or              shift and go to state 99

  ! and             [ reduce using rule 66 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 66 (Cond -> Cond and Cond .) ]
  ! )               [ reduce using rule 66 (Cond -> Cond and Cond .) ]


state 141

    (69) Cond -> ( Cond or Cond . )
    (67) Cond -> Cond or Cond .
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 151
    and             shift and go to state 98
    or              shift and go to state 99

  ! and             [ reduce using rule 67 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 67 (Cond -> Cond or Cond .) ]
  ! )               [ reduce using rule 67 (Cond -> Cond or Cond .) ]


state 142

    (18) Repeat -> RepeatS ( num ) { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    while           reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)
    num             reduce using rule 7 (Insts -> .)
    (               reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 152

state 143

    (20) For -> for ( Insts ; Cond . ; Insts ) { Insts }
    (66) Cond -> Cond . and Cond
    (67) Cond -> Cond . or Cond

    ;               shift and go to state 153
    and             shift and go to state 98
    or              shift and go to state 99


state 144

    (21) While -> while ( Cond ) { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    while           reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)
    num             reduce using rule 7 (Insts -> .)
    (               reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 154

state 145

    (33) If -> if ( Cond ) { . Insts }
    (36) If -> if ( Cond ) { . Insts } else { Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    while           reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)
    num             reduce using rule 7 (Insts -> .)
    (               reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 155

state 146

    (34) If -> if ( Cond ) Inst .

    }               reduce using rule 34 (If -> if ( Cond ) Inst .)
    id              reduce using rule 34 (If -> if ( Cond ) Inst .)
    print           reduce using rule 34 (If -> if ( Cond ) Inst .)
    println         reduce using rule 34 (If -> if ( Cond ) Inst .)
    prints          reduce using rule 34 (If -> if ( Cond ) Inst .)
    for             reduce using rule 34 (If -> if ( Cond ) Inst .)
    while           reduce using rule 34 (If -> if ( Cond ) Inst .)
    read            reduce using rule 34 (If -> if ( Cond ) Inst .)
    if              reduce using rule 34 (If -> if ( Cond ) Inst .)
    repeat          reduce using rule 34 (If -> if ( Cond ) Inst .)
    num             reduce using rule 34 (If -> if ( Cond ) Inst .)
    (               reduce using rule 34 (If -> if ( Cond ) Inst .)
    ;               reduce using rule 34 (If -> if ( Cond ) Inst .)
    )               reduce using rule 34 (If -> if ( Cond ) Inst .)


state 147

    (27) Dcl -> int id [ num ] [ . num ]

    num             shift and go to state 156


state 148

    (32) Attr -> id [ Exp ] [ Exp . ] = Exp
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    ]               shift and go to state 157
    +               shift and go to state 40
    -               shift and go to state 41


state 149

    (31) Attr -> id [ Exp ] = Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    }               reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    id              reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    print           reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    println         reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    prints          reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    for             reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    while           reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    read            reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    if              reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    repeat          reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    num             reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    (               reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    ;               reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    )               reduce using rule 31 (Attr -> id [ Exp ] = Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 150

    (68) Cond -> ( Cond and Cond ) .

    )               reduce using rule 68 (Cond -> ( Cond and Cond ) .)
    and             reduce using rule 68 (Cond -> ( Cond and Cond ) .)
    or              reduce using rule 68 (Cond -> ( Cond and Cond ) .)
    ;               reduce using rule 68 (Cond -> ( Cond and Cond ) .)


state 151

    (69) Cond -> ( Cond or Cond ) .

    )               reduce using rule 69 (Cond -> ( Cond or Cond ) .)
    and             reduce using rule 69 (Cond -> ( Cond or Cond ) .)
    or              reduce using rule 69 (Cond -> ( Cond or Cond ) .)
    ;               reduce using rule 69 (Cond -> ( Cond or Cond ) .)


state 152

    (18) Repeat -> RepeatS ( num ) { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    }               shift and go to state 158
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    RepeatS                        shift and go to state 31
    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 153

    (20) For -> for ( Insts ; Cond ; . Insts ) { Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    )               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    while           reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)
    num             reduce using rule 7 (Insts -> .)
    (               reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 159

state 154

    (21) While -> while ( Cond ) { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    }               shift and go to state 160
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    RepeatS                        shift and go to state 31
    Factor                         shift and go to state 37

state 155

    (33) If -> if ( Cond ) { Insts . }
    (36) If -> if ( Cond ) { Insts . } else { Insts }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    }               shift and go to state 161
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    RepeatS                        shift and go to state 31
    Factor                         shift and go to state 37

state 156

    (27) Dcl -> int id [ num ] [ num . ]

    ]               shift and go to state 162


state 157

    (32) Attr -> id [ Exp ] [ Exp ] . = Exp

    =               shift and go to state 163


state 158

    (18) Repeat -> RepeatS ( num ) { Insts } .

    }               reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    id              reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    print           reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    println         reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    prints          reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    for             reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    while           reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    read            reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    if              reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    repeat          reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    num             reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    (               reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    ;               reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)
    )               reduce using rule 18 (Repeat -> RepeatS ( num ) { Insts } .)


state 159

    (20) For -> for ( Insts ; Cond ; Insts . ) { Insts }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    )               shift and go to state 164
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    RepeatS                        shift and go to state 31
    Factor                         shift and go to state 37

state 160

    (21) While -> while ( Cond ) { Insts } .

    }               reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    id              reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    print           reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    println         reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    prints          reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    for             reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    while           reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    read            reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    if              reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    repeat          reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    num             reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    (               reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    ;               reduce using rule 21 (While -> while ( Cond ) { Insts } .)
    )               reduce using rule 21 (While -> while ( Cond ) { Insts } .)


state 161

    (33) If -> if ( Cond ) { Insts } .
    (36) If -> if ( Cond ) { Insts } . else { Insts }

    }               reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    id              reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    print           reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    println         reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    prints          reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    for             reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    while           reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    read            reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    if              reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    repeat          reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    num             reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    (               reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    ;               reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    )               reduce using rule 33 (If -> if ( Cond ) { Insts } .)
    else            shift and go to state 165


state 162

    (27) Dcl -> int id [ num ] [ num ] .

    }               reduce using rule 27 (Dcl -> int id [ num ] [ num ] .)
    int             reduce using rule 27 (Dcl -> int id [ num ] [ num ] .)


state 163

    (32) Attr -> id [ Exp ] [ Exp ] = . Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    id              shift and go to state 66
    num             shift and go to state 32
    (               shift and go to state 28

    Exp                            shift and go to state 166
    Term                           shift and go to state 26
    Factor                         shift and go to state 37

state 164

    (20) For -> for ( Insts ; Cond ; Insts ) . { Insts }

    {               shift and go to state 167


state 165

    (36) If -> if ( Cond ) { Insts } else . { Insts }

    {               shift and go to state 168


state 166

    (32) Attr -> id [ Exp ] [ Exp ] = Exp .
    (38) Exp -> Exp . + Term
    (39) Exp -> Exp . - Term

    }               reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    id              reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    prints          reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    for             reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    while           reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    if              reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    num             reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    (               reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    ;               reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    )               reduce using rule 32 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 40
    -               shift and go to state 41


state 167

    (20) For -> for ( Insts ; Cond ; Insts ) { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    while           reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)
    num             reduce using rule 7 (Insts -> .)
    (               reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 169

state 168

    (36) If -> if ( Cond ) { Insts } else { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    while           reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)
    num             reduce using rule 7 (Insts -> .)
    (               reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 170

state 169

    (20) For -> for ( Insts ; Cond ; Insts ) { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    }               shift and go to state 171
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    RepeatS                        shift and go to state 31
    Factor                         shift and go to state 37

state 170

    (36) If -> if ( Cond ) { Insts } else { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Exp
    (10) Inst -> . Print
    (11) Inst -> . Println
    (12) Inst -> . Prints
    (13) Inst -> . Repeat
    (14) Inst -> . For
    (15) Inst -> . While
    (16) Inst -> . Read
    (17) Inst -> . If
    (30) Attr -> . id = Exp
    (31) Attr -> . id [ Exp ] = Exp
    (32) Attr -> . id [ Exp ] [ Exp ] = Exp
    (38) Exp -> . Exp + Term
    (39) Exp -> . Exp - Term
    (40) Exp -> . id addeq Term
    (41) Exp -> . id subeq Term
    (42) Exp -> . id addeql Term
    (43) Exp -> . id subeql Term
    (44) Exp -> . Term
    (23) Print -> . print ( Exp )
    (24) Println -> . println ( Exp )
    (25) Prints -> . prints ( string )
    (18) Repeat -> . RepeatS ( num ) { Insts }
    (20) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (21) While -> . while ( Cond ) { Insts }
    (22) Read -> . read ( id )
    (33) If -> . if ( Cond ) { Insts }
    (34) If -> . if ( Cond ) Inst
    (36) If -> . if ( Cond ) { Insts } else { Insts }
    (45) Term -> . Term * Factor
    (46) Term -> . Term / Factor
    (47) Term -> . Term % Factor
    (48) Term -> . id muleq Factor
    (49) Term -> . id diveq Factor
    (50) Term -> . id modeq Factor
    (51) Term -> . id muleql Factor
    (52) Term -> . id diveql Factor
    (53) Term -> . id modeql Factor
    (54) Term -> . Factor
    (19) RepeatS -> . repeat
    (55) Factor -> . id plus
    (56) Factor -> . id plusl
    (57) Factor -> . id minus
    (58) Factor -> . id minusl
    (59) Factor -> . id
    (60) Factor -> . num
    (61) Factor -> . ( Cond )
    (62) Factor -> . ( Exp )

    }               shift and go to state 172
    id              shift and go to state 25
    print           shift and go to state 27
    println         shift and go to state 29
    prints          shift and go to state 30
    for             shift and go to state 33
    while           shift and go to state 34
    read            shift and go to state 35
    if              shift and go to state 36
    repeat          shift and go to state 38
    num             shift and go to state 32
    (               shift and go to state 28

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Exp                            shift and go to state 16
    Print                          shift and go to state 17
    Println                        shift and go to state 18
    Prints                         shift and go to state 19
    Repeat                         shift and go to state 20
    For                            shift and go to state 21
    While                          shift and go to state 22
    Read                           shift and go to state 23
    If                             shift and go to state 24
    Term                           shift and go to state 26
    RepeatS                        shift and go to state 31
    Factor                         shift and go to state 37

state 171

    (20) For -> for ( Insts ; Cond ; Insts ) { Insts } .

    }               reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    id              reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    print           reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    println         reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    prints          reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    for             reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    while           reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    read            reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    if              reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    repeat          reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    num             reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    (               reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    ;               reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    )               reduce using rule 20 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)


state 172

    (36) If -> if ( Cond ) { Insts } else { Insts } .

    }               reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    id              reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    print           reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    println         reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    prints          reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    for             reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    while           reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    read            reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    if              reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    repeat          reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    num             reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    (               reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    ;               reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)
    )               reduce using rule 36 (If -> if ( Cond ) { Insts } else { Insts } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for and in state 122 resolved as shift
WARNING: shift/reduce conflict for or in state 122 resolved as shift
WARNING: shift/reduce conflict for and in state 123 resolved as shift
WARNING: shift/reduce conflict for or in state 123 resolved as shift
WARNING: shift/reduce conflict for ) in state 140 resolved as shift
WARNING: shift/reduce conflict for and in state 140 resolved as shift
WARNING: shift/reduce conflict for or in state 140 resolved as shift
WARNING: shift/reduce conflict for ) in state 141 resolved as shift
WARNING: shift/reduce conflict for and in state 141 resolved as shift
WARNING: shift/reduce conflict for or in state 141 resolved as shift
