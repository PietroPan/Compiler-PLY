Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> VarBlc MainBlc
Rule 2     VarBlc -> vars { Dcls }
Rule 3     Dcls -> Dcl Dcls
Rule 4     Dcls -> <empty>
Rule 5     MainBlc -> main { Insts }
Rule 6     Insts -> Attr Insts
Rule 7     Insts -> Print Insts
Rule 8     Insts -> Println Insts
Rule 9     Insts -> Repeat Insts
Rule 10    Insts -> Read Insts
Rule 11    Insts -> <empty>
Rule 12    Repeat -> RepeatS ( num ) { Insts }
Rule 13    RepeatS -> repeat
Rule 14    Read -> read ( id )
Rule 15    Print -> print ( Exp )
Rule 16    Println -> println ( Exp )
Rule 17    Dcl -> int id [ num ]
Rule 18    Dcl -> int id [ num ] [ num ]
Rule 19    Dcl -> int id
Rule 20    Dcl -> int id = num
Rule 21    Attr -> id = Exp
Rule 22    Attr -> id [ Exp ] = Exp
Rule 23    Attr -> id [ Exp ] [ Exp ] = Exp
Rule 24    Exp -> Exp + Term
Rule 25    Exp -> Exp - Term
Rule 26    Exp -> Term
Rule 27    Term -> Term * Factor
Rule 28    Term -> Term / Factor
Rule 29    Term -> Factor
Rule 30    Factor -> id
Rule 31    Factor -> num
Rule 32    Factor -> ( Cond )
Rule 33    Factor -> id [ Exp ]
Rule 34    Factor -> id [ Exp ] [ Exp ]
Rule 35    Factor -> ( Exp )
Rule 36    Cond -> Cond and Cond
Rule 37    Cond -> Cond or Cond
Rule 38    Cond -> Exp sup Exp
Rule 39    Cond -> Exp inf Exp
Rule 40    Cond -> Exp supeq Exp
Rule 41    Cond -> Exp infeq Exp
Rule 42    Cond -> not Exp
Rule 43    Cond -> Exp eq Exp
Rule 44    Cond -> Exp diff Exp

Terminals, with rules where they appear

(                    : 12 14 15 16 32 35
)                    : 12 14 15 16 32 35
*                    : 27
+                    : 24
-                    : 25
/                    : 28
=                    : 20 21 22 23
[                    : 17 18 18 22 23 23 33 34 34
]                    : 17 18 18 22 23 23 33 34 34
and                  : 36
diff                 : 44
eq                   : 43
error                : 
id                   : 14 17 18 19 20 21 22 23 30 33 34
inf                  : 39
infeq                : 41
int                  : 17 18 19 20
main                 : 5
not                  : 42
num                  : 12 17 18 18 20 31
or                   : 37
print                : 15
println              : 16
read                 : 14
repeat               : 13
sup                  : 38
supeq                : 40
vars                 : 2
{                    : 2 5 12
}                    : 2 5 12

Nonterminals, with rules where they appear

Attr                 : 6
Cond                 : 32 36 36 37 37
Dcl                  : 3
Dcls                 : 2 3
Exp                  : 15 16 21 22 22 23 23 23 24 25 33 34 34 35 38 38 39 39 40 40 41 41 42 43 43 44 44
Factor               : 27 28 29
Insts                : 5 6 7 8 9 10 12
MainBlc              : 1
Print                : 7
Println              : 8
Prog                 : 0
Read                 : 10
Repeat               : 9
RepeatS              : 12
Term                 : 24 25 26 27 28
VarBlc               : 1

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . VarBlc MainBlc
    (2) VarBlc -> . vars { Dcls }

    vars            shift and go to state 3

    Prog                           shift and go to state 1
    VarBlc                         shift and go to state 2

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> VarBlc . MainBlc
    (5) MainBlc -> . main { Insts }

    main            shift and go to state 5

    MainBlc                        shift and go to state 4

state 3

    (2) VarBlc -> vars . { Dcls }

    {               shift and go to state 6


state 4

    (1) Prog -> VarBlc MainBlc .

    $end            reduce using rule 1 (Prog -> VarBlc MainBlc .)


state 5

    (5) MainBlc -> main . { Insts }

    {               shift and go to state 7


state 6

    (2) VarBlc -> vars { . Dcls }
    (3) Dcls -> . Dcl Dcls
    (4) Dcls -> .
    (17) Dcl -> . int id [ num ]
    (18) Dcl -> . int id [ num ] [ num ]
    (19) Dcl -> . int id
    (20) Dcl -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcls                           shift and go to state 8
    Dcl                            shift and go to state 9

state 7

    (5) MainBlc -> main { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (21) Attr -> . id = Exp
    (22) Attr -> . id [ Exp ] = Exp
    (23) Attr -> . id [ Exp ] [ Exp ] = Exp
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Insts                          shift and go to state 11
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 8

    (2) VarBlc -> vars { Dcls . }

    }               shift and go to state 23


state 9

    (3) Dcls -> Dcl . Dcls
    (3) Dcls -> . Dcl Dcls
    (4) Dcls -> .
    (17) Dcl -> . int id [ num ]
    (18) Dcl -> . int id [ num ] [ num ]
    (19) Dcl -> . int id
    (20) Dcl -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcl                            shift and go to state 9
    Dcls                           shift and go to state 24

state 10

    (17) Dcl -> int . id [ num ]
    (18) Dcl -> int . id [ num ] [ num ]
    (19) Dcl -> int . id
    (20) Dcl -> int . id = num

    id              shift and go to state 25


state 11

    (5) MainBlc -> main { Insts . }

    }               shift and go to state 26


state 12

    (6) Insts -> Attr . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (21) Attr -> . id = Exp
    (22) Attr -> . id [ Exp ] = Exp
    (23) Attr -> . id [ Exp ] [ Exp ] = Exp
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Attr                           shift and go to state 12
    Insts                          shift and go to state 27
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 13

    (7) Insts -> Print . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (21) Attr -> . id = Exp
    (22) Attr -> . id [ Exp ] = Exp
    (23) Attr -> . id [ Exp ] [ Exp ] = Exp
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Print                          shift and go to state 13
    Insts                          shift and go to state 28
    Attr                           shift and go to state 12
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 14

    (8) Insts -> Println . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (21) Attr -> . id = Exp
    (22) Attr -> . id [ Exp ] = Exp
    (23) Attr -> . id [ Exp ] [ Exp ] = Exp
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Println                        shift and go to state 14
    Insts                          shift and go to state 29
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 15

    (9) Insts -> Repeat . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (21) Attr -> . id = Exp
    (22) Attr -> . id [ Exp ] = Exp
    (23) Attr -> . id [ Exp ] [ Exp ] = Exp
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Repeat                         shift and go to state 15
    Insts                          shift and go to state 30
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Read                           shift and go to state 16
    RepeatS                        shift and go to state 20

state 16

    (10) Insts -> Read . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (21) Attr -> . id = Exp
    (22) Attr -> . id [ Exp ] = Exp
    (23) Attr -> . id [ Exp ] [ Exp ] = Exp
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    Read                           shift and go to state 16
    Insts                          shift and go to state 31
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    RepeatS                        shift and go to state 20

state 17

    (21) Attr -> id . = Exp
    (22) Attr -> id . [ Exp ] = Exp
    (23) Attr -> id . [ Exp ] [ Exp ] = Exp

    =               shift and go to state 32
    [               shift and go to state 33


state 18

    (15) Print -> print . ( Exp )

    (               shift and go to state 34


state 19

    (16) Println -> println . ( Exp )

    (               shift and go to state 35


state 20

    (12) Repeat -> RepeatS . ( num ) { Insts }

    (               shift and go to state 36


state 21

    (14) Read -> read . ( id )

    (               shift and go to state 37


state 22

    (13) RepeatS -> repeat .

    (               reduce using rule 13 (RepeatS -> repeat .)


state 23

    (2) VarBlc -> vars { Dcls } .

    main            reduce using rule 2 (VarBlc -> vars { Dcls } .)


state 24

    (3) Dcls -> Dcl Dcls .

    }               reduce using rule 3 (Dcls -> Dcl Dcls .)


state 25

    (17) Dcl -> int id . [ num ]
    (18) Dcl -> int id . [ num ] [ num ]
    (19) Dcl -> int id .
    (20) Dcl -> int id . = num

    [               shift and go to state 38
    int             reduce using rule 19 (Dcl -> int id .)
    }               reduce using rule 19 (Dcl -> int id .)
    =               shift and go to state 39


state 26

    (5) MainBlc -> main { Insts } .

    $end            reduce using rule 5 (MainBlc -> main { Insts } .)


state 27

    (6) Insts -> Attr Insts .

    }               reduce using rule 6 (Insts -> Attr Insts .)


state 28

    (7) Insts -> Print Insts .

    }               reduce using rule 7 (Insts -> Print Insts .)


state 29

    (8) Insts -> Println Insts .

    }               reduce using rule 8 (Insts -> Println Insts .)


state 30

    (9) Insts -> Repeat Insts .

    }               reduce using rule 9 (Insts -> Repeat Insts .)


state 31

    (10) Insts -> Read Insts .

    }               reduce using rule 10 (Insts -> Read Insts .)


state 32

    (21) Attr -> id = . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 41
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 33

    (22) Attr -> id [ . Exp ] = Exp
    (23) Attr -> id [ . Exp ] [ Exp ] = Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 46
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 34

    (15) Print -> print ( . Exp )
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 47
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 35

    (16) Println -> println ( . Exp )
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 48
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 36

    (12) Repeat -> RepeatS ( . num ) { Insts }

    num             shift and go to state 49


state 37

    (14) Read -> read ( . id )

    id              shift and go to state 50


state 38

    (17) Dcl -> int id [ . num ]
    (18) Dcl -> int id [ . num ] [ num ]

    num             shift and go to state 51


state 39

    (20) Dcl -> int id = . num

    num             shift and go to state 52


state 40

    (30) Factor -> id .
    (33) Factor -> id . [ Exp ]
    (34) Factor -> id . [ Exp ] [ Exp ]

    *               reduce using rule 30 (Factor -> id .)
    /               reduce using rule 30 (Factor -> id .)
    +               reduce using rule 30 (Factor -> id .)
    -               reduce using rule 30 (Factor -> id .)
    id              reduce using rule 30 (Factor -> id .)
    print           reduce using rule 30 (Factor -> id .)
    println         reduce using rule 30 (Factor -> id .)
    read            reduce using rule 30 (Factor -> id .)
    repeat          reduce using rule 30 (Factor -> id .)
    }               reduce using rule 30 (Factor -> id .)
    ]               reduce using rule 30 (Factor -> id .)
    )               reduce using rule 30 (Factor -> id .)
    sup             reduce using rule 30 (Factor -> id .)
    inf             reduce using rule 30 (Factor -> id .)
    supeq           reduce using rule 30 (Factor -> id .)
    infeq           reduce using rule 30 (Factor -> id .)
    eq              reduce using rule 30 (Factor -> id .)
    diff            reduce using rule 30 (Factor -> id .)
    and             reduce using rule 30 (Factor -> id .)
    or              reduce using rule 30 (Factor -> id .)
    [               shift and go to state 53


state 41

    (21) Attr -> id = Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    id              reduce using rule 21 (Attr -> id = Exp .)
    print           reduce using rule 21 (Attr -> id = Exp .)
    println         reduce using rule 21 (Attr -> id = Exp .)
    read            reduce using rule 21 (Attr -> id = Exp .)
    repeat          reduce using rule 21 (Attr -> id = Exp .)
    }               reduce using rule 21 (Attr -> id = Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 42

    (26) Exp -> Term .
    (27) Term -> Term . * Factor
    (28) Term -> Term . / Factor

    +               reduce using rule 26 (Exp -> Term .)
    -               reduce using rule 26 (Exp -> Term .)
    id              reduce using rule 26 (Exp -> Term .)
    print           reduce using rule 26 (Exp -> Term .)
    println         reduce using rule 26 (Exp -> Term .)
    read            reduce using rule 26 (Exp -> Term .)
    repeat          reduce using rule 26 (Exp -> Term .)
    }               reduce using rule 26 (Exp -> Term .)
    ]               reduce using rule 26 (Exp -> Term .)
    )               reduce using rule 26 (Exp -> Term .)
    sup             reduce using rule 26 (Exp -> Term .)
    inf             reduce using rule 26 (Exp -> Term .)
    supeq           reduce using rule 26 (Exp -> Term .)
    infeq           reduce using rule 26 (Exp -> Term .)
    eq              reduce using rule 26 (Exp -> Term .)
    diff            reduce using rule 26 (Exp -> Term .)
    and             reduce using rule 26 (Exp -> Term .)
    or              reduce using rule 26 (Exp -> Term .)
    *               shift and go to state 56
    /               shift and go to state 57


state 43

    (29) Term -> Factor .

    *               reduce using rule 29 (Term -> Factor .)
    /               reduce using rule 29 (Term -> Factor .)
    +               reduce using rule 29 (Term -> Factor .)
    -               reduce using rule 29 (Term -> Factor .)
    id              reduce using rule 29 (Term -> Factor .)
    print           reduce using rule 29 (Term -> Factor .)
    println         reduce using rule 29 (Term -> Factor .)
    read            reduce using rule 29 (Term -> Factor .)
    repeat          reduce using rule 29 (Term -> Factor .)
    }               reduce using rule 29 (Term -> Factor .)
    ]               reduce using rule 29 (Term -> Factor .)
    )               reduce using rule 29 (Term -> Factor .)
    sup             reduce using rule 29 (Term -> Factor .)
    inf             reduce using rule 29 (Term -> Factor .)
    supeq           reduce using rule 29 (Term -> Factor .)
    infeq           reduce using rule 29 (Term -> Factor .)
    eq              reduce using rule 29 (Term -> Factor .)
    diff            reduce using rule 29 (Term -> Factor .)
    and             reduce using rule 29 (Term -> Factor .)
    or              reduce using rule 29 (Term -> Factor .)


state 44

    (31) Factor -> num .

    *               reduce using rule 31 (Factor -> num .)
    /               reduce using rule 31 (Factor -> num .)
    +               reduce using rule 31 (Factor -> num .)
    -               reduce using rule 31 (Factor -> num .)
    id              reduce using rule 31 (Factor -> num .)
    print           reduce using rule 31 (Factor -> num .)
    println         reduce using rule 31 (Factor -> num .)
    read            reduce using rule 31 (Factor -> num .)
    repeat          reduce using rule 31 (Factor -> num .)
    }               reduce using rule 31 (Factor -> num .)
    ]               reduce using rule 31 (Factor -> num .)
    )               reduce using rule 31 (Factor -> num .)
    sup             reduce using rule 31 (Factor -> num .)
    inf             reduce using rule 31 (Factor -> num .)
    supeq           reduce using rule 31 (Factor -> num .)
    infeq           reduce using rule 31 (Factor -> num .)
    eq              reduce using rule 31 (Factor -> num .)
    diff            reduce using rule 31 (Factor -> num .)
    and             reduce using rule 31 (Factor -> num .)
    or              reduce using rule 31 (Factor -> num .)


state 45

    (32) Factor -> ( . Cond )
    (35) Factor -> ( . Exp )
    (36) Cond -> . Cond and Cond
    (37) Cond -> . Cond or Cond
    (38) Cond -> . Exp sup Exp
    (39) Cond -> . Exp inf Exp
    (40) Cond -> . Exp supeq Exp
    (41) Cond -> . Exp infeq Exp
    (42) Cond -> . not Exp
    (43) Cond -> . Exp eq Exp
    (44) Cond -> . Exp diff Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    not             shift and go to state 60
    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Cond                           shift and go to state 58
    Exp                            shift and go to state 59
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 46

    (22) Attr -> id [ Exp . ] = Exp
    (23) Attr -> id [ Exp . ] [ Exp ] = Exp
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    ]               shift and go to state 61
    +               shift and go to state 54
    -               shift and go to state 55


state 47

    (15) Print -> print ( Exp . )
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               shift and go to state 62
    +               shift and go to state 54
    -               shift and go to state 55


state 48

    (16) Println -> println ( Exp . )
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               shift and go to state 63
    +               shift and go to state 54
    -               shift and go to state 55


state 49

    (12) Repeat -> RepeatS ( num . ) { Insts }

    )               shift and go to state 64


state 50

    (14) Read -> read ( id . )

    )               shift and go to state 65


state 51

    (17) Dcl -> int id [ num . ]
    (18) Dcl -> int id [ num . ] [ num ]

    ]               shift and go to state 66


state 52

    (20) Dcl -> int id = num .

    int             reduce using rule 20 (Dcl -> int id = num .)
    }               reduce using rule 20 (Dcl -> int id = num .)


state 53

    (33) Factor -> id [ . Exp ]
    (34) Factor -> id [ . Exp ] [ Exp ]
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 67
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 54

    (24) Exp -> Exp + . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Term                           shift and go to state 68
    Factor                         shift and go to state 43

state 55

    (25) Exp -> Exp - . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Term                           shift and go to state 69
    Factor                         shift and go to state 43

state 56

    (27) Term -> Term * . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Factor                         shift and go to state 70

state 57

    (28) Term -> Term / . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Factor                         shift and go to state 71

state 58

    (32) Factor -> ( Cond . )
    (36) Cond -> Cond . and Cond
    (37) Cond -> Cond . or Cond

    )               shift and go to state 72
    and             shift and go to state 73
    or              shift and go to state 74


state 59

    (35) Factor -> ( Exp . )
    (38) Cond -> Exp . sup Exp
    (39) Cond -> Exp . inf Exp
    (40) Cond -> Exp . supeq Exp
    (41) Cond -> Exp . infeq Exp
    (43) Cond -> Exp . eq Exp
    (44) Cond -> Exp . diff Exp
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               shift and go to state 75
    sup             shift and go to state 76
    inf             shift and go to state 77
    supeq           shift and go to state 78
    infeq           shift and go to state 79
    eq              shift and go to state 80
    diff            shift and go to state 81
    +               shift and go to state 54
    -               shift and go to state 55


state 60

    (42) Cond -> not . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 82
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 61

    (22) Attr -> id [ Exp ] . = Exp
    (23) Attr -> id [ Exp ] . [ Exp ] = Exp

    =               shift and go to state 84
    [               shift and go to state 83


state 62

    (15) Print -> print ( Exp ) .

    id              reduce using rule 15 (Print -> print ( Exp ) .)
    print           reduce using rule 15 (Print -> print ( Exp ) .)
    println         reduce using rule 15 (Print -> print ( Exp ) .)
    read            reduce using rule 15 (Print -> print ( Exp ) .)
    repeat          reduce using rule 15 (Print -> print ( Exp ) .)
    }               reduce using rule 15 (Print -> print ( Exp ) .)


state 63

    (16) Println -> println ( Exp ) .

    id              reduce using rule 16 (Println -> println ( Exp ) .)
    print           reduce using rule 16 (Println -> println ( Exp ) .)
    println         reduce using rule 16 (Println -> println ( Exp ) .)
    read            reduce using rule 16 (Println -> println ( Exp ) .)
    repeat          reduce using rule 16 (Println -> println ( Exp ) .)
    }               reduce using rule 16 (Println -> println ( Exp ) .)


state 64

    (12) Repeat -> RepeatS ( num ) . { Insts }

    {               shift and go to state 85


state 65

    (14) Read -> read ( id ) .

    id              reduce using rule 14 (Read -> read ( id ) .)
    print           reduce using rule 14 (Read -> read ( id ) .)
    println         reduce using rule 14 (Read -> read ( id ) .)
    read            reduce using rule 14 (Read -> read ( id ) .)
    repeat          reduce using rule 14 (Read -> read ( id ) .)
    }               reduce using rule 14 (Read -> read ( id ) .)


state 66

    (17) Dcl -> int id [ num ] .
    (18) Dcl -> int id [ num ] . [ num ]

    int             reduce using rule 17 (Dcl -> int id [ num ] .)
    }               reduce using rule 17 (Dcl -> int id [ num ] .)
    [               shift and go to state 86


state 67

    (33) Factor -> id [ Exp . ]
    (34) Factor -> id [ Exp . ] [ Exp ]
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    ]               shift and go to state 87
    +               shift and go to state 54
    -               shift and go to state 55


state 68

    (24) Exp -> Exp + Term .
    (27) Term -> Term . * Factor
    (28) Term -> Term . / Factor

    +               reduce using rule 24 (Exp -> Exp + Term .)
    -               reduce using rule 24 (Exp -> Exp + Term .)
    id              reduce using rule 24 (Exp -> Exp + Term .)
    print           reduce using rule 24 (Exp -> Exp + Term .)
    println         reduce using rule 24 (Exp -> Exp + Term .)
    read            reduce using rule 24 (Exp -> Exp + Term .)
    repeat          reduce using rule 24 (Exp -> Exp + Term .)
    }               reduce using rule 24 (Exp -> Exp + Term .)
    ]               reduce using rule 24 (Exp -> Exp + Term .)
    )               reduce using rule 24 (Exp -> Exp + Term .)
    sup             reduce using rule 24 (Exp -> Exp + Term .)
    inf             reduce using rule 24 (Exp -> Exp + Term .)
    supeq           reduce using rule 24 (Exp -> Exp + Term .)
    infeq           reduce using rule 24 (Exp -> Exp + Term .)
    eq              reduce using rule 24 (Exp -> Exp + Term .)
    diff            reduce using rule 24 (Exp -> Exp + Term .)
    and             reduce using rule 24 (Exp -> Exp + Term .)
    or              reduce using rule 24 (Exp -> Exp + Term .)
    *               shift and go to state 56
    /               shift and go to state 57


state 69

    (25) Exp -> Exp - Term .
    (27) Term -> Term . * Factor
    (28) Term -> Term . / Factor

    +               reduce using rule 25 (Exp -> Exp - Term .)
    -               reduce using rule 25 (Exp -> Exp - Term .)
    id              reduce using rule 25 (Exp -> Exp - Term .)
    print           reduce using rule 25 (Exp -> Exp - Term .)
    println         reduce using rule 25 (Exp -> Exp - Term .)
    read            reduce using rule 25 (Exp -> Exp - Term .)
    repeat          reduce using rule 25 (Exp -> Exp - Term .)
    }               reduce using rule 25 (Exp -> Exp - Term .)
    ]               reduce using rule 25 (Exp -> Exp - Term .)
    )               reduce using rule 25 (Exp -> Exp - Term .)
    sup             reduce using rule 25 (Exp -> Exp - Term .)
    inf             reduce using rule 25 (Exp -> Exp - Term .)
    supeq           reduce using rule 25 (Exp -> Exp - Term .)
    infeq           reduce using rule 25 (Exp -> Exp - Term .)
    eq              reduce using rule 25 (Exp -> Exp - Term .)
    diff            reduce using rule 25 (Exp -> Exp - Term .)
    and             reduce using rule 25 (Exp -> Exp - Term .)
    or              reduce using rule 25 (Exp -> Exp - Term .)
    *               shift and go to state 56
    /               shift and go to state 57


state 70

    (27) Term -> Term * Factor .

    *               reduce using rule 27 (Term -> Term * Factor .)
    /               reduce using rule 27 (Term -> Term * Factor .)
    +               reduce using rule 27 (Term -> Term * Factor .)
    -               reduce using rule 27 (Term -> Term * Factor .)
    id              reduce using rule 27 (Term -> Term * Factor .)
    print           reduce using rule 27 (Term -> Term * Factor .)
    println         reduce using rule 27 (Term -> Term * Factor .)
    read            reduce using rule 27 (Term -> Term * Factor .)
    repeat          reduce using rule 27 (Term -> Term * Factor .)
    }               reduce using rule 27 (Term -> Term * Factor .)
    ]               reduce using rule 27 (Term -> Term * Factor .)
    )               reduce using rule 27 (Term -> Term * Factor .)
    sup             reduce using rule 27 (Term -> Term * Factor .)
    inf             reduce using rule 27 (Term -> Term * Factor .)
    supeq           reduce using rule 27 (Term -> Term * Factor .)
    infeq           reduce using rule 27 (Term -> Term * Factor .)
    eq              reduce using rule 27 (Term -> Term * Factor .)
    diff            reduce using rule 27 (Term -> Term * Factor .)
    and             reduce using rule 27 (Term -> Term * Factor .)
    or              reduce using rule 27 (Term -> Term * Factor .)


state 71

    (28) Term -> Term / Factor .

    *               reduce using rule 28 (Term -> Term / Factor .)
    /               reduce using rule 28 (Term -> Term / Factor .)
    +               reduce using rule 28 (Term -> Term / Factor .)
    -               reduce using rule 28 (Term -> Term / Factor .)
    id              reduce using rule 28 (Term -> Term / Factor .)
    print           reduce using rule 28 (Term -> Term / Factor .)
    println         reduce using rule 28 (Term -> Term / Factor .)
    read            reduce using rule 28 (Term -> Term / Factor .)
    repeat          reduce using rule 28 (Term -> Term / Factor .)
    }               reduce using rule 28 (Term -> Term / Factor .)
    ]               reduce using rule 28 (Term -> Term / Factor .)
    )               reduce using rule 28 (Term -> Term / Factor .)
    sup             reduce using rule 28 (Term -> Term / Factor .)
    inf             reduce using rule 28 (Term -> Term / Factor .)
    supeq           reduce using rule 28 (Term -> Term / Factor .)
    infeq           reduce using rule 28 (Term -> Term / Factor .)
    eq              reduce using rule 28 (Term -> Term / Factor .)
    diff            reduce using rule 28 (Term -> Term / Factor .)
    and             reduce using rule 28 (Term -> Term / Factor .)
    or              reduce using rule 28 (Term -> Term / Factor .)


state 72

    (32) Factor -> ( Cond ) .

    *               reduce using rule 32 (Factor -> ( Cond ) .)
    /               reduce using rule 32 (Factor -> ( Cond ) .)
    +               reduce using rule 32 (Factor -> ( Cond ) .)
    -               reduce using rule 32 (Factor -> ( Cond ) .)
    id              reduce using rule 32 (Factor -> ( Cond ) .)
    print           reduce using rule 32 (Factor -> ( Cond ) .)
    println         reduce using rule 32 (Factor -> ( Cond ) .)
    read            reduce using rule 32 (Factor -> ( Cond ) .)
    repeat          reduce using rule 32 (Factor -> ( Cond ) .)
    }               reduce using rule 32 (Factor -> ( Cond ) .)
    ]               reduce using rule 32 (Factor -> ( Cond ) .)
    )               reduce using rule 32 (Factor -> ( Cond ) .)
    sup             reduce using rule 32 (Factor -> ( Cond ) .)
    inf             reduce using rule 32 (Factor -> ( Cond ) .)
    supeq           reduce using rule 32 (Factor -> ( Cond ) .)
    infeq           reduce using rule 32 (Factor -> ( Cond ) .)
    eq              reduce using rule 32 (Factor -> ( Cond ) .)
    diff            reduce using rule 32 (Factor -> ( Cond ) .)
    and             reduce using rule 32 (Factor -> ( Cond ) .)
    or              reduce using rule 32 (Factor -> ( Cond ) .)


state 73

    (36) Cond -> Cond and . Cond
    (36) Cond -> . Cond and Cond
    (37) Cond -> . Cond or Cond
    (38) Cond -> . Exp sup Exp
    (39) Cond -> . Exp inf Exp
    (40) Cond -> . Exp supeq Exp
    (41) Cond -> . Exp infeq Exp
    (42) Cond -> . not Exp
    (43) Cond -> . Exp eq Exp
    (44) Cond -> . Exp diff Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    not             shift and go to state 60
    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Cond                           shift and go to state 88
    Exp                            shift and go to state 89
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 74

    (37) Cond -> Cond or . Cond
    (36) Cond -> . Cond and Cond
    (37) Cond -> . Cond or Cond
    (38) Cond -> . Exp sup Exp
    (39) Cond -> . Exp inf Exp
    (40) Cond -> . Exp supeq Exp
    (41) Cond -> . Exp infeq Exp
    (42) Cond -> . not Exp
    (43) Cond -> . Exp eq Exp
    (44) Cond -> . Exp diff Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    not             shift and go to state 60
    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Cond                           shift and go to state 90
    Exp                            shift and go to state 89
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 75

    (35) Factor -> ( Exp ) .

    *               reduce using rule 35 (Factor -> ( Exp ) .)
    /               reduce using rule 35 (Factor -> ( Exp ) .)
    +               reduce using rule 35 (Factor -> ( Exp ) .)
    -               reduce using rule 35 (Factor -> ( Exp ) .)
    id              reduce using rule 35 (Factor -> ( Exp ) .)
    print           reduce using rule 35 (Factor -> ( Exp ) .)
    println         reduce using rule 35 (Factor -> ( Exp ) .)
    read            reduce using rule 35 (Factor -> ( Exp ) .)
    repeat          reduce using rule 35 (Factor -> ( Exp ) .)
    }               reduce using rule 35 (Factor -> ( Exp ) .)
    ]               reduce using rule 35 (Factor -> ( Exp ) .)
    )               reduce using rule 35 (Factor -> ( Exp ) .)
    sup             reduce using rule 35 (Factor -> ( Exp ) .)
    inf             reduce using rule 35 (Factor -> ( Exp ) .)
    supeq           reduce using rule 35 (Factor -> ( Exp ) .)
    infeq           reduce using rule 35 (Factor -> ( Exp ) .)
    eq              reduce using rule 35 (Factor -> ( Exp ) .)
    diff            reduce using rule 35 (Factor -> ( Exp ) .)
    and             reduce using rule 35 (Factor -> ( Exp ) .)
    or              reduce using rule 35 (Factor -> ( Exp ) .)


state 76

    (38) Cond -> Exp sup . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 91
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 77

    (39) Cond -> Exp inf . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 92
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 78

    (40) Cond -> Exp supeq . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 93
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 79

    (41) Cond -> Exp infeq . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 94
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 80

    (43) Cond -> Exp eq . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 95
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 81

    (44) Cond -> Exp diff . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 96
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 82

    (42) Cond -> not Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               reduce using rule 42 (Cond -> not Exp .)
    and             reduce using rule 42 (Cond -> not Exp .)
    or              reduce using rule 42 (Cond -> not Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 83

    (23) Attr -> id [ Exp ] [ . Exp ] = Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 97
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 84

    (22) Attr -> id [ Exp ] = . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 98
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 85

    (12) Repeat -> RepeatS ( num ) { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Repeat Insts
    (10) Insts -> . Read Insts
    (11) Insts -> .
    (21) Attr -> . id = Exp
    (22) Attr -> . id [ Exp ] = Exp
    (23) Attr -> . id [ Exp ] [ Exp ] = Exp
    (15) Print -> . print ( Exp )
    (16) Println -> . println ( Exp )
    (12) Repeat -> . RepeatS ( num ) { Insts }
    (14) Read -> . read ( id )
    (13) RepeatS -> . repeat

    }               reduce using rule 11 (Insts -> .)
    id              shift and go to state 17
    print           shift and go to state 18
    println         shift and go to state 19
    read            shift and go to state 21
    repeat          shift and go to state 22

    RepeatS                        shift and go to state 20
    Insts                          shift and go to state 99
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 15
    Read                           shift and go to state 16

state 86

    (18) Dcl -> int id [ num ] [ . num ]

    num             shift and go to state 100


state 87

    (33) Factor -> id [ Exp ] .
    (34) Factor -> id [ Exp ] . [ Exp ]

    *               reduce using rule 33 (Factor -> id [ Exp ] .)
    /               reduce using rule 33 (Factor -> id [ Exp ] .)
    +               reduce using rule 33 (Factor -> id [ Exp ] .)
    -               reduce using rule 33 (Factor -> id [ Exp ] .)
    id              reduce using rule 33 (Factor -> id [ Exp ] .)
    print           reduce using rule 33 (Factor -> id [ Exp ] .)
    println         reduce using rule 33 (Factor -> id [ Exp ] .)
    read            reduce using rule 33 (Factor -> id [ Exp ] .)
    repeat          reduce using rule 33 (Factor -> id [ Exp ] .)
    }               reduce using rule 33 (Factor -> id [ Exp ] .)
    ]               reduce using rule 33 (Factor -> id [ Exp ] .)
    )               reduce using rule 33 (Factor -> id [ Exp ] .)
    sup             reduce using rule 33 (Factor -> id [ Exp ] .)
    inf             reduce using rule 33 (Factor -> id [ Exp ] .)
    supeq           reduce using rule 33 (Factor -> id [ Exp ] .)
    infeq           reduce using rule 33 (Factor -> id [ Exp ] .)
    eq              reduce using rule 33 (Factor -> id [ Exp ] .)
    diff            reduce using rule 33 (Factor -> id [ Exp ] .)
    and             reduce using rule 33 (Factor -> id [ Exp ] .)
    or              reduce using rule 33 (Factor -> id [ Exp ] .)
    [               shift and go to state 101


state 88

    (36) Cond -> Cond and Cond .
    (36) Cond -> Cond . and Cond
    (37) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 36 (Cond -> Cond and Cond .)
    and             shift and go to state 73
    or              shift and go to state 74

  ! and             [ reduce using rule 36 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 36 (Cond -> Cond and Cond .) ]


state 89

    (38) Cond -> Exp . sup Exp
    (39) Cond -> Exp . inf Exp
    (40) Cond -> Exp . supeq Exp
    (41) Cond -> Exp . infeq Exp
    (43) Cond -> Exp . eq Exp
    (44) Cond -> Exp . diff Exp
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    sup             shift and go to state 76
    inf             shift and go to state 77
    supeq           shift and go to state 78
    infeq           shift and go to state 79
    eq              shift and go to state 80
    diff            shift and go to state 81
    +               shift and go to state 54
    -               shift and go to state 55


state 90

    (37) Cond -> Cond or Cond .
    (36) Cond -> Cond . and Cond
    (37) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 37 (Cond -> Cond or Cond .)
    and             shift and go to state 73
    or              shift and go to state 74

  ! and             [ reduce using rule 37 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 37 (Cond -> Cond or Cond .) ]


state 91

    (38) Cond -> Exp sup Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               reduce using rule 38 (Cond -> Exp sup Exp .)
    and             reduce using rule 38 (Cond -> Exp sup Exp .)
    or              reduce using rule 38 (Cond -> Exp sup Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 92

    (39) Cond -> Exp inf Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               reduce using rule 39 (Cond -> Exp inf Exp .)
    and             reduce using rule 39 (Cond -> Exp inf Exp .)
    or              reduce using rule 39 (Cond -> Exp inf Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 93

    (40) Cond -> Exp supeq Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               reduce using rule 40 (Cond -> Exp supeq Exp .)
    and             reduce using rule 40 (Cond -> Exp supeq Exp .)
    or              reduce using rule 40 (Cond -> Exp supeq Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 94

    (41) Cond -> Exp infeq Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               reduce using rule 41 (Cond -> Exp infeq Exp .)
    and             reduce using rule 41 (Cond -> Exp infeq Exp .)
    or              reduce using rule 41 (Cond -> Exp infeq Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 95

    (43) Cond -> Exp eq Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               reduce using rule 43 (Cond -> Exp eq Exp .)
    and             reduce using rule 43 (Cond -> Exp eq Exp .)
    or              reduce using rule 43 (Cond -> Exp eq Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 96

    (44) Cond -> Exp diff Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    )               reduce using rule 44 (Cond -> Exp diff Exp .)
    and             reduce using rule 44 (Cond -> Exp diff Exp .)
    or              reduce using rule 44 (Cond -> Exp diff Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 97

    (23) Attr -> id [ Exp ] [ Exp . ] = Exp
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    ]               shift and go to state 102
    +               shift and go to state 54
    -               shift and go to state 55


state 98

    (22) Attr -> id [ Exp ] = Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    id              reduce using rule 22 (Attr -> id [ Exp ] = Exp .)
    print           reduce using rule 22 (Attr -> id [ Exp ] = Exp .)
    println         reduce using rule 22 (Attr -> id [ Exp ] = Exp .)
    read            reduce using rule 22 (Attr -> id [ Exp ] = Exp .)
    repeat          reduce using rule 22 (Attr -> id [ Exp ] = Exp .)
    }               reduce using rule 22 (Attr -> id [ Exp ] = Exp .)
    +               shift and go to state 54
    -               shift and go to state 55


state 99

    (12) Repeat -> RepeatS ( num ) { Insts . }

    }               shift and go to state 103


state 100

    (18) Dcl -> int id [ num ] [ num . ]

    ]               shift and go to state 104


state 101

    (34) Factor -> id [ Exp ] [ . Exp ]
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 105
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 102

    (23) Attr -> id [ Exp ] [ Exp ] . = Exp

    =               shift and go to state 106


state 103

    (12) Repeat -> RepeatS ( num ) { Insts } .

    id              reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    print           reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    println         reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    read            reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    repeat          reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)
    }               reduce using rule 12 (Repeat -> RepeatS ( num ) { Insts } .)


state 104

    (18) Dcl -> int id [ num ] [ num ] .

    int             reduce using rule 18 (Dcl -> int id [ num ] [ num ] .)
    }               reduce using rule 18 (Dcl -> int id [ num ] [ num ] .)


state 105

    (34) Factor -> id [ Exp ] [ Exp . ]
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    ]               shift and go to state 107
    +               shift and go to state 54
    -               shift and go to state 55


state 106

    (23) Attr -> id [ Exp ] [ Exp ] = . Exp
    (24) Exp -> . Exp + Term
    (25) Exp -> . Exp - Term
    (26) Exp -> . Term
    (27) Term -> . Term * Factor
    (28) Term -> . Term / Factor
    (29) Term -> . Factor
    (30) Factor -> . id
    (31) Factor -> . num
    (32) Factor -> . ( Cond )
    (33) Factor -> . id [ Exp ]
    (34) Factor -> . id [ Exp ] [ Exp ]
    (35) Factor -> . ( Exp )

    id              shift and go to state 40
    num             shift and go to state 44
    (               shift and go to state 45

    Exp                            shift and go to state 108
    Term                           shift and go to state 42
    Factor                         shift and go to state 43

state 107

    (34) Factor -> id [ Exp ] [ Exp ] .

    *               reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    /               reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    +               reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    -               reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    id              reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    print           reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    println         reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    read            reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    repeat          reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    }               reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    ]               reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    )               reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    sup             reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    inf             reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    supeq           reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    infeq           reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    eq              reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    diff            reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    and             reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)
    or              reduce using rule 34 (Factor -> id [ Exp ] [ Exp ] .)


state 108

    (23) Attr -> id [ Exp ] [ Exp ] = Exp .
    (24) Exp -> Exp . + Term
    (25) Exp -> Exp . - Term

    id              reduce using rule 23 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 23 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 23 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 23 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 23 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    }               reduce using rule 23 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 54
    -               shift and go to state 55

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for and in state 88 resolved as shift
WARNING: shift/reduce conflict for or in state 88 resolved as shift
WARNING: shift/reduce conflict for and in state 90 resolved as shift
WARNING: shift/reduce conflict for or in state 90 resolved as shift
