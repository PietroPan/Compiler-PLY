Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> VarBlc MainBlc
Rule 2     VarBlc -> vars { Dcls }
Rule 3     Dcls -> Dcl Dcls
Rule 4     Dcls -> <empty>
Rule 5     MainBlc -> main { Insts }
Rule 6     Insts -> Attr Insts
Rule 7     Insts -> Print Insts
Rule 8     Insts -> Println Insts
Rule 9     Insts -> Prints Insts
Rule 10    Insts -> Repeat Insts
Rule 11    Insts -> Read Insts
Rule 12    Insts -> If Insts
Rule 13    Insts -> <empty>
Rule 14    Repeat -> RepeatS ( num ) { Insts }
Rule 15    RepeatS -> repeat
Rule 16    Read -> read ( id )
Rule 17    Print -> print ( Exp )
Rule 18    Println -> println ( Exp )
Rule 19    Prints -> prints ( string )
Rule 20    Dcl -> int id [ num ]
Rule 21    Dcl -> int id [ num ] [ num ]
Rule 22    Dcl -> int id
Rule 23    Dcl -> int id = num
Rule 24    Attr -> id = Exp
Rule 25    Attr -> id [ Exp ] = Exp
Rule 26    Attr -> id [ Exp ] [ Exp ] = Exp
Rule 27    If -> IfStart { Insts }
Rule 28    IfStart -> if ( Cond )
Rule 29    If -> IfStart { Insts } ElseStart { Insts }
Rule 30    ElseStart -> else
Rule 31    Exp -> Exp + Term
Rule 32    Exp -> Exp - Term
Rule 33    Exp -> Term
Rule 34    Term -> Term * Factor
Rule 35    Term -> Term / Factor
Rule 36    Term -> Factor
Rule 37    Factor -> id
Rule 38    Factor -> num
Rule 39    Factor -> ( Cond )
Rule 40    Factor -> id [ Exp ]
Rule 41    Factor -> id [ Exp ] [ Exp ]
Rule 42    Factor -> ( Exp )
Rule 43    Cond -> Cond and Cond
Rule 44    Cond -> Cond or Cond
Rule 45    Cond -> ( Cond and Cond )
Rule 46    Cond -> ( Cond or Cond )
Rule 47    Cond -> Exp sup Exp
Rule 48    Cond -> Exp inf Exp
Rule 49    Cond -> Exp supeq Exp
Rule 50    Cond -> Exp infeq Exp
Rule 51    Cond -> not Exp
Rule 52    Cond -> Exp eq Exp
Rule 53    Cond -> Exp diff Exp

Terminals, with rules where they appear

(                    : 14 16 17 18 19 28 39 42 45 46
)                    : 14 16 17 18 19 28 39 42 45 46
*                    : 34
+                    : 31
-                    : 32
/                    : 35
=                    : 23 24 25 26
[                    : 20 21 21 25 26 26 40 41 41
]                    : 20 21 21 25 26 26 40 41 41
and                  : 43 45
diff                 : 53
else                 : 30
eq                   : 52
error                : 
id                   : 16 20 21 22 23 24 25 26 37 40 41
if                   : 28
inf                  : 48
infeq                : 50
int                  : 20 21 22 23
main                 : 5
not                  : 51
num                  : 14 20 21 21 23 38
or                   : 44 46
print                : 17
println              : 18
prints               : 19
read                 : 16
repeat               : 15
string               : 19
sup                  : 47
supeq                : 49
vars                 : 2
{                    : 2 5 14 27 29 29
}                    : 2 5 14 27 29 29

Nonterminals, with rules where they appear

Attr                 : 6
Cond                 : 28 39 43 43 44 44 45 45 46 46
Dcl                  : 3
Dcls                 : 2 3
ElseStart            : 29
Exp                  : 17 18 24 25 25 26 26 26 31 32 40 41 41 42 47 47 48 48 49 49 50 50 51 52 52 53 53
Factor               : 34 35 36
If                   : 12
IfStart              : 27 29
Insts                : 5 6 7 8 9 10 11 12 14 27 29 29
MainBlc              : 1
Print                : 7
Println              : 8
Prints               : 9
Prog                 : 0
Read                 : 11
Repeat               : 10
RepeatS              : 14
Term                 : 31 32 33 34 35
VarBlc               : 1

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . VarBlc MainBlc
    (2) VarBlc -> . vars { Dcls }

    vars            shift and go to state 3

    Prog                           shift and go to state 1
    VarBlc                         shift and go to state 2

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> VarBlc . MainBlc
    (5) MainBlc -> . main { Insts }

    main            shift and go to state 5

    MainBlc                        shift and go to state 4

state 3

    (2) VarBlc -> vars . { Dcls }

    {               shift and go to state 6


state 4

    (1) Prog -> VarBlc MainBlc .

    $end            reduce using rule 1 (Prog -> VarBlc MainBlc .)


state 5

    (5) MainBlc -> main . { Insts }

    {               shift and go to state 7


state 6

    (2) VarBlc -> vars { . Dcls }
    (3) Dcls -> . Dcl Dcls
    (4) Dcls -> .
    (20) Dcl -> . int id [ num ]
    (21) Dcl -> . int id [ num ] [ num ]
    (22) Dcl -> . int id
    (23) Dcl -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcls                           shift and go to state 8
    Dcl                            shift and go to state 9

state 7

    (5) MainBlc -> main { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    Insts                          shift and go to state 11
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23
    IfStart                        shift and go to state 25

state 8

    (2) VarBlc -> vars { Dcls . }

    }               shift and go to state 28


state 9

    (3) Dcls -> Dcl . Dcls
    (3) Dcls -> . Dcl Dcls
    (4) Dcls -> .
    (20) Dcl -> . int id [ num ]
    (21) Dcl -> . int id [ num ] [ num ]
    (22) Dcl -> . int id
    (23) Dcl -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcl                            shift and go to state 9
    Dcls                           shift and go to state 29

state 10

    (20) Dcl -> int . id [ num ]
    (21) Dcl -> int . id [ num ] [ num ]
    (22) Dcl -> int . id
    (23) Dcl -> int . id = num

    id              shift and go to state 30


state 11

    (5) MainBlc -> main { Insts . }

    }               shift and go to state 31


state 12

    (6) Insts -> Attr . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    Attr                           shift and go to state 12
    Insts                          shift and go to state 32
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23
    IfStart                        shift and go to state 25

state 13

    (7) Insts -> Print . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    Print                          shift and go to state 13
    Insts                          shift and go to state 33
    Attr                           shift and go to state 12
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23
    IfStart                        shift and go to state 25

state 14

    (8) Insts -> Println . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    Println                        shift and go to state 14
    Insts                          shift and go to state 34
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23
    IfStart                        shift and go to state 25

state 15

    (9) Insts -> Prints . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    Prints                         shift and go to state 15
    Insts                          shift and go to state 35
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23
    IfStart                        shift and go to state 25

state 16

    (10) Insts -> Repeat . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    Repeat                         shift and go to state 16
    Insts                          shift and go to state 36
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Read                           shift and go to state 17
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23
    IfStart                        shift and go to state 25

state 17

    (11) Insts -> Read . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    Read                           shift and go to state 17
    Insts                          shift and go to state 37
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23
    IfStart                        shift and go to state 25

state 18

    (12) Insts -> If . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    If                             shift and go to state 18
    Insts                          shift and go to state 38
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    RepeatS                        shift and go to state 23
    IfStart                        shift and go to state 25

state 19

    (24) Attr -> id . = Exp
    (25) Attr -> id . [ Exp ] = Exp
    (26) Attr -> id . [ Exp ] [ Exp ] = Exp

    =               shift and go to state 39
    [               shift and go to state 40


state 20

    (17) Print -> print . ( Exp )

    (               shift and go to state 41


state 21

    (18) Println -> println . ( Exp )

    (               shift and go to state 42


state 22

    (19) Prints -> prints . ( string )

    (               shift and go to state 43


state 23

    (14) Repeat -> RepeatS . ( num ) { Insts }

    (               shift and go to state 44


state 24

    (16) Read -> read . ( id )

    (               shift and go to state 45


state 25

    (27) If -> IfStart . { Insts }
    (29) If -> IfStart . { Insts } ElseStart { Insts }

    {               shift and go to state 46


state 26

    (15) RepeatS -> repeat .

    (               reduce using rule 15 (RepeatS -> repeat .)


state 27

    (28) IfStart -> if . ( Cond )

    (               shift and go to state 47


state 28

    (2) VarBlc -> vars { Dcls } .

    main            reduce using rule 2 (VarBlc -> vars { Dcls } .)


state 29

    (3) Dcls -> Dcl Dcls .

    }               reduce using rule 3 (Dcls -> Dcl Dcls .)


state 30

    (20) Dcl -> int id . [ num ]
    (21) Dcl -> int id . [ num ] [ num ]
    (22) Dcl -> int id .
    (23) Dcl -> int id . = num

    [               shift and go to state 48
    int             reduce using rule 22 (Dcl -> int id .)
    }               reduce using rule 22 (Dcl -> int id .)
    =               shift and go to state 49


state 31

    (5) MainBlc -> main { Insts } .

    $end            reduce using rule 5 (MainBlc -> main { Insts } .)


state 32

    (6) Insts -> Attr Insts .

    }               reduce using rule 6 (Insts -> Attr Insts .)


state 33

    (7) Insts -> Print Insts .

    }               reduce using rule 7 (Insts -> Print Insts .)


state 34

    (8) Insts -> Println Insts .

    }               reduce using rule 8 (Insts -> Println Insts .)


state 35

    (9) Insts -> Prints Insts .

    }               reduce using rule 9 (Insts -> Prints Insts .)


state 36

    (10) Insts -> Repeat Insts .

    }               reduce using rule 10 (Insts -> Repeat Insts .)


state 37

    (11) Insts -> Read Insts .

    }               reduce using rule 11 (Insts -> Read Insts .)


state 38

    (12) Insts -> If Insts .

    }               reduce using rule 12 (Insts -> If Insts .)


state 39

    (24) Attr -> id = . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 51
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 40

    (25) Attr -> id [ . Exp ] = Exp
    (26) Attr -> id [ . Exp ] [ Exp ] = Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 56
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 41

    (17) Print -> print ( . Exp )
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 57
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 42

    (18) Println -> println ( . Exp )
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 58
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 43

    (19) Prints -> prints ( . string )

    string          shift and go to state 59


state 44

    (14) Repeat -> RepeatS ( . num ) { Insts }

    num             shift and go to state 60


state 45

    (16) Read -> read ( . id )

    id              shift and go to state 61


state 46

    (27) If -> IfStart { . Insts }
    (29) If -> IfStart { . Insts } ElseStart { Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    IfStart                        shift and go to state 25
    Insts                          shift and go to state 62
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23

state 47

    (28) IfStart -> if ( . Cond )
    (43) Cond -> . Cond and Cond
    (44) Cond -> . Cond or Cond
    (45) Cond -> . ( Cond and Cond )
    (46) Cond -> . ( Cond or Cond )
    (47) Cond -> . Exp sup Exp
    (48) Cond -> . Exp inf Exp
    (49) Cond -> . Exp supeq Exp
    (50) Cond -> . Exp infeq Exp
    (51) Cond -> . not Exp
    (52) Cond -> . Exp eq Exp
    (53) Cond -> . Exp diff Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 50
    num             shift and go to state 54

    Cond                           shift and go to state 64
    Exp                            shift and go to state 65
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 48

    (20) Dcl -> int id [ . num ]
    (21) Dcl -> int id [ . num ] [ num ]

    num             shift and go to state 67


state 49

    (23) Dcl -> int id = . num

    num             shift and go to state 68


state 50

    (37) Factor -> id .
    (40) Factor -> id . [ Exp ]
    (41) Factor -> id . [ Exp ] [ Exp ]

    *               reduce using rule 37 (Factor -> id .)
    /               reduce using rule 37 (Factor -> id .)
    +               reduce using rule 37 (Factor -> id .)
    -               reduce using rule 37 (Factor -> id .)
    id              reduce using rule 37 (Factor -> id .)
    print           reduce using rule 37 (Factor -> id .)
    println         reduce using rule 37 (Factor -> id .)
    prints          reduce using rule 37 (Factor -> id .)
    read            reduce using rule 37 (Factor -> id .)
    repeat          reduce using rule 37 (Factor -> id .)
    if              reduce using rule 37 (Factor -> id .)
    }               reduce using rule 37 (Factor -> id .)
    ]               reduce using rule 37 (Factor -> id .)
    )               reduce using rule 37 (Factor -> id .)
    sup             reduce using rule 37 (Factor -> id .)
    inf             reduce using rule 37 (Factor -> id .)
    supeq           reduce using rule 37 (Factor -> id .)
    infeq           reduce using rule 37 (Factor -> id .)
    eq              reduce using rule 37 (Factor -> id .)
    diff            reduce using rule 37 (Factor -> id .)
    and             reduce using rule 37 (Factor -> id .)
    or              reduce using rule 37 (Factor -> id .)
    [               shift and go to state 69


state 51

    (24) Attr -> id = Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    id              reduce using rule 24 (Attr -> id = Exp .)
    print           reduce using rule 24 (Attr -> id = Exp .)
    println         reduce using rule 24 (Attr -> id = Exp .)
    prints          reduce using rule 24 (Attr -> id = Exp .)
    read            reduce using rule 24 (Attr -> id = Exp .)
    repeat          reduce using rule 24 (Attr -> id = Exp .)
    if              reduce using rule 24 (Attr -> id = Exp .)
    }               reduce using rule 24 (Attr -> id = Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 52

    (33) Exp -> Term .
    (34) Term -> Term . * Factor
    (35) Term -> Term . / Factor

    +               reduce using rule 33 (Exp -> Term .)
    -               reduce using rule 33 (Exp -> Term .)
    id              reduce using rule 33 (Exp -> Term .)
    print           reduce using rule 33 (Exp -> Term .)
    println         reduce using rule 33 (Exp -> Term .)
    prints          reduce using rule 33 (Exp -> Term .)
    read            reduce using rule 33 (Exp -> Term .)
    repeat          reduce using rule 33 (Exp -> Term .)
    if              reduce using rule 33 (Exp -> Term .)
    }               reduce using rule 33 (Exp -> Term .)
    ]               reduce using rule 33 (Exp -> Term .)
    )               reduce using rule 33 (Exp -> Term .)
    sup             reduce using rule 33 (Exp -> Term .)
    inf             reduce using rule 33 (Exp -> Term .)
    supeq           reduce using rule 33 (Exp -> Term .)
    infeq           reduce using rule 33 (Exp -> Term .)
    eq              reduce using rule 33 (Exp -> Term .)
    diff            reduce using rule 33 (Exp -> Term .)
    and             reduce using rule 33 (Exp -> Term .)
    or              reduce using rule 33 (Exp -> Term .)
    *               shift and go to state 72
    /               shift and go to state 73


state 53

    (36) Term -> Factor .

    *               reduce using rule 36 (Term -> Factor .)
    /               reduce using rule 36 (Term -> Factor .)
    +               reduce using rule 36 (Term -> Factor .)
    -               reduce using rule 36 (Term -> Factor .)
    id              reduce using rule 36 (Term -> Factor .)
    print           reduce using rule 36 (Term -> Factor .)
    println         reduce using rule 36 (Term -> Factor .)
    prints          reduce using rule 36 (Term -> Factor .)
    read            reduce using rule 36 (Term -> Factor .)
    repeat          reduce using rule 36 (Term -> Factor .)
    if              reduce using rule 36 (Term -> Factor .)
    }               reduce using rule 36 (Term -> Factor .)
    ]               reduce using rule 36 (Term -> Factor .)
    )               reduce using rule 36 (Term -> Factor .)
    sup             reduce using rule 36 (Term -> Factor .)
    inf             reduce using rule 36 (Term -> Factor .)
    supeq           reduce using rule 36 (Term -> Factor .)
    infeq           reduce using rule 36 (Term -> Factor .)
    eq              reduce using rule 36 (Term -> Factor .)
    diff            reduce using rule 36 (Term -> Factor .)
    and             reduce using rule 36 (Term -> Factor .)
    or              reduce using rule 36 (Term -> Factor .)


state 54

    (38) Factor -> num .

    *               reduce using rule 38 (Factor -> num .)
    /               reduce using rule 38 (Factor -> num .)
    +               reduce using rule 38 (Factor -> num .)
    -               reduce using rule 38 (Factor -> num .)
    id              reduce using rule 38 (Factor -> num .)
    print           reduce using rule 38 (Factor -> num .)
    println         reduce using rule 38 (Factor -> num .)
    prints          reduce using rule 38 (Factor -> num .)
    read            reduce using rule 38 (Factor -> num .)
    repeat          reduce using rule 38 (Factor -> num .)
    if              reduce using rule 38 (Factor -> num .)
    }               reduce using rule 38 (Factor -> num .)
    ]               reduce using rule 38 (Factor -> num .)
    )               reduce using rule 38 (Factor -> num .)
    sup             reduce using rule 38 (Factor -> num .)
    inf             reduce using rule 38 (Factor -> num .)
    supeq           reduce using rule 38 (Factor -> num .)
    infeq           reduce using rule 38 (Factor -> num .)
    eq              reduce using rule 38 (Factor -> num .)
    diff            reduce using rule 38 (Factor -> num .)
    and             reduce using rule 38 (Factor -> num .)
    or              reduce using rule 38 (Factor -> num .)


state 55

    (39) Factor -> ( . Cond )
    (42) Factor -> ( . Exp )
    (43) Cond -> . Cond and Cond
    (44) Cond -> . Cond or Cond
    (45) Cond -> . ( Cond and Cond )
    (46) Cond -> . ( Cond or Cond )
    (47) Cond -> . Exp sup Exp
    (48) Cond -> . Exp inf Exp
    (49) Cond -> . Exp supeq Exp
    (50) Cond -> . Exp infeq Exp
    (51) Cond -> . not Exp
    (52) Cond -> . Exp eq Exp
    (53) Cond -> . Exp diff Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 50
    num             shift and go to state 54

    Cond                           shift and go to state 74
    Exp                            shift and go to state 75
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 56

    (25) Attr -> id [ Exp . ] = Exp
    (26) Attr -> id [ Exp . ] [ Exp ] = Exp
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    ]               shift and go to state 76
    +               shift and go to state 70
    -               shift and go to state 71


state 57

    (17) Print -> print ( Exp . )
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               shift and go to state 77
    +               shift and go to state 70
    -               shift and go to state 71


state 58

    (18) Println -> println ( Exp . )
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               shift and go to state 78
    +               shift and go to state 70
    -               shift and go to state 71


state 59

    (19) Prints -> prints ( string . )

    )               shift and go to state 79


state 60

    (14) Repeat -> RepeatS ( num . ) { Insts }

    )               shift and go to state 80


state 61

    (16) Read -> read ( id . )

    )               shift and go to state 81


state 62

    (27) If -> IfStart { Insts . }
    (29) If -> IfStart { Insts . } ElseStart { Insts }

    }               shift and go to state 82


state 63

    (45) Cond -> ( . Cond and Cond )
    (46) Cond -> ( . Cond or Cond )
    (39) Factor -> ( . Cond )
    (42) Factor -> ( . Exp )
    (43) Cond -> . Cond and Cond
    (44) Cond -> . Cond or Cond
    (45) Cond -> . ( Cond and Cond )
    (46) Cond -> . ( Cond or Cond )
    (47) Cond -> . Exp sup Exp
    (48) Cond -> . Exp inf Exp
    (49) Cond -> . Exp supeq Exp
    (50) Cond -> . Exp infeq Exp
    (51) Cond -> . not Exp
    (52) Cond -> . Exp eq Exp
    (53) Cond -> . Exp diff Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 50
    num             shift and go to state 54

    Cond                           shift and go to state 83
    Exp                            shift and go to state 75
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 64

    (28) IfStart -> if ( Cond . )
    (43) Cond -> Cond . and Cond
    (44) Cond -> Cond . or Cond

    )               shift and go to state 84
    and             shift and go to state 85
    or              shift and go to state 86


state 65

    (47) Cond -> Exp . sup Exp
    (48) Cond -> Exp . inf Exp
    (49) Cond -> Exp . supeq Exp
    (50) Cond -> Exp . infeq Exp
    (52) Cond -> Exp . eq Exp
    (53) Cond -> Exp . diff Exp
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    sup             shift and go to state 87
    inf             shift and go to state 88
    supeq           shift and go to state 89
    infeq           shift and go to state 90
    eq              shift and go to state 91
    diff            shift and go to state 92
    +               shift and go to state 70
    -               shift and go to state 71


state 66

    (51) Cond -> not . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 93
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 67

    (20) Dcl -> int id [ num . ]
    (21) Dcl -> int id [ num . ] [ num ]

    ]               shift and go to state 94


state 68

    (23) Dcl -> int id = num .

    int             reduce using rule 23 (Dcl -> int id = num .)
    }               reduce using rule 23 (Dcl -> int id = num .)


state 69

    (40) Factor -> id [ . Exp ]
    (41) Factor -> id [ . Exp ] [ Exp ]
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 95
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 70

    (31) Exp -> Exp + . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Term                           shift and go to state 96
    Factor                         shift and go to state 53

state 71

    (32) Exp -> Exp - . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Term                           shift and go to state 97
    Factor                         shift and go to state 53

state 72

    (34) Term -> Term * . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Factor                         shift and go to state 98

state 73

    (35) Term -> Term / . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Factor                         shift and go to state 99

state 74

    (39) Factor -> ( Cond . )
    (43) Cond -> Cond . and Cond
    (44) Cond -> Cond . or Cond

    )               shift and go to state 100
    and             shift and go to state 85
    or              shift and go to state 86


state 75

    (42) Factor -> ( Exp . )
    (47) Cond -> Exp . sup Exp
    (48) Cond -> Exp . inf Exp
    (49) Cond -> Exp . supeq Exp
    (50) Cond -> Exp . infeq Exp
    (52) Cond -> Exp . eq Exp
    (53) Cond -> Exp . diff Exp
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               shift and go to state 101
    sup             shift and go to state 87
    inf             shift and go to state 88
    supeq           shift and go to state 89
    infeq           shift and go to state 90
    eq              shift and go to state 91
    diff            shift and go to state 92
    +               shift and go to state 70
    -               shift and go to state 71


state 76

    (25) Attr -> id [ Exp ] . = Exp
    (26) Attr -> id [ Exp ] . [ Exp ] = Exp

    =               shift and go to state 103
    [               shift and go to state 102


state 77

    (17) Print -> print ( Exp ) .

    id              reduce using rule 17 (Print -> print ( Exp ) .)
    print           reduce using rule 17 (Print -> print ( Exp ) .)
    println         reduce using rule 17 (Print -> print ( Exp ) .)
    prints          reduce using rule 17 (Print -> print ( Exp ) .)
    read            reduce using rule 17 (Print -> print ( Exp ) .)
    repeat          reduce using rule 17 (Print -> print ( Exp ) .)
    if              reduce using rule 17 (Print -> print ( Exp ) .)
    }               reduce using rule 17 (Print -> print ( Exp ) .)


state 78

    (18) Println -> println ( Exp ) .

    id              reduce using rule 18 (Println -> println ( Exp ) .)
    print           reduce using rule 18 (Println -> println ( Exp ) .)
    println         reduce using rule 18 (Println -> println ( Exp ) .)
    prints          reduce using rule 18 (Println -> println ( Exp ) .)
    read            reduce using rule 18 (Println -> println ( Exp ) .)
    repeat          reduce using rule 18 (Println -> println ( Exp ) .)
    if              reduce using rule 18 (Println -> println ( Exp ) .)
    }               reduce using rule 18 (Println -> println ( Exp ) .)


state 79

    (19) Prints -> prints ( string ) .

    id              reduce using rule 19 (Prints -> prints ( string ) .)
    print           reduce using rule 19 (Prints -> prints ( string ) .)
    println         reduce using rule 19 (Prints -> prints ( string ) .)
    prints          reduce using rule 19 (Prints -> prints ( string ) .)
    read            reduce using rule 19 (Prints -> prints ( string ) .)
    repeat          reduce using rule 19 (Prints -> prints ( string ) .)
    if              reduce using rule 19 (Prints -> prints ( string ) .)
    }               reduce using rule 19 (Prints -> prints ( string ) .)


state 80

    (14) Repeat -> RepeatS ( num ) . { Insts }

    {               shift and go to state 104


state 81

    (16) Read -> read ( id ) .

    id              reduce using rule 16 (Read -> read ( id ) .)
    print           reduce using rule 16 (Read -> read ( id ) .)
    println         reduce using rule 16 (Read -> read ( id ) .)
    prints          reduce using rule 16 (Read -> read ( id ) .)
    read            reduce using rule 16 (Read -> read ( id ) .)
    repeat          reduce using rule 16 (Read -> read ( id ) .)
    if              reduce using rule 16 (Read -> read ( id ) .)
    }               reduce using rule 16 (Read -> read ( id ) .)


state 82

    (27) If -> IfStart { Insts } .
    (29) If -> IfStart { Insts } . ElseStart { Insts }
    (30) ElseStart -> . else

    id              reduce using rule 27 (If -> IfStart { Insts } .)
    print           reduce using rule 27 (If -> IfStart { Insts } .)
    println         reduce using rule 27 (If -> IfStart { Insts } .)
    prints          reduce using rule 27 (If -> IfStart { Insts } .)
    read            reduce using rule 27 (If -> IfStart { Insts } .)
    repeat          reduce using rule 27 (If -> IfStart { Insts } .)
    if              reduce using rule 27 (If -> IfStart { Insts } .)
    }               reduce using rule 27 (If -> IfStart { Insts } .)
    else            shift and go to state 106

    ElseStart                      shift and go to state 105

state 83

    (45) Cond -> ( Cond . and Cond )
    (46) Cond -> ( Cond . or Cond )
    (39) Factor -> ( Cond . )
    (43) Cond -> Cond . and Cond
    (44) Cond -> Cond . or Cond

    and             shift and go to state 107
    or              shift and go to state 108
    )               shift and go to state 100


state 84

    (28) IfStart -> if ( Cond ) .

    {               reduce using rule 28 (IfStart -> if ( Cond ) .)


state 85

    (43) Cond -> Cond and . Cond
    (43) Cond -> . Cond and Cond
    (44) Cond -> . Cond or Cond
    (45) Cond -> . ( Cond and Cond )
    (46) Cond -> . ( Cond or Cond )
    (47) Cond -> . Exp sup Exp
    (48) Cond -> . Exp inf Exp
    (49) Cond -> . Exp supeq Exp
    (50) Cond -> . Exp infeq Exp
    (51) Cond -> . not Exp
    (52) Cond -> . Exp eq Exp
    (53) Cond -> . Exp diff Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 50
    num             shift and go to state 54

    Cond                           shift and go to state 109
    Exp                            shift and go to state 65
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 86

    (44) Cond -> Cond or . Cond
    (43) Cond -> . Cond and Cond
    (44) Cond -> . Cond or Cond
    (45) Cond -> . ( Cond and Cond )
    (46) Cond -> . ( Cond or Cond )
    (47) Cond -> . Exp sup Exp
    (48) Cond -> . Exp inf Exp
    (49) Cond -> . Exp supeq Exp
    (50) Cond -> . Exp infeq Exp
    (51) Cond -> . not Exp
    (52) Cond -> . Exp eq Exp
    (53) Cond -> . Exp diff Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 50
    num             shift and go to state 54

    Cond                           shift and go to state 110
    Exp                            shift and go to state 65
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 87

    (47) Cond -> Exp sup . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 111
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 88

    (48) Cond -> Exp inf . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 112
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 89

    (49) Cond -> Exp supeq . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 113
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 90

    (50) Cond -> Exp infeq . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 114
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 91

    (52) Cond -> Exp eq . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 115
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 92

    (53) Cond -> Exp diff . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 116
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 93

    (51) Cond -> not Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               reduce using rule 51 (Cond -> not Exp .)
    and             reduce using rule 51 (Cond -> not Exp .)
    or              reduce using rule 51 (Cond -> not Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 94

    (20) Dcl -> int id [ num ] .
    (21) Dcl -> int id [ num ] . [ num ]

    int             reduce using rule 20 (Dcl -> int id [ num ] .)
    }               reduce using rule 20 (Dcl -> int id [ num ] .)
    [               shift and go to state 117


state 95

    (40) Factor -> id [ Exp . ]
    (41) Factor -> id [ Exp . ] [ Exp ]
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    ]               shift and go to state 118
    +               shift and go to state 70
    -               shift and go to state 71


state 96

    (31) Exp -> Exp + Term .
    (34) Term -> Term . * Factor
    (35) Term -> Term . / Factor

    +               reduce using rule 31 (Exp -> Exp + Term .)
    -               reduce using rule 31 (Exp -> Exp + Term .)
    id              reduce using rule 31 (Exp -> Exp + Term .)
    print           reduce using rule 31 (Exp -> Exp + Term .)
    println         reduce using rule 31 (Exp -> Exp + Term .)
    prints          reduce using rule 31 (Exp -> Exp + Term .)
    read            reduce using rule 31 (Exp -> Exp + Term .)
    repeat          reduce using rule 31 (Exp -> Exp + Term .)
    if              reduce using rule 31 (Exp -> Exp + Term .)
    }               reduce using rule 31 (Exp -> Exp + Term .)
    ]               reduce using rule 31 (Exp -> Exp + Term .)
    )               reduce using rule 31 (Exp -> Exp + Term .)
    sup             reduce using rule 31 (Exp -> Exp + Term .)
    inf             reduce using rule 31 (Exp -> Exp + Term .)
    supeq           reduce using rule 31 (Exp -> Exp + Term .)
    infeq           reduce using rule 31 (Exp -> Exp + Term .)
    eq              reduce using rule 31 (Exp -> Exp + Term .)
    diff            reduce using rule 31 (Exp -> Exp + Term .)
    and             reduce using rule 31 (Exp -> Exp + Term .)
    or              reduce using rule 31 (Exp -> Exp + Term .)
    *               shift and go to state 72
    /               shift and go to state 73


state 97

    (32) Exp -> Exp - Term .
    (34) Term -> Term . * Factor
    (35) Term -> Term . / Factor

    +               reduce using rule 32 (Exp -> Exp - Term .)
    -               reduce using rule 32 (Exp -> Exp - Term .)
    id              reduce using rule 32 (Exp -> Exp - Term .)
    print           reduce using rule 32 (Exp -> Exp - Term .)
    println         reduce using rule 32 (Exp -> Exp - Term .)
    prints          reduce using rule 32 (Exp -> Exp - Term .)
    read            reduce using rule 32 (Exp -> Exp - Term .)
    repeat          reduce using rule 32 (Exp -> Exp - Term .)
    if              reduce using rule 32 (Exp -> Exp - Term .)
    }               reduce using rule 32 (Exp -> Exp - Term .)
    ]               reduce using rule 32 (Exp -> Exp - Term .)
    )               reduce using rule 32 (Exp -> Exp - Term .)
    sup             reduce using rule 32 (Exp -> Exp - Term .)
    inf             reduce using rule 32 (Exp -> Exp - Term .)
    supeq           reduce using rule 32 (Exp -> Exp - Term .)
    infeq           reduce using rule 32 (Exp -> Exp - Term .)
    eq              reduce using rule 32 (Exp -> Exp - Term .)
    diff            reduce using rule 32 (Exp -> Exp - Term .)
    and             reduce using rule 32 (Exp -> Exp - Term .)
    or              reduce using rule 32 (Exp -> Exp - Term .)
    *               shift and go to state 72
    /               shift and go to state 73


state 98

    (34) Term -> Term * Factor .

    *               reduce using rule 34 (Term -> Term * Factor .)
    /               reduce using rule 34 (Term -> Term * Factor .)
    +               reduce using rule 34 (Term -> Term * Factor .)
    -               reduce using rule 34 (Term -> Term * Factor .)
    id              reduce using rule 34 (Term -> Term * Factor .)
    print           reduce using rule 34 (Term -> Term * Factor .)
    println         reduce using rule 34 (Term -> Term * Factor .)
    prints          reduce using rule 34 (Term -> Term * Factor .)
    read            reduce using rule 34 (Term -> Term * Factor .)
    repeat          reduce using rule 34 (Term -> Term * Factor .)
    if              reduce using rule 34 (Term -> Term * Factor .)
    }               reduce using rule 34 (Term -> Term * Factor .)
    ]               reduce using rule 34 (Term -> Term * Factor .)
    )               reduce using rule 34 (Term -> Term * Factor .)
    sup             reduce using rule 34 (Term -> Term * Factor .)
    inf             reduce using rule 34 (Term -> Term * Factor .)
    supeq           reduce using rule 34 (Term -> Term * Factor .)
    infeq           reduce using rule 34 (Term -> Term * Factor .)
    eq              reduce using rule 34 (Term -> Term * Factor .)
    diff            reduce using rule 34 (Term -> Term * Factor .)
    and             reduce using rule 34 (Term -> Term * Factor .)
    or              reduce using rule 34 (Term -> Term * Factor .)


state 99

    (35) Term -> Term / Factor .

    *               reduce using rule 35 (Term -> Term / Factor .)
    /               reduce using rule 35 (Term -> Term / Factor .)
    +               reduce using rule 35 (Term -> Term / Factor .)
    -               reduce using rule 35 (Term -> Term / Factor .)
    id              reduce using rule 35 (Term -> Term / Factor .)
    print           reduce using rule 35 (Term -> Term / Factor .)
    println         reduce using rule 35 (Term -> Term / Factor .)
    prints          reduce using rule 35 (Term -> Term / Factor .)
    read            reduce using rule 35 (Term -> Term / Factor .)
    repeat          reduce using rule 35 (Term -> Term / Factor .)
    if              reduce using rule 35 (Term -> Term / Factor .)
    }               reduce using rule 35 (Term -> Term / Factor .)
    ]               reduce using rule 35 (Term -> Term / Factor .)
    )               reduce using rule 35 (Term -> Term / Factor .)
    sup             reduce using rule 35 (Term -> Term / Factor .)
    inf             reduce using rule 35 (Term -> Term / Factor .)
    supeq           reduce using rule 35 (Term -> Term / Factor .)
    infeq           reduce using rule 35 (Term -> Term / Factor .)
    eq              reduce using rule 35 (Term -> Term / Factor .)
    diff            reduce using rule 35 (Term -> Term / Factor .)
    and             reduce using rule 35 (Term -> Term / Factor .)
    or              reduce using rule 35 (Term -> Term / Factor .)


state 100

    (39) Factor -> ( Cond ) .

    *               reduce using rule 39 (Factor -> ( Cond ) .)
    /               reduce using rule 39 (Factor -> ( Cond ) .)
    +               reduce using rule 39 (Factor -> ( Cond ) .)
    -               reduce using rule 39 (Factor -> ( Cond ) .)
    id              reduce using rule 39 (Factor -> ( Cond ) .)
    print           reduce using rule 39 (Factor -> ( Cond ) .)
    println         reduce using rule 39 (Factor -> ( Cond ) .)
    prints          reduce using rule 39 (Factor -> ( Cond ) .)
    read            reduce using rule 39 (Factor -> ( Cond ) .)
    repeat          reduce using rule 39 (Factor -> ( Cond ) .)
    if              reduce using rule 39 (Factor -> ( Cond ) .)
    }               reduce using rule 39 (Factor -> ( Cond ) .)
    ]               reduce using rule 39 (Factor -> ( Cond ) .)
    )               reduce using rule 39 (Factor -> ( Cond ) .)
    sup             reduce using rule 39 (Factor -> ( Cond ) .)
    inf             reduce using rule 39 (Factor -> ( Cond ) .)
    supeq           reduce using rule 39 (Factor -> ( Cond ) .)
    infeq           reduce using rule 39 (Factor -> ( Cond ) .)
    eq              reduce using rule 39 (Factor -> ( Cond ) .)
    diff            reduce using rule 39 (Factor -> ( Cond ) .)
    and             reduce using rule 39 (Factor -> ( Cond ) .)
    or              reduce using rule 39 (Factor -> ( Cond ) .)


state 101

    (42) Factor -> ( Exp ) .

    *               reduce using rule 42 (Factor -> ( Exp ) .)
    /               reduce using rule 42 (Factor -> ( Exp ) .)
    +               reduce using rule 42 (Factor -> ( Exp ) .)
    -               reduce using rule 42 (Factor -> ( Exp ) .)
    id              reduce using rule 42 (Factor -> ( Exp ) .)
    print           reduce using rule 42 (Factor -> ( Exp ) .)
    println         reduce using rule 42 (Factor -> ( Exp ) .)
    prints          reduce using rule 42 (Factor -> ( Exp ) .)
    read            reduce using rule 42 (Factor -> ( Exp ) .)
    repeat          reduce using rule 42 (Factor -> ( Exp ) .)
    if              reduce using rule 42 (Factor -> ( Exp ) .)
    }               reduce using rule 42 (Factor -> ( Exp ) .)
    ]               reduce using rule 42 (Factor -> ( Exp ) .)
    )               reduce using rule 42 (Factor -> ( Exp ) .)
    sup             reduce using rule 42 (Factor -> ( Exp ) .)
    inf             reduce using rule 42 (Factor -> ( Exp ) .)
    supeq           reduce using rule 42 (Factor -> ( Exp ) .)
    infeq           reduce using rule 42 (Factor -> ( Exp ) .)
    eq              reduce using rule 42 (Factor -> ( Exp ) .)
    diff            reduce using rule 42 (Factor -> ( Exp ) .)
    and             reduce using rule 42 (Factor -> ( Exp ) .)
    or              reduce using rule 42 (Factor -> ( Exp ) .)


state 102

    (26) Attr -> id [ Exp ] [ . Exp ] = Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 119
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 103

    (25) Attr -> id [ Exp ] = . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 120
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 104

    (14) Repeat -> RepeatS ( num ) { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    RepeatS                        shift and go to state 23
    Insts                          shift and go to state 121
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    If                             shift and go to state 18
    IfStart                        shift and go to state 25

state 105

    (29) If -> IfStart { Insts } ElseStart . { Insts }

    {               shift and go to state 122


state 106

    (30) ElseStart -> else .

    {               reduce using rule 30 (ElseStart -> else .)


state 107

    (45) Cond -> ( Cond and . Cond )
    (43) Cond -> Cond and . Cond
    (43) Cond -> . Cond and Cond
    (44) Cond -> . Cond or Cond
    (45) Cond -> . ( Cond and Cond )
    (46) Cond -> . ( Cond or Cond )
    (47) Cond -> . Exp sup Exp
    (48) Cond -> . Exp inf Exp
    (49) Cond -> . Exp supeq Exp
    (50) Cond -> . Exp infeq Exp
    (51) Cond -> . not Exp
    (52) Cond -> . Exp eq Exp
    (53) Cond -> . Exp diff Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 50
    num             shift and go to state 54

    Cond                           shift and go to state 123
    Exp                            shift and go to state 65
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 108

    (46) Cond -> ( Cond or . Cond )
    (44) Cond -> Cond or . Cond
    (43) Cond -> . Cond and Cond
    (44) Cond -> . Cond or Cond
    (45) Cond -> . ( Cond and Cond )
    (46) Cond -> . ( Cond or Cond )
    (47) Cond -> . Exp sup Exp
    (48) Cond -> . Exp inf Exp
    (49) Cond -> . Exp supeq Exp
    (50) Cond -> . Exp infeq Exp
    (51) Cond -> . not Exp
    (52) Cond -> . Exp eq Exp
    (53) Cond -> . Exp diff Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 50
    num             shift and go to state 54

    Cond                           shift and go to state 124
    Exp                            shift and go to state 65
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 109

    (43) Cond -> Cond and Cond .
    (43) Cond -> Cond . and Cond
    (44) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 43 (Cond -> Cond and Cond .)
    and             shift and go to state 85
    or              shift and go to state 86

  ! and             [ reduce using rule 43 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 43 (Cond -> Cond and Cond .) ]


state 110

    (44) Cond -> Cond or Cond .
    (43) Cond -> Cond . and Cond
    (44) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 44 (Cond -> Cond or Cond .)
    and             shift and go to state 85
    or              shift and go to state 86

  ! and             [ reduce using rule 44 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 44 (Cond -> Cond or Cond .) ]


state 111

    (47) Cond -> Exp sup Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               reduce using rule 47 (Cond -> Exp sup Exp .)
    and             reduce using rule 47 (Cond -> Exp sup Exp .)
    or              reduce using rule 47 (Cond -> Exp sup Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 112

    (48) Cond -> Exp inf Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               reduce using rule 48 (Cond -> Exp inf Exp .)
    and             reduce using rule 48 (Cond -> Exp inf Exp .)
    or              reduce using rule 48 (Cond -> Exp inf Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 113

    (49) Cond -> Exp supeq Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               reduce using rule 49 (Cond -> Exp supeq Exp .)
    and             reduce using rule 49 (Cond -> Exp supeq Exp .)
    or              reduce using rule 49 (Cond -> Exp supeq Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 114

    (50) Cond -> Exp infeq Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               reduce using rule 50 (Cond -> Exp infeq Exp .)
    and             reduce using rule 50 (Cond -> Exp infeq Exp .)
    or              reduce using rule 50 (Cond -> Exp infeq Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 115

    (52) Cond -> Exp eq Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               reduce using rule 52 (Cond -> Exp eq Exp .)
    and             reduce using rule 52 (Cond -> Exp eq Exp .)
    or              reduce using rule 52 (Cond -> Exp eq Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 116

    (53) Cond -> Exp diff Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    )               reduce using rule 53 (Cond -> Exp diff Exp .)
    and             reduce using rule 53 (Cond -> Exp diff Exp .)
    or              reduce using rule 53 (Cond -> Exp diff Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 117

    (21) Dcl -> int id [ num ] [ . num ]

    num             shift and go to state 125


state 118

    (40) Factor -> id [ Exp ] .
    (41) Factor -> id [ Exp ] . [ Exp ]

    *               reduce using rule 40 (Factor -> id [ Exp ] .)
    /               reduce using rule 40 (Factor -> id [ Exp ] .)
    +               reduce using rule 40 (Factor -> id [ Exp ] .)
    -               reduce using rule 40 (Factor -> id [ Exp ] .)
    id              reduce using rule 40 (Factor -> id [ Exp ] .)
    print           reduce using rule 40 (Factor -> id [ Exp ] .)
    println         reduce using rule 40 (Factor -> id [ Exp ] .)
    prints          reduce using rule 40 (Factor -> id [ Exp ] .)
    read            reduce using rule 40 (Factor -> id [ Exp ] .)
    repeat          reduce using rule 40 (Factor -> id [ Exp ] .)
    if              reduce using rule 40 (Factor -> id [ Exp ] .)
    }               reduce using rule 40 (Factor -> id [ Exp ] .)
    ]               reduce using rule 40 (Factor -> id [ Exp ] .)
    )               reduce using rule 40 (Factor -> id [ Exp ] .)
    sup             reduce using rule 40 (Factor -> id [ Exp ] .)
    inf             reduce using rule 40 (Factor -> id [ Exp ] .)
    supeq           reduce using rule 40 (Factor -> id [ Exp ] .)
    infeq           reduce using rule 40 (Factor -> id [ Exp ] .)
    eq              reduce using rule 40 (Factor -> id [ Exp ] .)
    diff            reduce using rule 40 (Factor -> id [ Exp ] .)
    and             reduce using rule 40 (Factor -> id [ Exp ] .)
    or              reduce using rule 40 (Factor -> id [ Exp ] .)
    [               shift and go to state 126


state 119

    (26) Attr -> id [ Exp ] [ Exp . ] = Exp
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    ]               shift and go to state 127
    +               shift and go to state 70
    -               shift and go to state 71


state 120

    (25) Attr -> id [ Exp ] = Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    id              reduce using rule 25 (Attr -> id [ Exp ] = Exp .)
    print           reduce using rule 25 (Attr -> id [ Exp ] = Exp .)
    println         reduce using rule 25 (Attr -> id [ Exp ] = Exp .)
    prints          reduce using rule 25 (Attr -> id [ Exp ] = Exp .)
    read            reduce using rule 25 (Attr -> id [ Exp ] = Exp .)
    repeat          reduce using rule 25 (Attr -> id [ Exp ] = Exp .)
    if              reduce using rule 25 (Attr -> id [ Exp ] = Exp .)
    }               reduce using rule 25 (Attr -> id [ Exp ] = Exp .)
    +               shift and go to state 70
    -               shift and go to state 71


state 121

    (14) Repeat -> RepeatS ( num ) { Insts . }

    }               shift and go to state 128


state 122

    (29) If -> IfStart { Insts } ElseStart { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> . If Insts
    (13) Insts -> .
    (24) Attr -> . id = Exp
    (25) Attr -> . id [ Exp ] = Exp
    (26) Attr -> . id [ Exp ] [ Exp ] = Exp
    (17) Print -> . print ( Exp )
    (18) Println -> . println ( Exp )
    (19) Prints -> . prints ( string )
    (14) Repeat -> . RepeatS ( num ) { Insts }
    (16) Read -> . read ( id )
    (27) If -> . IfStart { Insts }
    (29) If -> . IfStart { Insts } ElseStart { Insts }
    (15) RepeatS -> . repeat
    (28) IfStart -> . if ( Cond )

    }               reduce using rule 13 (Insts -> .)
    id              shift and go to state 19
    print           shift and go to state 20
    println         shift and go to state 21
    prints          shift and go to state 22
    read            shift and go to state 24
    repeat          shift and go to state 26
    if              shift and go to state 27

    IfStart                        shift and go to state 25
    Insts                          shift and go to state 129
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    If                             shift and go to state 18
    RepeatS                        shift and go to state 23

state 123

    (45) Cond -> ( Cond and Cond . )
    (43) Cond -> Cond and Cond .
    (43) Cond -> Cond . and Cond
    (44) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 130
    and             shift and go to state 85
    or              shift and go to state 86

  ! and             [ reduce using rule 43 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 43 (Cond -> Cond and Cond .) ]
  ! )               [ reduce using rule 43 (Cond -> Cond and Cond .) ]


state 124

    (46) Cond -> ( Cond or Cond . )
    (44) Cond -> Cond or Cond .
    (43) Cond -> Cond . and Cond
    (44) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 131
    and             shift and go to state 85
    or              shift and go to state 86

  ! and             [ reduce using rule 44 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 44 (Cond -> Cond or Cond .) ]
  ! )               [ reduce using rule 44 (Cond -> Cond or Cond .) ]


state 125

    (21) Dcl -> int id [ num ] [ num . ]

    ]               shift and go to state 132


state 126

    (41) Factor -> id [ Exp ] [ . Exp ]
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 133
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 127

    (26) Attr -> id [ Exp ] [ Exp ] . = Exp

    =               shift and go to state 134


state 128

    (14) Repeat -> RepeatS ( num ) { Insts } .

    id              reduce using rule 14 (Repeat -> RepeatS ( num ) { Insts } .)
    print           reduce using rule 14 (Repeat -> RepeatS ( num ) { Insts } .)
    println         reduce using rule 14 (Repeat -> RepeatS ( num ) { Insts } .)
    prints          reduce using rule 14 (Repeat -> RepeatS ( num ) { Insts } .)
    read            reduce using rule 14 (Repeat -> RepeatS ( num ) { Insts } .)
    repeat          reduce using rule 14 (Repeat -> RepeatS ( num ) { Insts } .)
    if              reduce using rule 14 (Repeat -> RepeatS ( num ) { Insts } .)
    }               reduce using rule 14 (Repeat -> RepeatS ( num ) { Insts } .)


state 129

    (29) If -> IfStart { Insts } ElseStart { Insts . }

    }               shift and go to state 135


state 130

    (45) Cond -> ( Cond and Cond ) .

    )               reduce using rule 45 (Cond -> ( Cond and Cond ) .)
    and             reduce using rule 45 (Cond -> ( Cond and Cond ) .)
    or              reduce using rule 45 (Cond -> ( Cond and Cond ) .)


state 131

    (46) Cond -> ( Cond or Cond ) .

    )               reduce using rule 46 (Cond -> ( Cond or Cond ) .)
    and             reduce using rule 46 (Cond -> ( Cond or Cond ) .)
    or              reduce using rule 46 (Cond -> ( Cond or Cond ) .)


state 132

    (21) Dcl -> int id [ num ] [ num ] .

    int             reduce using rule 21 (Dcl -> int id [ num ] [ num ] .)
    }               reduce using rule 21 (Dcl -> int id [ num ] [ num ] .)


state 133

    (41) Factor -> id [ Exp ] [ Exp . ]
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    ]               shift and go to state 136
    +               shift and go to state 70
    -               shift and go to state 71


state 134

    (26) Attr -> id [ Exp ] [ Exp ] = . Exp
    (31) Exp -> . Exp + Term
    (32) Exp -> . Exp - Term
    (33) Exp -> . Term
    (34) Term -> . Term * Factor
    (35) Term -> . Term / Factor
    (36) Term -> . Factor
    (37) Factor -> . id
    (38) Factor -> . num
    (39) Factor -> . ( Cond )
    (40) Factor -> . id [ Exp ]
    (41) Factor -> . id [ Exp ] [ Exp ]
    (42) Factor -> . ( Exp )

    id              shift and go to state 50
    num             shift and go to state 54
    (               shift and go to state 55

    Exp                            shift and go to state 137
    Term                           shift and go to state 52
    Factor                         shift and go to state 53

state 135

    (29) If -> IfStart { Insts } ElseStart { Insts } .

    id              reduce using rule 29 (If -> IfStart { Insts } ElseStart { Insts } .)
    print           reduce using rule 29 (If -> IfStart { Insts } ElseStart { Insts } .)
    println         reduce using rule 29 (If -> IfStart { Insts } ElseStart { Insts } .)
    prints          reduce using rule 29 (If -> IfStart { Insts } ElseStart { Insts } .)
    read            reduce using rule 29 (If -> IfStart { Insts } ElseStart { Insts } .)
    repeat          reduce using rule 29 (If -> IfStart { Insts } ElseStart { Insts } .)
    if              reduce using rule 29 (If -> IfStart { Insts } ElseStart { Insts } .)
    }               reduce using rule 29 (If -> IfStart { Insts } ElseStart { Insts } .)


state 136

    (41) Factor -> id [ Exp ] [ Exp ] .

    *               reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    /               reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    +               reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    -               reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    id              reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    print           reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    println         reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    prints          reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    read            reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    repeat          reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    if              reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    }               reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    ]               reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    )               reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    sup             reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    inf             reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    supeq           reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    infeq           reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    eq              reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    diff            reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    and             reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)
    or              reduce using rule 41 (Factor -> id [ Exp ] [ Exp ] .)


state 137

    (26) Attr -> id [ Exp ] [ Exp ] = Exp .
    (31) Exp -> Exp . + Term
    (32) Exp -> Exp . - Term

    id              reduce using rule 26 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 26 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 26 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    prints          reduce using rule 26 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 26 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 26 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    if              reduce using rule 26 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    }               reduce using rule 26 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 70
    -               shift and go to state 71

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for and in state 109 resolved as shift
WARNING: shift/reduce conflict for or in state 109 resolved as shift
WARNING: shift/reduce conflict for and in state 110 resolved as shift
WARNING: shift/reduce conflict for or in state 110 resolved as shift
WARNING: shift/reduce conflict for ) in state 123 resolved as shift
WARNING: shift/reduce conflict for and in state 123 resolved as shift
WARNING: shift/reduce conflict for or in state 123 resolved as shift
WARNING: shift/reduce conflict for ) in state 124 resolved as shift
WARNING: shift/reduce conflict for and in state 124 resolved as shift
WARNING: shift/reduce conflict for or in state 124 resolved as shift
