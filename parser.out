Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> VarBlc MainBlc
Rule 2     VarBlc -> vars { Dcls }
Rule 3     Dcls -> Dcl Dcls
Rule 4     Dcls -> <empty>
Rule 5     MainBlc -> main { Insts }
Rule 6     Insts -> Attr Insts
Rule 7     Insts -> Print Insts
Rule 8     Insts -> Println Insts
Rule 9     Insts -> Prints Insts
Rule 10    Insts -> Repeat Insts
Rule 11    Insts -> Read Insts
Rule 12    Insts -> <empty>
Rule 13    Repeat -> RepeatS ( num ) { Insts }
Rule 14    RepeatS -> repeat
Rule 15    Read -> read ( id )
Rule 16    Print -> print ( Exp )
Rule 17    Println -> println ( Exp )
Rule 18    Prints -> prints ( string )
Rule 19    Dcl -> int id [ num ]
Rule 20    Dcl -> int id [ num ] [ num ]
Rule 21    Dcl -> int id
Rule 22    Dcl -> int id = num
Rule 23    Attr -> id = Exp
Rule 24    Attr -> id [ Exp ] = Exp
Rule 25    Attr -> id [ Exp ] [ Exp ] = Exp
Rule 26    Exp -> Exp + Term
Rule 27    Exp -> Exp - Term
Rule 28    Exp -> Term
Rule 29    Term -> Term * Factor
Rule 30    Term -> Term / Factor
Rule 31    Term -> Factor
Rule 32    Factor -> id
Rule 33    Factor -> num
Rule 34    Factor -> ( Cond )
Rule 35    Factor -> id [ Exp ]
Rule 36    Factor -> id [ Exp ] [ Exp ]
Rule 37    Factor -> ( Exp )
Rule 38    Cond -> Cond and Cond
Rule 39    Cond -> Cond or Cond
Rule 40    Cond -> ( Cond and Cond )
Rule 41    Cond -> ( Cond or Cond )
Rule 42    Cond -> Exp sup Exp
Rule 43    Cond -> Exp inf Exp
Rule 44    Cond -> Exp supeq Exp
Rule 45    Cond -> Exp infeq Exp
Rule 46    Cond -> not Exp
Rule 47    Cond -> Exp eq Exp
Rule 48    Cond -> Exp diff Exp

Terminals, with rules where they appear

(                    : 13 15 16 17 18 34 37 40 41
)                    : 13 15 16 17 18 34 37 40 41
*                    : 29
+                    : 26
-                    : 27
/                    : 30
=                    : 22 23 24 25
[                    : 19 20 20 24 25 25 35 36 36
]                    : 19 20 20 24 25 25 35 36 36
and                  : 38 40
diff                 : 48
eq                   : 47
error                : 
id                   : 15 19 20 21 22 23 24 25 32 35 36
inf                  : 43
infeq                : 45
int                  : 19 20 21 22
main                 : 5
not                  : 46
num                  : 13 19 20 20 22 33
or                   : 39 41
print                : 16
println              : 17
prints               : 18
read                 : 15
repeat               : 14
string               : 18
sup                  : 42
supeq                : 44
vars                 : 2
{                    : 2 5 13
}                    : 2 5 13

Nonterminals, with rules where they appear

Attr                 : 6
Cond                 : 34 38 38 39 39 40 40 41 41
Dcl                  : 3
Dcls                 : 2 3
Exp                  : 16 17 23 24 24 25 25 25 26 27 35 36 36 37 42 42 43 43 44 44 45 45 46 47 47 48 48
Factor               : 29 30 31
Insts                : 5 6 7 8 9 10 11 13
MainBlc              : 1
Print                : 7
Println              : 8
Prints               : 9
Prog                 : 0
Read                 : 11
Repeat               : 10
RepeatS              : 13
Term                 : 26 27 28 29 30
VarBlc               : 1

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . VarBlc MainBlc
    (2) VarBlc -> . vars { Dcls }

    vars            shift and go to state 3

    Prog                           shift and go to state 1
    VarBlc                         shift and go to state 2

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> VarBlc . MainBlc
    (5) MainBlc -> . main { Insts }

    main            shift and go to state 5

    MainBlc                        shift and go to state 4

state 3

    (2) VarBlc -> vars . { Dcls }

    {               shift and go to state 6


state 4

    (1) Prog -> VarBlc MainBlc .

    $end            reduce using rule 1 (Prog -> VarBlc MainBlc .)


state 5

    (5) MainBlc -> main . { Insts }

    {               shift and go to state 7


state 6

    (2) VarBlc -> vars { . Dcls }
    (3) Dcls -> . Dcl Dcls
    (4) Dcls -> .
    (19) Dcl -> . int id [ num ]
    (20) Dcl -> . int id [ num ] [ num ]
    (21) Dcl -> . int id
    (22) Dcl -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcls                           shift and go to state 8
    Dcl                            shift and go to state 9

state 7

    (5) MainBlc -> main { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> .
    (23) Attr -> . id = Exp
    (24) Attr -> . id [ Exp ] = Exp
    (25) Attr -> . id [ Exp ] [ Exp ] = Exp
    (16) Print -> . print ( Exp )
    (17) Println -> . println ( Exp )
    (18) Prints -> . prints ( string )
    (13) Repeat -> . RepeatS ( num ) { Insts }
    (15) Read -> . read ( id )
    (14) RepeatS -> . repeat

    }               reduce using rule 12 (Insts -> .)
    id              shift and go to state 18
    print           shift and go to state 19
    println         shift and go to state 20
    prints          shift and go to state 21
    read            shift and go to state 23
    repeat          shift and go to state 24

    Insts                          shift and go to state 11
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    RepeatS                        shift and go to state 22

state 8

    (2) VarBlc -> vars { Dcls . }

    }               shift and go to state 25


state 9

    (3) Dcls -> Dcl . Dcls
    (3) Dcls -> . Dcl Dcls
    (4) Dcls -> .
    (19) Dcl -> . int id [ num ]
    (20) Dcl -> . int id [ num ] [ num ]
    (21) Dcl -> . int id
    (22) Dcl -> . int id = num

    }               reduce using rule 4 (Dcls -> .)
    int             shift and go to state 10

    Dcl                            shift and go to state 9
    Dcls                           shift and go to state 26

state 10

    (19) Dcl -> int . id [ num ]
    (20) Dcl -> int . id [ num ] [ num ]
    (21) Dcl -> int . id
    (22) Dcl -> int . id = num

    id              shift and go to state 27


state 11

    (5) MainBlc -> main { Insts . }

    }               shift and go to state 28


state 12

    (6) Insts -> Attr . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> .
    (23) Attr -> . id = Exp
    (24) Attr -> . id [ Exp ] = Exp
    (25) Attr -> . id [ Exp ] [ Exp ] = Exp
    (16) Print -> . print ( Exp )
    (17) Println -> . println ( Exp )
    (18) Prints -> . prints ( string )
    (13) Repeat -> . RepeatS ( num ) { Insts }
    (15) Read -> . read ( id )
    (14) RepeatS -> . repeat

    }               reduce using rule 12 (Insts -> .)
    id              shift and go to state 18
    print           shift and go to state 19
    println         shift and go to state 20
    prints          shift and go to state 21
    read            shift and go to state 23
    repeat          shift and go to state 24

    Attr                           shift and go to state 12
    Insts                          shift and go to state 29
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    RepeatS                        shift and go to state 22

state 13

    (7) Insts -> Print . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> .
    (23) Attr -> . id = Exp
    (24) Attr -> . id [ Exp ] = Exp
    (25) Attr -> . id [ Exp ] [ Exp ] = Exp
    (16) Print -> . print ( Exp )
    (17) Println -> . println ( Exp )
    (18) Prints -> . prints ( string )
    (13) Repeat -> . RepeatS ( num ) { Insts }
    (15) Read -> . read ( id )
    (14) RepeatS -> . repeat

    }               reduce using rule 12 (Insts -> .)
    id              shift and go to state 18
    print           shift and go to state 19
    println         shift and go to state 20
    prints          shift and go to state 21
    read            shift and go to state 23
    repeat          shift and go to state 24

    Print                          shift and go to state 13
    Insts                          shift and go to state 30
    Attr                           shift and go to state 12
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    RepeatS                        shift and go to state 22

state 14

    (8) Insts -> Println . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> .
    (23) Attr -> . id = Exp
    (24) Attr -> . id [ Exp ] = Exp
    (25) Attr -> . id [ Exp ] [ Exp ] = Exp
    (16) Print -> . print ( Exp )
    (17) Println -> . println ( Exp )
    (18) Prints -> . prints ( string )
    (13) Repeat -> . RepeatS ( num ) { Insts }
    (15) Read -> . read ( id )
    (14) RepeatS -> . repeat

    }               reduce using rule 12 (Insts -> .)
    id              shift and go to state 18
    print           shift and go to state 19
    println         shift and go to state 20
    prints          shift and go to state 21
    read            shift and go to state 23
    repeat          shift and go to state 24

    Println                        shift and go to state 14
    Insts                          shift and go to state 31
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    RepeatS                        shift and go to state 22

state 15

    (9) Insts -> Prints . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> .
    (23) Attr -> . id = Exp
    (24) Attr -> . id [ Exp ] = Exp
    (25) Attr -> . id [ Exp ] [ Exp ] = Exp
    (16) Print -> . print ( Exp )
    (17) Println -> . println ( Exp )
    (18) Prints -> . prints ( string )
    (13) Repeat -> . RepeatS ( num ) { Insts }
    (15) Read -> . read ( id )
    (14) RepeatS -> . repeat

    }               reduce using rule 12 (Insts -> .)
    id              shift and go to state 18
    print           shift and go to state 19
    println         shift and go to state 20
    prints          shift and go to state 21
    read            shift and go to state 23
    repeat          shift and go to state 24

    Prints                         shift and go to state 15
    Insts                          shift and go to state 32
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17
    RepeatS                        shift and go to state 22

state 16

    (10) Insts -> Repeat . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> .
    (23) Attr -> . id = Exp
    (24) Attr -> . id [ Exp ] = Exp
    (25) Attr -> . id [ Exp ] [ Exp ] = Exp
    (16) Print -> . print ( Exp )
    (17) Println -> . println ( Exp )
    (18) Prints -> . prints ( string )
    (13) Repeat -> . RepeatS ( num ) { Insts }
    (15) Read -> . read ( id )
    (14) RepeatS -> . repeat

    }               reduce using rule 12 (Insts -> .)
    id              shift and go to state 18
    print           shift and go to state 19
    println         shift and go to state 20
    prints          shift and go to state 21
    read            shift and go to state 23
    repeat          shift and go to state 24

    Repeat                         shift and go to state 16
    Insts                          shift and go to state 33
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Read                           shift and go to state 17
    RepeatS                        shift and go to state 22

state 17

    (11) Insts -> Read . Insts
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> .
    (23) Attr -> . id = Exp
    (24) Attr -> . id [ Exp ] = Exp
    (25) Attr -> . id [ Exp ] [ Exp ] = Exp
    (16) Print -> . print ( Exp )
    (17) Println -> . println ( Exp )
    (18) Prints -> . prints ( string )
    (13) Repeat -> . RepeatS ( num ) { Insts }
    (15) Read -> . read ( id )
    (14) RepeatS -> . repeat

    }               reduce using rule 12 (Insts -> .)
    id              shift and go to state 18
    print           shift and go to state 19
    println         shift and go to state 20
    prints          shift and go to state 21
    read            shift and go to state 23
    repeat          shift and go to state 24

    Read                           shift and go to state 17
    Insts                          shift and go to state 34
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    RepeatS                        shift and go to state 22

state 18

    (23) Attr -> id . = Exp
    (24) Attr -> id . [ Exp ] = Exp
    (25) Attr -> id . [ Exp ] [ Exp ] = Exp

    =               shift and go to state 35
    [               shift and go to state 36


state 19

    (16) Print -> print . ( Exp )

    (               shift and go to state 37


state 20

    (17) Println -> println . ( Exp )

    (               shift and go to state 38


state 21

    (18) Prints -> prints . ( string )

    (               shift and go to state 39


state 22

    (13) Repeat -> RepeatS . ( num ) { Insts }

    (               shift and go to state 40


state 23

    (15) Read -> read . ( id )

    (               shift and go to state 41


state 24

    (14) RepeatS -> repeat .

    (               reduce using rule 14 (RepeatS -> repeat .)


state 25

    (2) VarBlc -> vars { Dcls } .

    main            reduce using rule 2 (VarBlc -> vars { Dcls } .)


state 26

    (3) Dcls -> Dcl Dcls .

    }               reduce using rule 3 (Dcls -> Dcl Dcls .)


state 27

    (19) Dcl -> int id . [ num ]
    (20) Dcl -> int id . [ num ] [ num ]
    (21) Dcl -> int id .
    (22) Dcl -> int id . = num

    [               shift and go to state 42
    int             reduce using rule 21 (Dcl -> int id .)
    }               reduce using rule 21 (Dcl -> int id .)
    =               shift and go to state 43


state 28

    (5) MainBlc -> main { Insts } .

    $end            reduce using rule 5 (MainBlc -> main { Insts } .)


state 29

    (6) Insts -> Attr Insts .

    }               reduce using rule 6 (Insts -> Attr Insts .)


state 30

    (7) Insts -> Print Insts .

    }               reduce using rule 7 (Insts -> Print Insts .)


state 31

    (8) Insts -> Println Insts .

    }               reduce using rule 8 (Insts -> Println Insts .)


state 32

    (9) Insts -> Prints Insts .

    }               reduce using rule 9 (Insts -> Prints Insts .)


state 33

    (10) Insts -> Repeat Insts .

    }               reduce using rule 10 (Insts -> Repeat Insts .)


state 34

    (11) Insts -> Read Insts .

    }               reduce using rule 11 (Insts -> Read Insts .)


state 35

    (23) Attr -> id = . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 45
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 36

    (24) Attr -> id [ . Exp ] = Exp
    (25) Attr -> id [ . Exp ] [ Exp ] = Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 50
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 37

    (16) Print -> print ( . Exp )
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 51
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 38

    (17) Println -> println ( . Exp )
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 52
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 39

    (18) Prints -> prints ( . string )

    string          shift and go to state 53


state 40

    (13) Repeat -> RepeatS ( . num ) { Insts }

    num             shift and go to state 54


state 41

    (15) Read -> read ( . id )

    id              shift and go to state 55


state 42

    (19) Dcl -> int id [ . num ]
    (20) Dcl -> int id [ . num ] [ num ]

    num             shift and go to state 56


state 43

    (22) Dcl -> int id = . num

    num             shift and go to state 57


state 44

    (32) Factor -> id .
    (35) Factor -> id . [ Exp ]
    (36) Factor -> id . [ Exp ] [ Exp ]

    *               reduce using rule 32 (Factor -> id .)
    /               reduce using rule 32 (Factor -> id .)
    +               reduce using rule 32 (Factor -> id .)
    -               reduce using rule 32 (Factor -> id .)
    id              reduce using rule 32 (Factor -> id .)
    print           reduce using rule 32 (Factor -> id .)
    println         reduce using rule 32 (Factor -> id .)
    prints          reduce using rule 32 (Factor -> id .)
    read            reduce using rule 32 (Factor -> id .)
    repeat          reduce using rule 32 (Factor -> id .)
    }               reduce using rule 32 (Factor -> id .)
    ]               reduce using rule 32 (Factor -> id .)
    )               reduce using rule 32 (Factor -> id .)
    sup             reduce using rule 32 (Factor -> id .)
    inf             reduce using rule 32 (Factor -> id .)
    supeq           reduce using rule 32 (Factor -> id .)
    infeq           reduce using rule 32 (Factor -> id .)
    eq              reduce using rule 32 (Factor -> id .)
    diff            reduce using rule 32 (Factor -> id .)
    and             reduce using rule 32 (Factor -> id .)
    or              reduce using rule 32 (Factor -> id .)
    [               shift and go to state 58


state 45

    (23) Attr -> id = Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    id              reduce using rule 23 (Attr -> id = Exp .)
    print           reduce using rule 23 (Attr -> id = Exp .)
    println         reduce using rule 23 (Attr -> id = Exp .)
    prints          reduce using rule 23 (Attr -> id = Exp .)
    read            reduce using rule 23 (Attr -> id = Exp .)
    repeat          reduce using rule 23 (Attr -> id = Exp .)
    }               reduce using rule 23 (Attr -> id = Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 46

    (28) Exp -> Term .
    (29) Term -> Term . * Factor
    (30) Term -> Term . / Factor

    +               reduce using rule 28 (Exp -> Term .)
    -               reduce using rule 28 (Exp -> Term .)
    id              reduce using rule 28 (Exp -> Term .)
    print           reduce using rule 28 (Exp -> Term .)
    println         reduce using rule 28 (Exp -> Term .)
    prints          reduce using rule 28 (Exp -> Term .)
    read            reduce using rule 28 (Exp -> Term .)
    repeat          reduce using rule 28 (Exp -> Term .)
    }               reduce using rule 28 (Exp -> Term .)
    ]               reduce using rule 28 (Exp -> Term .)
    )               reduce using rule 28 (Exp -> Term .)
    sup             reduce using rule 28 (Exp -> Term .)
    inf             reduce using rule 28 (Exp -> Term .)
    supeq           reduce using rule 28 (Exp -> Term .)
    infeq           reduce using rule 28 (Exp -> Term .)
    eq              reduce using rule 28 (Exp -> Term .)
    diff            reduce using rule 28 (Exp -> Term .)
    and             reduce using rule 28 (Exp -> Term .)
    or              reduce using rule 28 (Exp -> Term .)
    *               shift and go to state 61
    /               shift and go to state 62


state 47

    (31) Term -> Factor .

    *               reduce using rule 31 (Term -> Factor .)
    /               reduce using rule 31 (Term -> Factor .)
    +               reduce using rule 31 (Term -> Factor .)
    -               reduce using rule 31 (Term -> Factor .)
    id              reduce using rule 31 (Term -> Factor .)
    print           reduce using rule 31 (Term -> Factor .)
    println         reduce using rule 31 (Term -> Factor .)
    prints          reduce using rule 31 (Term -> Factor .)
    read            reduce using rule 31 (Term -> Factor .)
    repeat          reduce using rule 31 (Term -> Factor .)
    }               reduce using rule 31 (Term -> Factor .)
    ]               reduce using rule 31 (Term -> Factor .)
    )               reduce using rule 31 (Term -> Factor .)
    sup             reduce using rule 31 (Term -> Factor .)
    inf             reduce using rule 31 (Term -> Factor .)
    supeq           reduce using rule 31 (Term -> Factor .)
    infeq           reduce using rule 31 (Term -> Factor .)
    eq              reduce using rule 31 (Term -> Factor .)
    diff            reduce using rule 31 (Term -> Factor .)
    and             reduce using rule 31 (Term -> Factor .)
    or              reduce using rule 31 (Term -> Factor .)


state 48

    (33) Factor -> num .

    *               reduce using rule 33 (Factor -> num .)
    /               reduce using rule 33 (Factor -> num .)
    +               reduce using rule 33 (Factor -> num .)
    -               reduce using rule 33 (Factor -> num .)
    id              reduce using rule 33 (Factor -> num .)
    print           reduce using rule 33 (Factor -> num .)
    println         reduce using rule 33 (Factor -> num .)
    prints          reduce using rule 33 (Factor -> num .)
    read            reduce using rule 33 (Factor -> num .)
    repeat          reduce using rule 33 (Factor -> num .)
    }               reduce using rule 33 (Factor -> num .)
    ]               reduce using rule 33 (Factor -> num .)
    )               reduce using rule 33 (Factor -> num .)
    sup             reduce using rule 33 (Factor -> num .)
    inf             reduce using rule 33 (Factor -> num .)
    supeq           reduce using rule 33 (Factor -> num .)
    infeq           reduce using rule 33 (Factor -> num .)
    eq              reduce using rule 33 (Factor -> num .)
    diff            reduce using rule 33 (Factor -> num .)
    and             reduce using rule 33 (Factor -> num .)
    or              reduce using rule 33 (Factor -> num .)


state 49

    (34) Factor -> ( . Cond )
    (37) Factor -> ( . Exp )
    (38) Cond -> . Cond and Cond
    (39) Cond -> . Cond or Cond
    (40) Cond -> . ( Cond and Cond )
    (41) Cond -> . ( Cond or Cond )
    (42) Cond -> . Exp sup Exp
    (43) Cond -> . Exp inf Exp
    (44) Cond -> . Exp supeq Exp
    (45) Cond -> . Exp infeq Exp
    (46) Cond -> . not Exp
    (47) Cond -> . Exp eq Exp
    (48) Cond -> . Exp diff Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 64
    Exp                            shift and go to state 65
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 50

    (24) Attr -> id [ Exp . ] = Exp
    (25) Attr -> id [ Exp . ] [ Exp ] = Exp
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    ]               shift and go to state 67
    +               shift and go to state 59
    -               shift and go to state 60


state 51

    (16) Print -> print ( Exp . )
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               shift and go to state 68
    +               shift and go to state 59
    -               shift and go to state 60


state 52

    (17) Println -> println ( Exp . )
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               shift and go to state 69
    +               shift and go to state 59
    -               shift and go to state 60


state 53

    (18) Prints -> prints ( string . )

    )               shift and go to state 70


state 54

    (13) Repeat -> RepeatS ( num . ) { Insts }

    )               shift and go to state 71


state 55

    (15) Read -> read ( id . )

    )               shift and go to state 72


state 56

    (19) Dcl -> int id [ num . ]
    (20) Dcl -> int id [ num . ] [ num ]

    ]               shift and go to state 73


state 57

    (22) Dcl -> int id = num .

    int             reduce using rule 22 (Dcl -> int id = num .)
    }               reduce using rule 22 (Dcl -> int id = num .)


state 58

    (35) Factor -> id [ . Exp ]
    (36) Factor -> id [ . Exp ] [ Exp ]
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 74
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 59

    (26) Exp -> Exp + . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Term                           shift and go to state 75
    Factor                         shift and go to state 47

state 60

    (27) Exp -> Exp - . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Term                           shift and go to state 76
    Factor                         shift and go to state 47

state 61

    (29) Term -> Term * . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Factor                         shift and go to state 77

state 62

    (30) Term -> Term / . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Factor                         shift and go to state 78

state 63

    (40) Cond -> ( . Cond and Cond )
    (41) Cond -> ( . Cond or Cond )
    (34) Factor -> ( . Cond )
    (37) Factor -> ( . Exp )
    (38) Cond -> . Cond and Cond
    (39) Cond -> . Cond or Cond
    (40) Cond -> . ( Cond and Cond )
    (41) Cond -> . ( Cond or Cond )
    (42) Cond -> . Exp sup Exp
    (43) Cond -> . Exp inf Exp
    (44) Cond -> . Exp supeq Exp
    (45) Cond -> . Exp infeq Exp
    (46) Cond -> . not Exp
    (47) Cond -> . Exp eq Exp
    (48) Cond -> . Exp diff Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 79
    Exp                            shift and go to state 65
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 64

    (34) Factor -> ( Cond . )
    (38) Cond -> Cond . and Cond
    (39) Cond -> Cond . or Cond

    )               shift and go to state 80
    and             shift and go to state 81
    or              shift and go to state 82


state 65

    (37) Factor -> ( Exp . )
    (42) Cond -> Exp . sup Exp
    (43) Cond -> Exp . inf Exp
    (44) Cond -> Exp . supeq Exp
    (45) Cond -> Exp . infeq Exp
    (47) Cond -> Exp . eq Exp
    (48) Cond -> Exp . diff Exp
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               shift and go to state 83
    sup             shift and go to state 84
    inf             shift and go to state 85
    supeq           shift and go to state 86
    infeq           shift and go to state 87
    eq              shift and go to state 88
    diff            shift and go to state 89
    +               shift and go to state 59
    -               shift and go to state 60


state 66

    (46) Cond -> not . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 90
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 67

    (24) Attr -> id [ Exp ] . = Exp
    (25) Attr -> id [ Exp ] . [ Exp ] = Exp

    =               shift and go to state 92
    [               shift and go to state 91


state 68

    (16) Print -> print ( Exp ) .

    id              reduce using rule 16 (Print -> print ( Exp ) .)
    print           reduce using rule 16 (Print -> print ( Exp ) .)
    println         reduce using rule 16 (Print -> print ( Exp ) .)
    prints          reduce using rule 16 (Print -> print ( Exp ) .)
    read            reduce using rule 16 (Print -> print ( Exp ) .)
    repeat          reduce using rule 16 (Print -> print ( Exp ) .)
    }               reduce using rule 16 (Print -> print ( Exp ) .)


state 69

    (17) Println -> println ( Exp ) .

    id              reduce using rule 17 (Println -> println ( Exp ) .)
    print           reduce using rule 17 (Println -> println ( Exp ) .)
    println         reduce using rule 17 (Println -> println ( Exp ) .)
    prints          reduce using rule 17 (Println -> println ( Exp ) .)
    read            reduce using rule 17 (Println -> println ( Exp ) .)
    repeat          reduce using rule 17 (Println -> println ( Exp ) .)
    }               reduce using rule 17 (Println -> println ( Exp ) .)


state 70

    (18) Prints -> prints ( string ) .

    id              reduce using rule 18 (Prints -> prints ( string ) .)
    print           reduce using rule 18 (Prints -> prints ( string ) .)
    println         reduce using rule 18 (Prints -> prints ( string ) .)
    prints          reduce using rule 18 (Prints -> prints ( string ) .)
    read            reduce using rule 18 (Prints -> prints ( string ) .)
    repeat          reduce using rule 18 (Prints -> prints ( string ) .)
    }               reduce using rule 18 (Prints -> prints ( string ) .)


state 71

    (13) Repeat -> RepeatS ( num ) . { Insts }

    {               shift and go to state 93


state 72

    (15) Read -> read ( id ) .

    id              reduce using rule 15 (Read -> read ( id ) .)
    print           reduce using rule 15 (Read -> read ( id ) .)
    println         reduce using rule 15 (Read -> read ( id ) .)
    prints          reduce using rule 15 (Read -> read ( id ) .)
    read            reduce using rule 15 (Read -> read ( id ) .)
    repeat          reduce using rule 15 (Read -> read ( id ) .)
    }               reduce using rule 15 (Read -> read ( id ) .)


state 73

    (19) Dcl -> int id [ num ] .
    (20) Dcl -> int id [ num ] . [ num ]

    int             reduce using rule 19 (Dcl -> int id [ num ] .)
    }               reduce using rule 19 (Dcl -> int id [ num ] .)
    [               shift and go to state 94


state 74

    (35) Factor -> id [ Exp . ]
    (36) Factor -> id [ Exp . ] [ Exp ]
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    ]               shift and go to state 95
    +               shift and go to state 59
    -               shift and go to state 60


state 75

    (26) Exp -> Exp + Term .
    (29) Term -> Term . * Factor
    (30) Term -> Term . / Factor

    +               reduce using rule 26 (Exp -> Exp + Term .)
    -               reduce using rule 26 (Exp -> Exp + Term .)
    id              reduce using rule 26 (Exp -> Exp + Term .)
    print           reduce using rule 26 (Exp -> Exp + Term .)
    println         reduce using rule 26 (Exp -> Exp + Term .)
    prints          reduce using rule 26 (Exp -> Exp + Term .)
    read            reduce using rule 26 (Exp -> Exp + Term .)
    repeat          reduce using rule 26 (Exp -> Exp + Term .)
    }               reduce using rule 26 (Exp -> Exp + Term .)
    ]               reduce using rule 26 (Exp -> Exp + Term .)
    )               reduce using rule 26 (Exp -> Exp + Term .)
    sup             reduce using rule 26 (Exp -> Exp + Term .)
    inf             reduce using rule 26 (Exp -> Exp + Term .)
    supeq           reduce using rule 26 (Exp -> Exp + Term .)
    infeq           reduce using rule 26 (Exp -> Exp + Term .)
    eq              reduce using rule 26 (Exp -> Exp + Term .)
    diff            reduce using rule 26 (Exp -> Exp + Term .)
    and             reduce using rule 26 (Exp -> Exp + Term .)
    or              reduce using rule 26 (Exp -> Exp + Term .)
    *               shift and go to state 61
    /               shift and go to state 62


state 76

    (27) Exp -> Exp - Term .
    (29) Term -> Term . * Factor
    (30) Term -> Term . / Factor

    +               reduce using rule 27 (Exp -> Exp - Term .)
    -               reduce using rule 27 (Exp -> Exp - Term .)
    id              reduce using rule 27 (Exp -> Exp - Term .)
    print           reduce using rule 27 (Exp -> Exp - Term .)
    println         reduce using rule 27 (Exp -> Exp - Term .)
    prints          reduce using rule 27 (Exp -> Exp - Term .)
    read            reduce using rule 27 (Exp -> Exp - Term .)
    repeat          reduce using rule 27 (Exp -> Exp - Term .)
    }               reduce using rule 27 (Exp -> Exp - Term .)
    ]               reduce using rule 27 (Exp -> Exp - Term .)
    )               reduce using rule 27 (Exp -> Exp - Term .)
    sup             reduce using rule 27 (Exp -> Exp - Term .)
    inf             reduce using rule 27 (Exp -> Exp - Term .)
    supeq           reduce using rule 27 (Exp -> Exp - Term .)
    infeq           reduce using rule 27 (Exp -> Exp - Term .)
    eq              reduce using rule 27 (Exp -> Exp - Term .)
    diff            reduce using rule 27 (Exp -> Exp - Term .)
    and             reduce using rule 27 (Exp -> Exp - Term .)
    or              reduce using rule 27 (Exp -> Exp - Term .)
    *               shift and go to state 61
    /               shift and go to state 62


state 77

    (29) Term -> Term * Factor .

    *               reduce using rule 29 (Term -> Term * Factor .)
    /               reduce using rule 29 (Term -> Term * Factor .)
    +               reduce using rule 29 (Term -> Term * Factor .)
    -               reduce using rule 29 (Term -> Term * Factor .)
    id              reduce using rule 29 (Term -> Term * Factor .)
    print           reduce using rule 29 (Term -> Term * Factor .)
    println         reduce using rule 29 (Term -> Term * Factor .)
    prints          reduce using rule 29 (Term -> Term * Factor .)
    read            reduce using rule 29 (Term -> Term * Factor .)
    repeat          reduce using rule 29 (Term -> Term * Factor .)
    }               reduce using rule 29 (Term -> Term * Factor .)
    ]               reduce using rule 29 (Term -> Term * Factor .)
    )               reduce using rule 29 (Term -> Term * Factor .)
    sup             reduce using rule 29 (Term -> Term * Factor .)
    inf             reduce using rule 29 (Term -> Term * Factor .)
    supeq           reduce using rule 29 (Term -> Term * Factor .)
    infeq           reduce using rule 29 (Term -> Term * Factor .)
    eq              reduce using rule 29 (Term -> Term * Factor .)
    diff            reduce using rule 29 (Term -> Term * Factor .)
    and             reduce using rule 29 (Term -> Term * Factor .)
    or              reduce using rule 29 (Term -> Term * Factor .)


state 78

    (30) Term -> Term / Factor .

    *               reduce using rule 30 (Term -> Term / Factor .)
    /               reduce using rule 30 (Term -> Term / Factor .)
    +               reduce using rule 30 (Term -> Term / Factor .)
    -               reduce using rule 30 (Term -> Term / Factor .)
    id              reduce using rule 30 (Term -> Term / Factor .)
    print           reduce using rule 30 (Term -> Term / Factor .)
    println         reduce using rule 30 (Term -> Term / Factor .)
    prints          reduce using rule 30 (Term -> Term / Factor .)
    read            reduce using rule 30 (Term -> Term / Factor .)
    repeat          reduce using rule 30 (Term -> Term / Factor .)
    }               reduce using rule 30 (Term -> Term / Factor .)
    ]               reduce using rule 30 (Term -> Term / Factor .)
    )               reduce using rule 30 (Term -> Term / Factor .)
    sup             reduce using rule 30 (Term -> Term / Factor .)
    inf             reduce using rule 30 (Term -> Term / Factor .)
    supeq           reduce using rule 30 (Term -> Term / Factor .)
    infeq           reduce using rule 30 (Term -> Term / Factor .)
    eq              reduce using rule 30 (Term -> Term / Factor .)
    diff            reduce using rule 30 (Term -> Term / Factor .)
    and             reduce using rule 30 (Term -> Term / Factor .)
    or              reduce using rule 30 (Term -> Term / Factor .)


state 79

    (40) Cond -> ( Cond . and Cond )
    (41) Cond -> ( Cond . or Cond )
    (34) Factor -> ( Cond . )
    (38) Cond -> Cond . and Cond
    (39) Cond -> Cond . or Cond

    and             shift and go to state 96
    or              shift and go to state 97
    )               shift and go to state 80


state 80

    (34) Factor -> ( Cond ) .

    *               reduce using rule 34 (Factor -> ( Cond ) .)
    /               reduce using rule 34 (Factor -> ( Cond ) .)
    +               reduce using rule 34 (Factor -> ( Cond ) .)
    -               reduce using rule 34 (Factor -> ( Cond ) .)
    id              reduce using rule 34 (Factor -> ( Cond ) .)
    print           reduce using rule 34 (Factor -> ( Cond ) .)
    println         reduce using rule 34 (Factor -> ( Cond ) .)
    prints          reduce using rule 34 (Factor -> ( Cond ) .)
    read            reduce using rule 34 (Factor -> ( Cond ) .)
    repeat          reduce using rule 34 (Factor -> ( Cond ) .)
    }               reduce using rule 34 (Factor -> ( Cond ) .)
    ]               reduce using rule 34 (Factor -> ( Cond ) .)
    )               reduce using rule 34 (Factor -> ( Cond ) .)
    sup             reduce using rule 34 (Factor -> ( Cond ) .)
    inf             reduce using rule 34 (Factor -> ( Cond ) .)
    supeq           reduce using rule 34 (Factor -> ( Cond ) .)
    infeq           reduce using rule 34 (Factor -> ( Cond ) .)
    eq              reduce using rule 34 (Factor -> ( Cond ) .)
    diff            reduce using rule 34 (Factor -> ( Cond ) .)
    and             reduce using rule 34 (Factor -> ( Cond ) .)
    or              reduce using rule 34 (Factor -> ( Cond ) .)


state 81

    (38) Cond -> Cond and . Cond
    (38) Cond -> . Cond and Cond
    (39) Cond -> . Cond or Cond
    (40) Cond -> . ( Cond and Cond )
    (41) Cond -> . ( Cond or Cond )
    (42) Cond -> . Exp sup Exp
    (43) Cond -> . Exp inf Exp
    (44) Cond -> . Exp supeq Exp
    (45) Cond -> . Exp infeq Exp
    (46) Cond -> . not Exp
    (47) Cond -> . Exp eq Exp
    (48) Cond -> . Exp diff Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 98
    Exp                            shift and go to state 99
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 82

    (39) Cond -> Cond or . Cond
    (38) Cond -> . Cond and Cond
    (39) Cond -> . Cond or Cond
    (40) Cond -> . ( Cond and Cond )
    (41) Cond -> . ( Cond or Cond )
    (42) Cond -> . Exp sup Exp
    (43) Cond -> . Exp inf Exp
    (44) Cond -> . Exp supeq Exp
    (45) Cond -> . Exp infeq Exp
    (46) Cond -> . not Exp
    (47) Cond -> . Exp eq Exp
    (48) Cond -> . Exp diff Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 100
    Exp                            shift and go to state 99
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 83

    (37) Factor -> ( Exp ) .

    *               reduce using rule 37 (Factor -> ( Exp ) .)
    /               reduce using rule 37 (Factor -> ( Exp ) .)
    +               reduce using rule 37 (Factor -> ( Exp ) .)
    -               reduce using rule 37 (Factor -> ( Exp ) .)
    id              reduce using rule 37 (Factor -> ( Exp ) .)
    print           reduce using rule 37 (Factor -> ( Exp ) .)
    println         reduce using rule 37 (Factor -> ( Exp ) .)
    prints          reduce using rule 37 (Factor -> ( Exp ) .)
    read            reduce using rule 37 (Factor -> ( Exp ) .)
    repeat          reduce using rule 37 (Factor -> ( Exp ) .)
    }               reduce using rule 37 (Factor -> ( Exp ) .)
    ]               reduce using rule 37 (Factor -> ( Exp ) .)
    )               reduce using rule 37 (Factor -> ( Exp ) .)
    sup             reduce using rule 37 (Factor -> ( Exp ) .)
    inf             reduce using rule 37 (Factor -> ( Exp ) .)
    supeq           reduce using rule 37 (Factor -> ( Exp ) .)
    infeq           reduce using rule 37 (Factor -> ( Exp ) .)
    eq              reduce using rule 37 (Factor -> ( Exp ) .)
    diff            reduce using rule 37 (Factor -> ( Exp ) .)
    and             reduce using rule 37 (Factor -> ( Exp ) .)
    or              reduce using rule 37 (Factor -> ( Exp ) .)


state 84

    (42) Cond -> Exp sup . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 101
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 85

    (43) Cond -> Exp inf . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 102
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 86

    (44) Cond -> Exp supeq . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 103
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 87

    (45) Cond -> Exp infeq . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 104
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 88

    (47) Cond -> Exp eq . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 105
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 89

    (48) Cond -> Exp diff . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 106
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 90

    (46) Cond -> not Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               reduce using rule 46 (Cond -> not Exp .)
    and             reduce using rule 46 (Cond -> not Exp .)
    or              reduce using rule 46 (Cond -> not Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 91

    (25) Attr -> id [ Exp ] [ . Exp ] = Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 107
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 92

    (24) Attr -> id [ Exp ] = . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 108
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 93

    (13) Repeat -> RepeatS ( num ) { . Insts }
    (6) Insts -> . Attr Insts
    (7) Insts -> . Print Insts
    (8) Insts -> . Println Insts
    (9) Insts -> . Prints Insts
    (10) Insts -> . Repeat Insts
    (11) Insts -> . Read Insts
    (12) Insts -> .
    (23) Attr -> . id = Exp
    (24) Attr -> . id [ Exp ] = Exp
    (25) Attr -> . id [ Exp ] [ Exp ] = Exp
    (16) Print -> . print ( Exp )
    (17) Println -> . println ( Exp )
    (18) Prints -> . prints ( string )
    (13) Repeat -> . RepeatS ( num ) { Insts }
    (15) Read -> . read ( id )
    (14) RepeatS -> . repeat

    }               reduce using rule 12 (Insts -> .)
    id              shift and go to state 18
    print           shift and go to state 19
    println         shift and go to state 20
    prints          shift and go to state 21
    read            shift and go to state 23
    repeat          shift and go to state 24

    RepeatS                        shift and go to state 22
    Insts                          shift and go to state 109
    Attr                           shift and go to state 12
    Print                          shift and go to state 13
    Println                        shift and go to state 14
    Prints                         shift and go to state 15
    Repeat                         shift and go to state 16
    Read                           shift and go to state 17

state 94

    (20) Dcl -> int id [ num ] [ . num ]

    num             shift and go to state 110


state 95

    (35) Factor -> id [ Exp ] .
    (36) Factor -> id [ Exp ] . [ Exp ]

    *               reduce using rule 35 (Factor -> id [ Exp ] .)
    /               reduce using rule 35 (Factor -> id [ Exp ] .)
    +               reduce using rule 35 (Factor -> id [ Exp ] .)
    -               reduce using rule 35 (Factor -> id [ Exp ] .)
    id              reduce using rule 35 (Factor -> id [ Exp ] .)
    print           reduce using rule 35 (Factor -> id [ Exp ] .)
    println         reduce using rule 35 (Factor -> id [ Exp ] .)
    prints          reduce using rule 35 (Factor -> id [ Exp ] .)
    read            reduce using rule 35 (Factor -> id [ Exp ] .)
    repeat          reduce using rule 35 (Factor -> id [ Exp ] .)
    }               reduce using rule 35 (Factor -> id [ Exp ] .)
    ]               reduce using rule 35 (Factor -> id [ Exp ] .)
    )               reduce using rule 35 (Factor -> id [ Exp ] .)
    sup             reduce using rule 35 (Factor -> id [ Exp ] .)
    inf             reduce using rule 35 (Factor -> id [ Exp ] .)
    supeq           reduce using rule 35 (Factor -> id [ Exp ] .)
    infeq           reduce using rule 35 (Factor -> id [ Exp ] .)
    eq              reduce using rule 35 (Factor -> id [ Exp ] .)
    diff            reduce using rule 35 (Factor -> id [ Exp ] .)
    and             reduce using rule 35 (Factor -> id [ Exp ] .)
    or              reduce using rule 35 (Factor -> id [ Exp ] .)
    [               shift and go to state 111


state 96

    (40) Cond -> ( Cond and . Cond )
    (38) Cond -> Cond and . Cond
    (38) Cond -> . Cond and Cond
    (39) Cond -> . Cond or Cond
    (40) Cond -> . ( Cond and Cond )
    (41) Cond -> . ( Cond or Cond )
    (42) Cond -> . Exp sup Exp
    (43) Cond -> . Exp inf Exp
    (44) Cond -> . Exp supeq Exp
    (45) Cond -> . Exp infeq Exp
    (46) Cond -> . not Exp
    (47) Cond -> . Exp eq Exp
    (48) Cond -> . Exp diff Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 112
    Exp                            shift and go to state 99
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 97

    (41) Cond -> ( Cond or . Cond )
    (39) Cond -> Cond or . Cond
    (38) Cond -> . Cond and Cond
    (39) Cond -> . Cond or Cond
    (40) Cond -> . ( Cond and Cond )
    (41) Cond -> . ( Cond or Cond )
    (42) Cond -> . Exp sup Exp
    (43) Cond -> . Exp inf Exp
    (44) Cond -> . Exp supeq Exp
    (45) Cond -> . Exp infeq Exp
    (46) Cond -> . not Exp
    (47) Cond -> . Exp eq Exp
    (48) Cond -> . Exp diff Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    (               shift and go to state 63
    not             shift and go to state 66
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 113
    Exp                            shift and go to state 99
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 98

    (38) Cond -> Cond and Cond .
    (38) Cond -> Cond . and Cond
    (39) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 38 (Cond -> Cond and Cond .)
    and             shift and go to state 81
    or              shift and go to state 82

  ! and             [ reduce using rule 38 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 38 (Cond -> Cond and Cond .) ]


state 99

    (42) Cond -> Exp . sup Exp
    (43) Cond -> Exp . inf Exp
    (44) Cond -> Exp . supeq Exp
    (45) Cond -> Exp . infeq Exp
    (47) Cond -> Exp . eq Exp
    (48) Cond -> Exp . diff Exp
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    sup             shift and go to state 84
    inf             shift and go to state 85
    supeq           shift and go to state 86
    infeq           shift and go to state 87
    eq              shift and go to state 88
    diff            shift and go to state 89
    +               shift and go to state 59
    -               shift and go to state 60


state 100

    (39) Cond -> Cond or Cond .
    (38) Cond -> Cond . and Cond
    (39) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 39 (Cond -> Cond or Cond .)
    and             shift and go to state 81
    or              shift and go to state 82

  ! and             [ reduce using rule 39 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 39 (Cond -> Cond or Cond .) ]


state 101

    (42) Cond -> Exp sup Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               reduce using rule 42 (Cond -> Exp sup Exp .)
    and             reduce using rule 42 (Cond -> Exp sup Exp .)
    or              reduce using rule 42 (Cond -> Exp sup Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 102

    (43) Cond -> Exp inf Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               reduce using rule 43 (Cond -> Exp inf Exp .)
    and             reduce using rule 43 (Cond -> Exp inf Exp .)
    or              reduce using rule 43 (Cond -> Exp inf Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 103

    (44) Cond -> Exp supeq Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               reduce using rule 44 (Cond -> Exp supeq Exp .)
    and             reduce using rule 44 (Cond -> Exp supeq Exp .)
    or              reduce using rule 44 (Cond -> Exp supeq Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 104

    (45) Cond -> Exp infeq Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               reduce using rule 45 (Cond -> Exp infeq Exp .)
    and             reduce using rule 45 (Cond -> Exp infeq Exp .)
    or              reduce using rule 45 (Cond -> Exp infeq Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 105

    (47) Cond -> Exp eq Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               reduce using rule 47 (Cond -> Exp eq Exp .)
    and             reduce using rule 47 (Cond -> Exp eq Exp .)
    or              reduce using rule 47 (Cond -> Exp eq Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 106

    (48) Cond -> Exp diff Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    )               reduce using rule 48 (Cond -> Exp diff Exp .)
    and             reduce using rule 48 (Cond -> Exp diff Exp .)
    or              reduce using rule 48 (Cond -> Exp diff Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 107

    (25) Attr -> id [ Exp ] [ Exp . ] = Exp
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    ]               shift and go to state 114
    +               shift and go to state 59
    -               shift and go to state 60


state 108

    (24) Attr -> id [ Exp ] = Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    id              reduce using rule 24 (Attr -> id [ Exp ] = Exp .)
    print           reduce using rule 24 (Attr -> id [ Exp ] = Exp .)
    println         reduce using rule 24 (Attr -> id [ Exp ] = Exp .)
    prints          reduce using rule 24 (Attr -> id [ Exp ] = Exp .)
    read            reduce using rule 24 (Attr -> id [ Exp ] = Exp .)
    repeat          reduce using rule 24 (Attr -> id [ Exp ] = Exp .)
    }               reduce using rule 24 (Attr -> id [ Exp ] = Exp .)
    +               shift and go to state 59
    -               shift and go to state 60


state 109

    (13) Repeat -> RepeatS ( num ) { Insts . }

    }               shift and go to state 115


state 110

    (20) Dcl -> int id [ num ] [ num . ]

    ]               shift and go to state 116


state 111

    (36) Factor -> id [ Exp ] [ . Exp ]
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 117
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 112

    (40) Cond -> ( Cond and Cond . )
    (38) Cond -> Cond and Cond .
    (38) Cond -> Cond . and Cond
    (39) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 118
    and             shift and go to state 81
    or              shift and go to state 82

  ! and             [ reduce using rule 38 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 38 (Cond -> Cond and Cond .) ]
  ! )               [ reduce using rule 38 (Cond -> Cond and Cond .) ]


state 113

    (41) Cond -> ( Cond or Cond . )
    (39) Cond -> Cond or Cond .
    (38) Cond -> Cond . and Cond
    (39) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 119
    and             shift and go to state 81
    or              shift and go to state 82

  ! and             [ reduce using rule 39 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 39 (Cond -> Cond or Cond .) ]
  ! )               [ reduce using rule 39 (Cond -> Cond or Cond .) ]


state 114

    (25) Attr -> id [ Exp ] [ Exp ] . = Exp

    =               shift and go to state 120


state 115

    (13) Repeat -> RepeatS ( num ) { Insts } .

    id              reduce using rule 13 (Repeat -> RepeatS ( num ) { Insts } .)
    print           reduce using rule 13 (Repeat -> RepeatS ( num ) { Insts } .)
    println         reduce using rule 13 (Repeat -> RepeatS ( num ) { Insts } .)
    prints          reduce using rule 13 (Repeat -> RepeatS ( num ) { Insts } .)
    read            reduce using rule 13 (Repeat -> RepeatS ( num ) { Insts } .)
    repeat          reduce using rule 13 (Repeat -> RepeatS ( num ) { Insts } .)
    }               reduce using rule 13 (Repeat -> RepeatS ( num ) { Insts } .)


state 116

    (20) Dcl -> int id [ num ] [ num ] .

    int             reduce using rule 20 (Dcl -> int id [ num ] [ num ] .)
    }               reduce using rule 20 (Dcl -> int id [ num ] [ num ] .)


state 117

    (36) Factor -> id [ Exp ] [ Exp . ]
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    ]               shift and go to state 121
    +               shift and go to state 59
    -               shift and go to state 60


state 118

    (40) Cond -> ( Cond and Cond ) .

    )               reduce using rule 40 (Cond -> ( Cond and Cond ) .)
    and             reduce using rule 40 (Cond -> ( Cond and Cond ) .)
    or              reduce using rule 40 (Cond -> ( Cond and Cond ) .)


state 119

    (41) Cond -> ( Cond or Cond ) .

    )               reduce using rule 41 (Cond -> ( Cond or Cond ) .)
    and             reduce using rule 41 (Cond -> ( Cond or Cond ) .)
    or              reduce using rule 41 (Cond -> ( Cond or Cond ) .)


state 120

    (25) Attr -> id [ Exp ] [ Exp ] = . Exp
    (26) Exp -> . Exp + Term
    (27) Exp -> . Exp - Term
    (28) Exp -> . Term
    (29) Term -> . Term * Factor
    (30) Term -> . Term / Factor
    (31) Term -> . Factor
    (32) Factor -> . id
    (33) Factor -> . num
    (34) Factor -> . ( Cond )
    (35) Factor -> . id [ Exp ]
    (36) Factor -> . id [ Exp ] [ Exp ]
    (37) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 122
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 121

    (36) Factor -> id [ Exp ] [ Exp ] .

    *               reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    /               reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    +               reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    -               reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    id              reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    print           reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    println         reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    prints          reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    read            reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    repeat          reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    }               reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    ]               reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    )               reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    sup             reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    inf             reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    supeq           reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    infeq           reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    eq              reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    diff            reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    and             reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)
    or              reduce using rule 36 (Factor -> id [ Exp ] [ Exp ] .)


state 122

    (25) Attr -> id [ Exp ] [ Exp ] = Exp .
    (26) Exp -> Exp . + Term
    (27) Exp -> Exp . - Term

    id              reduce using rule 25 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 25 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 25 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    prints          reduce using rule 25 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 25 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 25 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    }               reduce using rule 25 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 59
    -               shift and go to state 60

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for and in state 98 resolved as shift
WARNING: shift/reduce conflict for or in state 98 resolved as shift
WARNING: shift/reduce conflict for and in state 100 resolved as shift
WARNING: shift/reduce conflict for or in state 100 resolved as shift
WARNING: shift/reduce conflict for ) in state 112 resolved as shift
WARNING: shift/reduce conflict for and in state 112 resolved as shift
WARNING: shift/reduce conflict for or in state 112 resolved as shift
WARNING: shift/reduce conflict for ) in state 113 resolved as shift
WARNING: shift/reduce conflict for and in state 113 resolved as shift
WARNING: shift/reduce conflict for or in state 113 resolved as shift
