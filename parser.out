Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    numR

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> GlobalBlc MainBlc DefBlcs
Rule 2     DefBlcs -> DefBlcs DefBlc
Rule 3     DefBlcs -> <empty>
Rule 4     DefBlc -> id { VarBlcs Insts }
Rule 5     VarBlcs -> VarBlcs BlcInt
Rule 6     VarBlcs -> <empty>
Rule 7     GlobalBlc -> global { VarBlcs }
Rule 8     GlobalBlc -> <empty>
Rule 9     Dcls -> Dcls Dcl
Rule 10    Dcls -> <empty>
Rule 11    MainBlc -> main { VarBlcs Insts }
Rule 12    Insts -> Insts Inst
Rule 13    Insts -> <empty>
Rule 14    Inst -> Attr
Rule 15    Inst -> Return
Rule 16    Inst -> Exp
Rule 17    Inst -> Print
Rule 18    Inst -> Println
Rule 19    Inst -> Prints
Rule 20    Inst -> Repeat
Rule 21    Inst -> For
Rule 22    Inst -> While
Rule 23    Inst -> Read
Rule 24    Inst -> If
Rule 25    Repeat -> RepeatS ( num ) { Insts }
Rule 26    RepeatS -> repeat
Rule 27    For -> for ( Insts ; Cond ; Insts ) { Insts }
Rule 28    While -> while ( Cond ) { Insts }
Rule 29    Read -> read ( id )
Rule 30    Print -> print ( Exp )
Rule 31    Println -> println ( Exp )
Rule 32    Prints -> prints ( string )
Rule 33    BlcInt -> int { Dcls }
Rule 34    Dcl -> id [ num ]
Rule 35    Dcl -> id [ num ] [ num ]
Rule 36    Dcl -> id
Rule 37    Dcl -> id = num
Rule 38    Attr -> id = Exp
Rule 39    Attr -> id [ Exp ] = Exp
Rule 40    Attr -> id [ Exp ] [ Exp ] = Exp
Rule 41    Attr -> gid = Exp
Rule 42    Attr -> gid [ Exp ] = Exp
Rule 43    Attr -> gid [ Exp ] [ Exp ] = Exp
Rule 44    Return -> return ( Exp )
Rule 45    If -> if ( Cond ) { Insts }
Rule 46    If -> if ( Cond ) Inst
Rule 47    If -> if ( Cond ) { Insts } else { Insts }
Rule 48    Exp -> Exp + Term
Rule 49    Exp -> Exp - Term
Rule 50    Exp -> id addeq Term
Rule 51    Exp -> id subeq Term
Rule 52    Exp -> id addeql Term
Rule 53    Exp -> id subeql Term
Rule 54    Exp -> gid addeq Term
Rule 55    Exp -> gid subeq Term
Rule 56    Exp -> gid addeql Term
Rule 57    Exp -> gid subeql Term
Rule 58    Exp -> Term
Rule 59    Term -> Term * Factor
Rule 60    Term -> Term / Factor
Rule 61    Term -> Term % Factor
Rule 62    Term -> id muleq Factor
Rule 63    Term -> id diveq Factor
Rule 64    Term -> id modeq Factor
Rule 65    Term -> id muleql Factor
Rule 66    Term -> id diveql Factor
Rule 67    Term -> id modeql Factor
Rule 68    Term -> gid muleq Factor
Rule 69    Term -> gid diveq Factor
Rule 70    Term -> gid modeq Factor
Rule 71    Term -> gid muleql Factor
Rule 72    Term -> gid diveql Factor
Rule 73    Term -> gid modeql Factor
Rule 74    Term -> Factor
Rule 75    Factor -> id plus
Rule 76    Factor -> id plusl
Rule 77    Factor -> id minus
Rule 78    Factor -> id minusl
Rule 79    Factor -> gid plus
Rule 80    Factor -> gid plusl
Rule 81    Factor -> gid minus
Rule 82    Factor -> gid minusl
Rule 83    Factor -> id
Rule 84    Factor -> gid
Rule 85    Factor -> num
Rule 86    Factor -> id ( )
Rule 87    Factor -> ( Cond )
Rule 88    Factor -> id [ Exp ]
Rule 89    Factor -> id [ Exp ] [ Exp ]
Rule 90    Factor -> gid [ Exp ]
Rule 91    Factor -> gid [ Exp ] [ Exp ]
Rule 92    Factor -> ( Exp )
Rule 93    Cond -> Cond and Cond
Rule 94    Cond -> Cond or Cond
Rule 95    Cond -> ( Cond and Cond )
Rule 96    Cond -> ( Cond or Cond )
Rule 97    Cond -> Exp sup Exp
Rule 98    Cond -> Exp inf Exp
Rule 99    Cond -> Exp supeq Exp
Rule 100   Cond -> Exp infeq Exp
Rule 101   Cond -> not Exp
Rule 102   Cond -> Exp eq Exp
Rule 103   Cond -> Exp diff Exp

Terminals, with rules where they appear

%                    : 61
(                    : 25 27 28 29 30 31 32 44 45 46 47 86 87 92 95 96
)                    : 25 27 28 29 30 31 32 44 45 46 47 86 87 92 95 96
*                    : 59
+                    : 48
-                    : 49
/                    : 60
;                    : 27 27
=                    : 37 38 39 40 41 42 43
[                    : 34 35 35 39 40 40 42 43 43 88 89 89 90 91 91
]                    : 34 35 35 39 40 40 42 43 43 88 89 89 90 91 91
addeq                : 50 54
addeql               : 52 56
and                  : 93 95
diff                 : 103
diveq                : 63 69
diveql               : 66 72
else                 : 47
eq                   : 102
error                : 
for                  : 27
gid                  : 41 42 43 54 55 56 57 68 69 70 71 72 73 79 80 81 82 84 90 91
global               : 7
id                   : 4 29 34 35 36 37 38 39 40 50 51 52 53 62 63 64 65 66 67 75 76 77 78 83 86 88 89
if                   : 45 46 47
inf                  : 98
infeq                : 100
int                  : 33
main                 : 11
minus                : 77 81
minusl               : 78 82
modeq                : 64 70
modeql               : 67 73
muleq                : 62 68
muleql               : 65 71
not                  : 101
num                  : 25 34 35 35 37 85
numR                 : 
or                   : 94 96
plus                 : 75 79
plusl                : 76 80
print                : 30
println              : 31
prints               : 32
read                 : 29
repeat               : 26
return               : 44
string               : 32
subeq                : 51 55
subeql               : 53 57
sup                  : 97
supeq                : 99
while                : 28
{                    : 4 7 11 25 27 28 33 45 47 47
}                    : 4 7 11 25 27 28 33 45 47 47

Nonterminals, with rules where they appear

Attr                 : 14
BlcInt               : 5
Cond                 : 27 28 45 46 47 87 93 93 94 94 95 95 96 96
Dcl                  : 9
Dcls                 : 9 33
DefBlc               : 2
DefBlcs              : 1 2
Exp                  : 16 30 31 38 39 39 40 40 40 41 42 42 43 43 43 44 48 49 88 89 89 90 91 91 92 97 97 98 98 99 99 100 100 101 102 102 103 103
Factor               : 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74
For                  : 21
GlobalBlc            : 1
If                   : 24
Inst                 : 12 46
Insts                : 4 11 12 25 27 27 27 28 45 47 47
MainBlc              : 1
Print                : 17
Println              : 18
Prints               : 19
Prog                 : 0
Read                 : 23
Repeat               : 20
RepeatS              : 25
Return               : 15
Term                 : 48 49 50 51 52 53 54 55 56 57 58 59 60 61
VarBlcs              : 4 5 7 11
While                : 22

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . GlobalBlc MainBlc DefBlcs
    (7) GlobalBlc -> . global { VarBlcs }
    (8) GlobalBlc -> .

    global          shift and go to state 3
    main            reduce using rule 8 (GlobalBlc -> .)

    Prog                           shift and go to state 1
    GlobalBlc                      shift and go to state 2

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> GlobalBlc . MainBlc DefBlcs
    (11) MainBlc -> . main { VarBlcs Insts }

    main            shift and go to state 5

    MainBlc                        shift and go to state 4

state 3

    (7) GlobalBlc -> global . { VarBlcs }

    {               shift and go to state 6


state 4

    (1) Prog -> GlobalBlc MainBlc . DefBlcs
    (2) DefBlcs -> . DefBlcs DefBlc
    (3) DefBlcs -> .

    id              reduce using rule 3 (DefBlcs -> .)
    $end            reduce using rule 3 (DefBlcs -> .)

    DefBlcs                        shift and go to state 7

state 5

    (11) MainBlc -> main . { VarBlcs Insts }

    {               shift and go to state 8


state 6

    (7) GlobalBlc -> global { . VarBlcs }
    (5) VarBlcs -> . VarBlcs BlcInt
    (6) VarBlcs -> .

    }               reduce using rule 6 (VarBlcs -> .)
    int             reduce using rule 6 (VarBlcs -> .)

    VarBlcs                        shift and go to state 9

state 7

    (1) Prog -> GlobalBlc MainBlc DefBlcs .
    (2) DefBlcs -> DefBlcs . DefBlc
    (4) DefBlc -> . id { VarBlcs Insts }

    $end            reduce using rule 1 (Prog -> GlobalBlc MainBlc DefBlcs .)
    id              shift and go to state 11

    DefBlc                         shift and go to state 10

state 8

    (11) MainBlc -> main { . VarBlcs Insts }
    (5) VarBlcs -> . VarBlcs BlcInt
    (6) VarBlcs -> .

    int             reduce using rule 6 (VarBlcs -> .)
    }               reduce using rule 6 (VarBlcs -> .)
    id              reduce using rule 6 (VarBlcs -> .)
    gid             reduce using rule 6 (VarBlcs -> .)
    return          reduce using rule 6 (VarBlcs -> .)
    print           reduce using rule 6 (VarBlcs -> .)
    println         reduce using rule 6 (VarBlcs -> .)
    prints          reduce using rule 6 (VarBlcs -> .)
    for             reduce using rule 6 (VarBlcs -> .)
    while           reduce using rule 6 (VarBlcs -> .)
    read            reduce using rule 6 (VarBlcs -> .)
    if              reduce using rule 6 (VarBlcs -> .)
    repeat          reduce using rule 6 (VarBlcs -> .)
    num             reduce using rule 6 (VarBlcs -> .)
    (               reduce using rule 6 (VarBlcs -> .)

    VarBlcs                        shift and go to state 12

state 9

    (7) GlobalBlc -> global { VarBlcs . }
    (5) VarBlcs -> VarBlcs . BlcInt
    (33) BlcInt -> . int { Dcls }

    }               shift and go to state 13
    int             shift and go to state 15

    BlcInt                         shift and go to state 14

state 10

    (2) DefBlcs -> DefBlcs DefBlc .

    id              reduce using rule 2 (DefBlcs -> DefBlcs DefBlc .)
    $end            reduce using rule 2 (DefBlcs -> DefBlcs DefBlc .)


state 11

    (4) DefBlc -> id . { VarBlcs Insts }

    {               shift and go to state 16


state 12

    (11) MainBlc -> main { VarBlcs . Insts }
    (5) VarBlcs -> VarBlcs . BlcInt
    (12) Insts -> . Insts Inst
    (13) Insts -> .
    (33) BlcInt -> . int { Dcls }

    }               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)
    int             shift and go to state 15

    Insts                          shift and go to state 17
    BlcInt                         shift and go to state 14

state 13

    (7) GlobalBlc -> global { VarBlcs } .

    main            reduce using rule 7 (GlobalBlc -> global { VarBlcs } .)


state 14

    (5) VarBlcs -> VarBlcs BlcInt .

    }               reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    int             reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    id              reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    gid             reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    return          reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    print           reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    println         reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    prints          reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    for             reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    while           reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    read            reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    if              reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    repeat          reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    num             reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    (               reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)


state 15

    (33) BlcInt -> int . { Dcls }

    {               shift and go to state 18


state 16

    (4) DefBlc -> id { . VarBlcs Insts }
    (5) VarBlcs -> . VarBlcs BlcInt
    (6) VarBlcs -> .

    int             reduce using rule 6 (VarBlcs -> .)
    }               reduce using rule 6 (VarBlcs -> .)
    id              reduce using rule 6 (VarBlcs -> .)
    gid             reduce using rule 6 (VarBlcs -> .)
    return          reduce using rule 6 (VarBlcs -> .)
    print           reduce using rule 6 (VarBlcs -> .)
    println         reduce using rule 6 (VarBlcs -> .)
    prints          reduce using rule 6 (VarBlcs -> .)
    for             reduce using rule 6 (VarBlcs -> .)
    while           reduce using rule 6 (VarBlcs -> .)
    read            reduce using rule 6 (VarBlcs -> .)
    if              reduce using rule 6 (VarBlcs -> .)
    repeat          reduce using rule 6 (VarBlcs -> .)
    num             reduce using rule 6 (VarBlcs -> .)
    (               reduce using rule 6 (VarBlcs -> .)

    VarBlcs                        shift and go to state 19

state 17

    (11) MainBlc -> main { VarBlcs Insts . }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    }               shift and go to state 20
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 18

    (33) BlcInt -> int { . Dcls }
    (9) Dcls -> . Dcls Dcl
    (10) Dcls -> .

    }               reduce using rule 10 (Dcls -> .)
    id              reduce using rule 10 (Dcls -> .)

    Dcls                           shift and go to state 49

state 19

    (4) DefBlc -> id { VarBlcs . Insts }
    (5) VarBlcs -> VarBlcs . BlcInt
    (12) Insts -> . Insts Inst
    (13) Insts -> .
    (33) BlcInt -> . int { Dcls }

    }               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)
    int             shift and go to state 15

    Insts                          shift and go to state 50
    BlcInt                         shift and go to state 14

state 20

    (11) MainBlc -> main { VarBlcs Insts } .

    id              reduce using rule 11 (MainBlc -> main { VarBlcs Insts } .)
    $end            reduce using rule 11 (MainBlc -> main { VarBlcs Insts } .)


state 21

    (12) Insts -> Insts Inst .

    }               reduce using rule 12 (Insts -> Insts Inst .)
    id              reduce using rule 12 (Insts -> Insts Inst .)
    gid             reduce using rule 12 (Insts -> Insts Inst .)
    return          reduce using rule 12 (Insts -> Insts Inst .)
    print           reduce using rule 12 (Insts -> Insts Inst .)
    println         reduce using rule 12 (Insts -> Insts Inst .)
    prints          reduce using rule 12 (Insts -> Insts Inst .)
    for             reduce using rule 12 (Insts -> Insts Inst .)
    while           reduce using rule 12 (Insts -> Insts Inst .)
    read            reduce using rule 12 (Insts -> Insts Inst .)
    if              reduce using rule 12 (Insts -> Insts Inst .)
    repeat          reduce using rule 12 (Insts -> Insts Inst .)
    num             reduce using rule 12 (Insts -> Insts Inst .)
    (               reduce using rule 12 (Insts -> Insts Inst .)
    ;               reduce using rule 12 (Insts -> Insts Inst .)
    )               reduce using rule 12 (Insts -> Insts Inst .)


state 22

    (14) Inst -> Attr .

    }               reduce using rule 14 (Inst -> Attr .)
    id              reduce using rule 14 (Inst -> Attr .)
    gid             reduce using rule 14 (Inst -> Attr .)
    return          reduce using rule 14 (Inst -> Attr .)
    print           reduce using rule 14 (Inst -> Attr .)
    println         reduce using rule 14 (Inst -> Attr .)
    prints          reduce using rule 14 (Inst -> Attr .)
    for             reduce using rule 14 (Inst -> Attr .)
    while           reduce using rule 14 (Inst -> Attr .)
    read            reduce using rule 14 (Inst -> Attr .)
    if              reduce using rule 14 (Inst -> Attr .)
    repeat          reduce using rule 14 (Inst -> Attr .)
    num             reduce using rule 14 (Inst -> Attr .)
    (               reduce using rule 14 (Inst -> Attr .)
    ;               reduce using rule 14 (Inst -> Attr .)
    )               reduce using rule 14 (Inst -> Attr .)


state 23

    (15) Inst -> Return .

    }               reduce using rule 15 (Inst -> Return .)
    id              reduce using rule 15 (Inst -> Return .)
    gid             reduce using rule 15 (Inst -> Return .)
    return          reduce using rule 15 (Inst -> Return .)
    print           reduce using rule 15 (Inst -> Return .)
    println         reduce using rule 15 (Inst -> Return .)
    prints          reduce using rule 15 (Inst -> Return .)
    for             reduce using rule 15 (Inst -> Return .)
    while           reduce using rule 15 (Inst -> Return .)
    read            reduce using rule 15 (Inst -> Return .)
    if              reduce using rule 15 (Inst -> Return .)
    repeat          reduce using rule 15 (Inst -> Return .)
    num             reduce using rule 15 (Inst -> Return .)
    (               reduce using rule 15 (Inst -> Return .)
    ;               reduce using rule 15 (Inst -> Return .)
    )               reduce using rule 15 (Inst -> Return .)


state 24

    (16) Inst -> Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    }               reduce using rule 16 (Inst -> Exp .)
    id              reduce using rule 16 (Inst -> Exp .)
    gid             reduce using rule 16 (Inst -> Exp .)
    return          reduce using rule 16 (Inst -> Exp .)
    print           reduce using rule 16 (Inst -> Exp .)
    println         reduce using rule 16 (Inst -> Exp .)
    prints          reduce using rule 16 (Inst -> Exp .)
    for             reduce using rule 16 (Inst -> Exp .)
    while           reduce using rule 16 (Inst -> Exp .)
    read            reduce using rule 16 (Inst -> Exp .)
    if              reduce using rule 16 (Inst -> Exp .)
    repeat          reduce using rule 16 (Inst -> Exp .)
    num             reduce using rule 16 (Inst -> Exp .)
    (               reduce using rule 16 (Inst -> Exp .)
    ;               reduce using rule 16 (Inst -> Exp .)
    )               reduce using rule 16 (Inst -> Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 25

    (17) Inst -> Print .

    }               reduce using rule 17 (Inst -> Print .)
    id              reduce using rule 17 (Inst -> Print .)
    gid             reduce using rule 17 (Inst -> Print .)
    return          reduce using rule 17 (Inst -> Print .)
    print           reduce using rule 17 (Inst -> Print .)
    println         reduce using rule 17 (Inst -> Print .)
    prints          reduce using rule 17 (Inst -> Print .)
    for             reduce using rule 17 (Inst -> Print .)
    while           reduce using rule 17 (Inst -> Print .)
    read            reduce using rule 17 (Inst -> Print .)
    if              reduce using rule 17 (Inst -> Print .)
    repeat          reduce using rule 17 (Inst -> Print .)
    num             reduce using rule 17 (Inst -> Print .)
    (               reduce using rule 17 (Inst -> Print .)
    ;               reduce using rule 17 (Inst -> Print .)
    )               reduce using rule 17 (Inst -> Print .)


state 26

    (18) Inst -> Println .

    }               reduce using rule 18 (Inst -> Println .)
    id              reduce using rule 18 (Inst -> Println .)
    gid             reduce using rule 18 (Inst -> Println .)
    return          reduce using rule 18 (Inst -> Println .)
    print           reduce using rule 18 (Inst -> Println .)
    println         reduce using rule 18 (Inst -> Println .)
    prints          reduce using rule 18 (Inst -> Println .)
    for             reduce using rule 18 (Inst -> Println .)
    while           reduce using rule 18 (Inst -> Println .)
    read            reduce using rule 18 (Inst -> Println .)
    if              reduce using rule 18 (Inst -> Println .)
    repeat          reduce using rule 18 (Inst -> Println .)
    num             reduce using rule 18 (Inst -> Println .)
    (               reduce using rule 18 (Inst -> Println .)
    ;               reduce using rule 18 (Inst -> Println .)
    )               reduce using rule 18 (Inst -> Println .)


state 27

    (19) Inst -> Prints .

    }               reduce using rule 19 (Inst -> Prints .)
    id              reduce using rule 19 (Inst -> Prints .)
    gid             reduce using rule 19 (Inst -> Prints .)
    return          reduce using rule 19 (Inst -> Prints .)
    print           reduce using rule 19 (Inst -> Prints .)
    println         reduce using rule 19 (Inst -> Prints .)
    prints          reduce using rule 19 (Inst -> Prints .)
    for             reduce using rule 19 (Inst -> Prints .)
    while           reduce using rule 19 (Inst -> Prints .)
    read            reduce using rule 19 (Inst -> Prints .)
    if              reduce using rule 19 (Inst -> Prints .)
    repeat          reduce using rule 19 (Inst -> Prints .)
    num             reduce using rule 19 (Inst -> Prints .)
    (               reduce using rule 19 (Inst -> Prints .)
    ;               reduce using rule 19 (Inst -> Prints .)
    )               reduce using rule 19 (Inst -> Prints .)


state 28

    (20) Inst -> Repeat .

    }               reduce using rule 20 (Inst -> Repeat .)
    id              reduce using rule 20 (Inst -> Repeat .)
    gid             reduce using rule 20 (Inst -> Repeat .)
    return          reduce using rule 20 (Inst -> Repeat .)
    print           reduce using rule 20 (Inst -> Repeat .)
    println         reduce using rule 20 (Inst -> Repeat .)
    prints          reduce using rule 20 (Inst -> Repeat .)
    for             reduce using rule 20 (Inst -> Repeat .)
    while           reduce using rule 20 (Inst -> Repeat .)
    read            reduce using rule 20 (Inst -> Repeat .)
    if              reduce using rule 20 (Inst -> Repeat .)
    repeat          reduce using rule 20 (Inst -> Repeat .)
    num             reduce using rule 20 (Inst -> Repeat .)
    (               reduce using rule 20 (Inst -> Repeat .)
    ;               reduce using rule 20 (Inst -> Repeat .)
    )               reduce using rule 20 (Inst -> Repeat .)


state 29

    (21) Inst -> For .

    }               reduce using rule 21 (Inst -> For .)
    id              reduce using rule 21 (Inst -> For .)
    gid             reduce using rule 21 (Inst -> For .)
    return          reduce using rule 21 (Inst -> For .)
    print           reduce using rule 21 (Inst -> For .)
    println         reduce using rule 21 (Inst -> For .)
    prints          reduce using rule 21 (Inst -> For .)
    for             reduce using rule 21 (Inst -> For .)
    while           reduce using rule 21 (Inst -> For .)
    read            reduce using rule 21 (Inst -> For .)
    if              reduce using rule 21 (Inst -> For .)
    repeat          reduce using rule 21 (Inst -> For .)
    num             reduce using rule 21 (Inst -> For .)
    (               reduce using rule 21 (Inst -> For .)
    ;               reduce using rule 21 (Inst -> For .)
    )               reduce using rule 21 (Inst -> For .)


state 30

    (22) Inst -> While .

    }               reduce using rule 22 (Inst -> While .)
    id              reduce using rule 22 (Inst -> While .)
    gid             reduce using rule 22 (Inst -> While .)
    return          reduce using rule 22 (Inst -> While .)
    print           reduce using rule 22 (Inst -> While .)
    println         reduce using rule 22 (Inst -> While .)
    prints          reduce using rule 22 (Inst -> While .)
    for             reduce using rule 22 (Inst -> While .)
    while           reduce using rule 22 (Inst -> While .)
    read            reduce using rule 22 (Inst -> While .)
    if              reduce using rule 22 (Inst -> While .)
    repeat          reduce using rule 22 (Inst -> While .)
    num             reduce using rule 22 (Inst -> While .)
    (               reduce using rule 22 (Inst -> While .)
    ;               reduce using rule 22 (Inst -> While .)
    )               reduce using rule 22 (Inst -> While .)


state 31

    (23) Inst -> Read .

    }               reduce using rule 23 (Inst -> Read .)
    id              reduce using rule 23 (Inst -> Read .)
    gid             reduce using rule 23 (Inst -> Read .)
    return          reduce using rule 23 (Inst -> Read .)
    print           reduce using rule 23 (Inst -> Read .)
    println         reduce using rule 23 (Inst -> Read .)
    prints          reduce using rule 23 (Inst -> Read .)
    for             reduce using rule 23 (Inst -> Read .)
    while           reduce using rule 23 (Inst -> Read .)
    read            reduce using rule 23 (Inst -> Read .)
    if              reduce using rule 23 (Inst -> Read .)
    repeat          reduce using rule 23 (Inst -> Read .)
    num             reduce using rule 23 (Inst -> Read .)
    (               reduce using rule 23 (Inst -> Read .)
    ;               reduce using rule 23 (Inst -> Read .)
    )               reduce using rule 23 (Inst -> Read .)


state 32

    (24) Inst -> If .

    }               reduce using rule 24 (Inst -> If .)
    id              reduce using rule 24 (Inst -> If .)
    gid             reduce using rule 24 (Inst -> If .)
    return          reduce using rule 24 (Inst -> If .)
    print           reduce using rule 24 (Inst -> If .)
    println         reduce using rule 24 (Inst -> If .)
    prints          reduce using rule 24 (Inst -> If .)
    for             reduce using rule 24 (Inst -> If .)
    while           reduce using rule 24 (Inst -> If .)
    read            reduce using rule 24 (Inst -> If .)
    if              reduce using rule 24 (Inst -> If .)
    repeat          reduce using rule 24 (Inst -> If .)
    num             reduce using rule 24 (Inst -> If .)
    (               reduce using rule 24 (Inst -> If .)
    ;               reduce using rule 24 (Inst -> If .)
    )               reduce using rule 24 (Inst -> If .)


state 33

    (38) Attr -> id . = Exp
    (39) Attr -> id . [ Exp ] = Exp
    (40) Attr -> id . [ Exp ] [ Exp ] = Exp
    (50) Exp -> id . addeq Term
    (51) Exp -> id . subeq Term
    (52) Exp -> id . addeql Term
    (53) Exp -> id . subeql Term
    (62) Term -> id . muleq Factor
    (63) Term -> id . diveq Factor
    (64) Term -> id . modeq Factor
    (65) Term -> id . muleql Factor
    (66) Term -> id . diveql Factor
    (67) Term -> id . modeql Factor
    (75) Factor -> id . plus
    (76) Factor -> id . plusl
    (77) Factor -> id . minus
    (78) Factor -> id . minusl
    (83) Factor -> id .
    (86) Factor -> id . ( )
    (88) Factor -> id . [ Exp ]
    (89) Factor -> id . [ Exp ] [ Exp ]

  ! shift/reduce conflict for ( resolved as shift
    =               shift and go to state 53
    [               shift and go to state 54
    addeq           shift and go to state 55
    subeq           shift and go to state 56
    addeql          shift and go to state 57
    subeql          shift and go to state 58
    muleq           shift and go to state 59
    diveq           shift and go to state 60
    modeq           shift and go to state 61
    muleql          shift and go to state 62
    diveql          shift and go to state 63
    modeql          shift and go to state 64
    plus            shift and go to state 65
    plusl           shift and go to state 66
    minus           shift and go to state 67
    minusl          shift and go to state 68
    *               reduce using rule 83 (Factor -> id .)
    /               reduce using rule 83 (Factor -> id .)
    %               reduce using rule 83 (Factor -> id .)
    +               reduce using rule 83 (Factor -> id .)
    -               reduce using rule 83 (Factor -> id .)
    }               reduce using rule 83 (Factor -> id .)
    id              reduce using rule 83 (Factor -> id .)
    gid             reduce using rule 83 (Factor -> id .)
    return          reduce using rule 83 (Factor -> id .)
    print           reduce using rule 83 (Factor -> id .)
    println         reduce using rule 83 (Factor -> id .)
    prints          reduce using rule 83 (Factor -> id .)
    for             reduce using rule 83 (Factor -> id .)
    while           reduce using rule 83 (Factor -> id .)
    read            reduce using rule 83 (Factor -> id .)
    if              reduce using rule 83 (Factor -> id .)
    repeat          reduce using rule 83 (Factor -> id .)
    num             reduce using rule 83 (Factor -> id .)
    ;               reduce using rule 83 (Factor -> id .)
    )               reduce using rule 83 (Factor -> id .)
    (               shift and go to state 69

  ! (               [ reduce using rule 83 (Factor -> id .) ]


state 34

    (41) Attr -> gid . = Exp
    (42) Attr -> gid . [ Exp ] = Exp
    (43) Attr -> gid . [ Exp ] [ Exp ] = Exp
    (54) Exp -> gid . addeq Term
    (55) Exp -> gid . subeq Term
    (56) Exp -> gid . addeql Term
    (57) Exp -> gid . subeql Term
    (68) Term -> gid . muleq Factor
    (69) Term -> gid . diveq Factor
    (70) Term -> gid . modeq Factor
    (71) Term -> gid . muleql Factor
    (72) Term -> gid . diveql Factor
    (73) Term -> gid . modeql Factor
    (79) Factor -> gid . plus
    (80) Factor -> gid . plusl
    (81) Factor -> gid . minus
    (82) Factor -> gid . minusl
    (84) Factor -> gid .
    (90) Factor -> gid . [ Exp ]
    (91) Factor -> gid . [ Exp ] [ Exp ]

    =               shift and go to state 70
    [               shift and go to state 71
    addeq           shift and go to state 72
    subeq           shift and go to state 73
    addeql          shift and go to state 74
    subeql          shift and go to state 75
    muleq           shift and go to state 76
    diveq           shift and go to state 77
    modeq           shift and go to state 78
    muleql          shift and go to state 79
    diveql          shift and go to state 80
    modeql          shift and go to state 81
    plus            shift and go to state 82
    plusl           shift and go to state 83
    minus           shift and go to state 84
    minusl          shift and go to state 85
    *               reduce using rule 84 (Factor -> gid .)
    /               reduce using rule 84 (Factor -> gid .)
    %               reduce using rule 84 (Factor -> gid .)
    +               reduce using rule 84 (Factor -> gid .)
    -               reduce using rule 84 (Factor -> gid .)
    }               reduce using rule 84 (Factor -> gid .)
    id              reduce using rule 84 (Factor -> gid .)
    gid             reduce using rule 84 (Factor -> gid .)
    return          reduce using rule 84 (Factor -> gid .)
    print           reduce using rule 84 (Factor -> gid .)
    println         reduce using rule 84 (Factor -> gid .)
    prints          reduce using rule 84 (Factor -> gid .)
    for             reduce using rule 84 (Factor -> gid .)
    while           reduce using rule 84 (Factor -> gid .)
    read            reduce using rule 84 (Factor -> gid .)
    if              reduce using rule 84 (Factor -> gid .)
    repeat          reduce using rule 84 (Factor -> gid .)
    num             reduce using rule 84 (Factor -> gid .)
    (               reduce using rule 84 (Factor -> gid .)
    ;               reduce using rule 84 (Factor -> gid .)
    )               reduce using rule 84 (Factor -> gid .)


state 35

    (44) Return -> return . ( Exp )

    (               shift and go to state 86


state 36

    (87) Factor -> ( . Cond )
    (92) Factor -> ( . Exp )
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 88
    Exp                            shift and go to state 89
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 37

    (58) Exp -> Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 58 (Exp -> Term .)
    -               reduce using rule 58 (Exp -> Term .)
    }               reduce using rule 58 (Exp -> Term .)
    id              reduce using rule 58 (Exp -> Term .)
    gid             reduce using rule 58 (Exp -> Term .)
    return          reduce using rule 58 (Exp -> Term .)
    print           reduce using rule 58 (Exp -> Term .)
    println         reduce using rule 58 (Exp -> Term .)
    prints          reduce using rule 58 (Exp -> Term .)
    for             reduce using rule 58 (Exp -> Term .)
    while           reduce using rule 58 (Exp -> Term .)
    read            reduce using rule 58 (Exp -> Term .)
    if              reduce using rule 58 (Exp -> Term .)
    repeat          reduce using rule 58 (Exp -> Term .)
    num             reduce using rule 58 (Exp -> Term .)
    (               reduce using rule 58 (Exp -> Term .)
    )               reduce using rule 58 (Exp -> Term .)
    sup             reduce using rule 58 (Exp -> Term .)
    inf             reduce using rule 58 (Exp -> Term .)
    supeq           reduce using rule 58 (Exp -> Term .)
    infeq           reduce using rule 58 (Exp -> Term .)
    eq              reduce using rule 58 (Exp -> Term .)
    diff            reduce using rule 58 (Exp -> Term .)
    ;               reduce using rule 58 (Exp -> Term .)
    ]               reduce using rule 58 (Exp -> Term .)
    and             reduce using rule 58 (Exp -> Term .)
    or              reduce using rule 58 (Exp -> Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 38

    (30) Print -> print . ( Exp )

    (               shift and go to state 96


state 39

    (31) Println -> println . ( Exp )

    (               shift and go to state 97


state 40

    (32) Prints -> prints . ( string )

    (               shift and go to state 98


state 41

    (25) Repeat -> RepeatS . ( num ) { Insts }

    (               shift and go to state 99


state 42

    (85) Factor -> num .

    *               reduce using rule 85 (Factor -> num .)
    /               reduce using rule 85 (Factor -> num .)
    %               reduce using rule 85 (Factor -> num .)
    +               reduce using rule 85 (Factor -> num .)
    -               reduce using rule 85 (Factor -> num .)
    }               reduce using rule 85 (Factor -> num .)
    id              reduce using rule 85 (Factor -> num .)
    gid             reduce using rule 85 (Factor -> num .)
    return          reduce using rule 85 (Factor -> num .)
    print           reduce using rule 85 (Factor -> num .)
    println         reduce using rule 85 (Factor -> num .)
    prints          reduce using rule 85 (Factor -> num .)
    for             reduce using rule 85 (Factor -> num .)
    while           reduce using rule 85 (Factor -> num .)
    read            reduce using rule 85 (Factor -> num .)
    if              reduce using rule 85 (Factor -> num .)
    repeat          reduce using rule 85 (Factor -> num .)
    num             reduce using rule 85 (Factor -> num .)
    (               reduce using rule 85 (Factor -> num .)
    )               reduce using rule 85 (Factor -> num .)
    sup             reduce using rule 85 (Factor -> num .)
    inf             reduce using rule 85 (Factor -> num .)
    supeq           reduce using rule 85 (Factor -> num .)
    infeq           reduce using rule 85 (Factor -> num .)
    eq              reduce using rule 85 (Factor -> num .)
    diff            reduce using rule 85 (Factor -> num .)
    ;               reduce using rule 85 (Factor -> num .)
    ]               reduce using rule 85 (Factor -> num .)
    and             reduce using rule 85 (Factor -> num .)
    or              reduce using rule 85 (Factor -> num .)


state 43

    (27) For -> for . ( Insts ; Cond ; Insts ) { Insts }

    (               shift and go to state 100


state 44

    (28) While -> while . ( Cond ) { Insts }

    (               shift and go to state 101


state 45

    (29) Read -> read . ( id )

    (               shift and go to state 102


state 46

    (45) If -> if . ( Cond ) { Insts }
    (46) If -> if . ( Cond ) Inst
    (47) If -> if . ( Cond ) { Insts } else { Insts }

    (               shift and go to state 103


state 47

    (74) Term -> Factor .

    *               reduce using rule 74 (Term -> Factor .)
    /               reduce using rule 74 (Term -> Factor .)
    %               reduce using rule 74 (Term -> Factor .)
    +               reduce using rule 74 (Term -> Factor .)
    -               reduce using rule 74 (Term -> Factor .)
    }               reduce using rule 74 (Term -> Factor .)
    id              reduce using rule 74 (Term -> Factor .)
    gid             reduce using rule 74 (Term -> Factor .)
    return          reduce using rule 74 (Term -> Factor .)
    print           reduce using rule 74 (Term -> Factor .)
    println         reduce using rule 74 (Term -> Factor .)
    prints          reduce using rule 74 (Term -> Factor .)
    for             reduce using rule 74 (Term -> Factor .)
    while           reduce using rule 74 (Term -> Factor .)
    read            reduce using rule 74 (Term -> Factor .)
    if              reduce using rule 74 (Term -> Factor .)
    repeat          reduce using rule 74 (Term -> Factor .)
    num             reduce using rule 74 (Term -> Factor .)
    (               reduce using rule 74 (Term -> Factor .)
    )               reduce using rule 74 (Term -> Factor .)
    sup             reduce using rule 74 (Term -> Factor .)
    inf             reduce using rule 74 (Term -> Factor .)
    supeq           reduce using rule 74 (Term -> Factor .)
    infeq           reduce using rule 74 (Term -> Factor .)
    eq              reduce using rule 74 (Term -> Factor .)
    diff            reduce using rule 74 (Term -> Factor .)
    ;               reduce using rule 74 (Term -> Factor .)
    ]               reduce using rule 74 (Term -> Factor .)
    and             reduce using rule 74 (Term -> Factor .)
    or              reduce using rule 74 (Term -> Factor .)


state 48

    (26) RepeatS -> repeat .

    (               reduce using rule 26 (RepeatS -> repeat .)


state 49

    (33) BlcInt -> int { Dcls . }
    (9) Dcls -> Dcls . Dcl
    (34) Dcl -> . id [ num ]
    (35) Dcl -> . id [ num ] [ num ]
    (36) Dcl -> . id
    (37) Dcl -> . id = num

    }               shift and go to state 104
    id              shift and go to state 106

    Dcl                            shift and go to state 105

state 50

    (4) DefBlc -> id { VarBlcs Insts . }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    }               shift and go to state 107
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 51

    (48) Exp -> Exp + . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 108
    Factor                         shift and go to state 47

state 52

    (49) Exp -> Exp - . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 111
    Factor                         shift and go to state 47

state 53

    (38) Attr -> id = . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 112
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 54

    (39) Attr -> id [ . Exp ] = Exp
    (40) Attr -> id [ . Exp ] [ Exp ] = Exp
    (88) Factor -> id [ . Exp ]
    (89) Factor -> id [ . Exp ] [ Exp ]
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 113
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 55

    (50) Exp -> id addeq . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 114
    Factor                         shift and go to state 47

state 56

    (51) Exp -> id subeq . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 115
    Factor                         shift and go to state 47

state 57

    (52) Exp -> id addeql . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 116
    Factor                         shift and go to state 47

state 58

    (53) Exp -> id subeql . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 117
    Factor                         shift and go to state 47

state 59

    (62) Term -> id muleq . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 119

state 60

    (63) Term -> id diveq . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 121

state 61

    (64) Term -> id modeq . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 122

state 62

    (65) Term -> id muleql . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 123

state 63

    (66) Term -> id diveql . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 124

state 64

    (67) Term -> id modeql . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 125

state 65

    (75) Factor -> id plus .

    *               reduce using rule 75 (Factor -> id plus .)
    /               reduce using rule 75 (Factor -> id plus .)
    %               reduce using rule 75 (Factor -> id plus .)
    +               reduce using rule 75 (Factor -> id plus .)
    -               reduce using rule 75 (Factor -> id plus .)
    }               reduce using rule 75 (Factor -> id plus .)
    id              reduce using rule 75 (Factor -> id plus .)
    gid             reduce using rule 75 (Factor -> id plus .)
    return          reduce using rule 75 (Factor -> id plus .)
    print           reduce using rule 75 (Factor -> id plus .)
    println         reduce using rule 75 (Factor -> id plus .)
    prints          reduce using rule 75 (Factor -> id plus .)
    for             reduce using rule 75 (Factor -> id plus .)
    while           reduce using rule 75 (Factor -> id plus .)
    read            reduce using rule 75 (Factor -> id plus .)
    if              reduce using rule 75 (Factor -> id plus .)
    repeat          reduce using rule 75 (Factor -> id plus .)
    num             reduce using rule 75 (Factor -> id plus .)
    (               reduce using rule 75 (Factor -> id plus .)
    )               reduce using rule 75 (Factor -> id plus .)
    sup             reduce using rule 75 (Factor -> id plus .)
    inf             reduce using rule 75 (Factor -> id plus .)
    supeq           reduce using rule 75 (Factor -> id plus .)
    infeq           reduce using rule 75 (Factor -> id plus .)
    eq              reduce using rule 75 (Factor -> id plus .)
    diff            reduce using rule 75 (Factor -> id plus .)
    ;               reduce using rule 75 (Factor -> id plus .)
    ]               reduce using rule 75 (Factor -> id plus .)
    and             reduce using rule 75 (Factor -> id plus .)
    or              reduce using rule 75 (Factor -> id plus .)


state 66

    (76) Factor -> id plusl .

    *               reduce using rule 76 (Factor -> id plusl .)
    /               reduce using rule 76 (Factor -> id plusl .)
    %               reduce using rule 76 (Factor -> id plusl .)
    +               reduce using rule 76 (Factor -> id plusl .)
    -               reduce using rule 76 (Factor -> id plusl .)
    }               reduce using rule 76 (Factor -> id plusl .)
    id              reduce using rule 76 (Factor -> id plusl .)
    gid             reduce using rule 76 (Factor -> id plusl .)
    return          reduce using rule 76 (Factor -> id plusl .)
    print           reduce using rule 76 (Factor -> id plusl .)
    println         reduce using rule 76 (Factor -> id plusl .)
    prints          reduce using rule 76 (Factor -> id plusl .)
    for             reduce using rule 76 (Factor -> id plusl .)
    while           reduce using rule 76 (Factor -> id plusl .)
    read            reduce using rule 76 (Factor -> id plusl .)
    if              reduce using rule 76 (Factor -> id plusl .)
    repeat          reduce using rule 76 (Factor -> id plusl .)
    num             reduce using rule 76 (Factor -> id plusl .)
    (               reduce using rule 76 (Factor -> id plusl .)
    )               reduce using rule 76 (Factor -> id plusl .)
    sup             reduce using rule 76 (Factor -> id plusl .)
    inf             reduce using rule 76 (Factor -> id plusl .)
    supeq           reduce using rule 76 (Factor -> id plusl .)
    infeq           reduce using rule 76 (Factor -> id plusl .)
    eq              reduce using rule 76 (Factor -> id plusl .)
    diff            reduce using rule 76 (Factor -> id plusl .)
    ;               reduce using rule 76 (Factor -> id plusl .)
    ]               reduce using rule 76 (Factor -> id plusl .)
    and             reduce using rule 76 (Factor -> id plusl .)
    or              reduce using rule 76 (Factor -> id plusl .)


state 67

    (77) Factor -> id minus .

    *               reduce using rule 77 (Factor -> id minus .)
    /               reduce using rule 77 (Factor -> id minus .)
    %               reduce using rule 77 (Factor -> id minus .)
    +               reduce using rule 77 (Factor -> id minus .)
    -               reduce using rule 77 (Factor -> id minus .)
    }               reduce using rule 77 (Factor -> id minus .)
    id              reduce using rule 77 (Factor -> id minus .)
    gid             reduce using rule 77 (Factor -> id minus .)
    return          reduce using rule 77 (Factor -> id minus .)
    print           reduce using rule 77 (Factor -> id minus .)
    println         reduce using rule 77 (Factor -> id minus .)
    prints          reduce using rule 77 (Factor -> id minus .)
    for             reduce using rule 77 (Factor -> id minus .)
    while           reduce using rule 77 (Factor -> id minus .)
    read            reduce using rule 77 (Factor -> id minus .)
    if              reduce using rule 77 (Factor -> id minus .)
    repeat          reduce using rule 77 (Factor -> id minus .)
    num             reduce using rule 77 (Factor -> id minus .)
    (               reduce using rule 77 (Factor -> id minus .)
    )               reduce using rule 77 (Factor -> id minus .)
    sup             reduce using rule 77 (Factor -> id minus .)
    inf             reduce using rule 77 (Factor -> id minus .)
    supeq           reduce using rule 77 (Factor -> id minus .)
    infeq           reduce using rule 77 (Factor -> id minus .)
    eq              reduce using rule 77 (Factor -> id minus .)
    diff            reduce using rule 77 (Factor -> id minus .)
    ;               reduce using rule 77 (Factor -> id minus .)
    ]               reduce using rule 77 (Factor -> id minus .)
    and             reduce using rule 77 (Factor -> id minus .)
    or              reduce using rule 77 (Factor -> id minus .)


state 68

    (78) Factor -> id minusl .

    *               reduce using rule 78 (Factor -> id minusl .)
    /               reduce using rule 78 (Factor -> id minusl .)
    %               reduce using rule 78 (Factor -> id minusl .)
    +               reduce using rule 78 (Factor -> id minusl .)
    -               reduce using rule 78 (Factor -> id minusl .)
    }               reduce using rule 78 (Factor -> id minusl .)
    id              reduce using rule 78 (Factor -> id minusl .)
    gid             reduce using rule 78 (Factor -> id minusl .)
    return          reduce using rule 78 (Factor -> id minusl .)
    print           reduce using rule 78 (Factor -> id minusl .)
    println         reduce using rule 78 (Factor -> id minusl .)
    prints          reduce using rule 78 (Factor -> id minusl .)
    for             reduce using rule 78 (Factor -> id minusl .)
    while           reduce using rule 78 (Factor -> id minusl .)
    read            reduce using rule 78 (Factor -> id minusl .)
    if              reduce using rule 78 (Factor -> id minusl .)
    repeat          reduce using rule 78 (Factor -> id minusl .)
    num             reduce using rule 78 (Factor -> id minusl .)
    (               reduce using rule 78 (Factor -> id minusl .)
    )               reduce using rule 78 (Factor -> id minusl .)
    sup             reduce using rule 78 (Factor -> id minusl .)
    inf             reduce using rule 78 (Factor -> id minusl .)
    supeq           reduce using rule 78 (Factor -> id minusl .)
    infeq           reduce using rule 78 (Factor -> id minusl .)
    eq              reduce using rule 78 (Factor -> id minusl .)
    diff            reduce using rule 78 (Factor -> id minusl .)
    ;               reduce using rule 78 (Factor -> id minusl .)
    ]               reduce using rule 78 (Factor -> id minusl .)
    and             reduce using rule 78 (Factor -> id minusl .)
    or              reduce using rule 78 (Factor -> id minusl .)


state 69

    (86) Factor -> id ( . )

    )               shift and go to state 126


state 70

    (41) Attr -> gid = . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 127
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 71

    (42) Attr -> gid [ . Exp ] = Exp
    (43) Attr -> gid [ . Exp ] [ Exp ] = Exp
    (90) Factor -> gid [ . Exp ]
    (91) Factor -> gid [ . Exp ] [ Exp ]
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 128
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 72

    (54) Exp -> gid addeq . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 129
    Factor                         shift and go to state 47

state 73

    (55) Exp -> gid subeq . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 130
    Factor                         shift and go to state 47

state 74

    (56) Exp -> gid addeql . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 131
    Factor                         shift and go to state 47

state 75

    (57) Exp -> gid subeql . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 109
    gid             shift and go to state 110
    num             shift and go to state 42
    (               shift and go to state 36

    Term                           shift and go to state 132
    Factor                         shift and go to state 47

state 76

    (68) Term -> gid muleq . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 133

state 77

    (69) Term -> gid diveq . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 134

state 78

    (70) Term -> gid modeq . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 135

state 79

    (71) Term -> gid muleql . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 136

state 80

    (72) Term -> gid diveql . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 137

state 81

    (73) Term -> gid modeql . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 138

state 82

    (79) Factor -> gid plus .

    *               reduce using rule 79 (Factor -> gid plus .)
    /               reduce using rule 79 (Factor -> gid plus .)
    %               reduce using rule 79 (Factor -> gid plus .)
    +               reduce using rule 79 (Factor -> gid plus .)
    -               reduce using rule 79 (Factor -> gid plus .)
    }               reduce using rule 79 (Factor -> gid plus .)
    id              reduce using rule 79 (Factor -> gid plus .)
    gid             reduce using rule 79 (Factor -> gid plus .)
    return          reduce using rule 79 (Factor -> gid plus .)
    print           reduce using rule 79 (Factor -> gid plus .)
    println         reduce using rule 79 (Factor -> gid plus .)
    prints          reduce using rule 79 (Factor -> gid plus .)
    for             reduce using rule 79 (Factor -> gid plus .)
    while           reduce using rule 79 (Factor -> gid plus .)
    read            reduce using rule 79 (Factor -> gid plus .)
    if              reduce using rule 79 (Factor -> gid plus .)
    repeat          reduce using rule 79 (Factor -> gid plus .)
    num             reduce using rule 79 (Factor -> gid plus .)
    (               reduce using rule 79 (Factor -> gid plus .)
    )               reduce using rule 79 (Factor -> gid plus .)
    sup             reduce using rule 79 (Factor -> gid plus .)
    inf             reduce using rule 79 (Factor -> gid plus .)
    supeq           reduce using rule 79 (Factor -> gid plus .)
    infeq           reduce using rule 79 (Factor -> gid plus .)
    eq              reduce using rule 79 (Factor -> gid plus .)
    diff            reduce using rule 79 (Factor -> gid plus .)
    ;               reduce using rule 79 (Factor -> gid plus .)
    ]               reduce using rule 79 (Factor -> gid plus .)
    and             reduce using rule 79 (Factor -> gid plus .)
    or              reduce using rule 79 (Factor -> gid plus .)


state 83

    (80) Factor -> gid plusl .

    *               reduce using rule 80 (Factor -> gid plusl .)
    /               reduce using rule 80 (Factor -> gid plusl .)
    %               reduce using rule 80 (Factor -> gid plusl .)
    +               reduce using rule 80 (Factor -> gid plusl .)
    -               reduce using rule 80 (Factor -> gid plusl .)
    }               reduce using rule 80 (Factor -> gid plusl .)
    id              reduce using rule 80 (Factor -> gid plusl .)
    gid             reduce using rule 80 (Factor -> gid plusl .)
    return          reduce using rule 80 (Factor -> gid plusl .)
    print           reduce using rule 80 (Factor -> gid plusl .)
    println         reduce using rule 80 (Factor -> gid plusl .)
    prints          reduce using rule 80 (Factor -> gid plusl .)
    for             reduce using rule 80 (Factor -> gid plusl .)
    while           reduce using rule 80 (Factor -> gid plusl .)
    read            reduce using rule 80 (Factor -> gid plusl .)
    if              reduce using rule 80 (Factor -> gid plusl .)
    repeat          reduce using rule 80 (Factor -> gid plusl .)
    num             reduce using rule 80 (Factor -> gid plusl .)
    (               reduce using rule 80 (Factor -> gid plusl .)
    )               reduce using rule 80 (Factor -> gid plusl .)
    sup             reduce using rule 80 (Factor -> gid plusl .)
    inf             reduce using rule 80 (Factor -> gid plusl .)
    supeq           reduce using rule 80 (Factor -> gid plusl .)
    infeq           reduce using rule 80 (Factor -> gid plusl .)
    eq              reduce using rule 80 (Factor -> gid plusl .)
    diff            reduce using rule 80 (Factor -> gid plusl .)
    ;               reduce using rule 80 (Factor -> gid plusl .)
    ]               reduce using rule 80 (Factor -> gid plusl .)
    and             reduce using rule 80 (Factor -> gid plusl .)
    or              reduce using rule 80 (Factor -> gid plusl .)


state 84

    (81) Factor -> gid minus .

    *               reduce using rule 81 (Factor -> gid minus .)
    /               reduce using rule 81 (Factor -> gid minus .)
    %               reduce using rule 81 (Factor -> gid minus .)
    +               reduce using rule 81 (Factor -> gid minus .)
    -               reduce using rule 81 (Factor -> gid minus .)
    }               reduce using rule 81 (Factor -> gid minus .)
    id              reduce using rule 81 (Factor -> gid minus .)
    gid             reduce using rule 81 (Factor -> gid minus .)
    return          reduce using rule 81 (Factor -> gid minus .)
    print           reduce using rule 81 (Factor -> gid minus .)
    println         reduce using rule 81 (Factor -> gid minus .)
    prints          reduce using rule 81 (Factor -> gid minus .)
    for             reduce using rule 81 (Factor -> gid minus .)
    while           reduce using rule 81 (Factor -> gid minus .)
    read            reduce using rule 81 (Factor -> gid minus .)
    if              reduce using rule 81 (Factor -> gid minus .)
    repeat          reduce using rule 81 (Factor -> gid minus .)
    num             reduce using rule 81 (Factor -> gid minus .)
    (               reduce using rule 81 (Factor -> gid minus .)
    )               reduce using rule 81 (Factor -> gid minus .)
    sup             reduce using rule 81 (Factor -> gid minus .)
    inf             reduce using rule 81 (Factor -> gid minus .)
    supeq           reduce using rule 81 (Factor -> gid minus .)
    infeq           reduce using rule 81 (Factor -> gid minus .)
    eq              reduce using rule 81 (Factor -> gid minus .)
    diff            reduce using rule 81 (Factor -> gid minus .)
    ;               reduce using rule 81 (Factor -> gid minus .)
    ]               reduce using rule 81 (Factor -> gid minus .)
    and             reduce using rule 81 (Factor -> gid minus .)
    or              reduce using rule 81 (Factor -> gid minus .)


state 85

    (82) Factor -> gid minusl .

    *               reduce using rule 82 (Factor -> gid minusl .)
    /               reduce using rule 82 (Factor -> gid minusl .)
    %               reduce using rule 82 (Factor -> gid minusl .)
    +               reduce using rule 82 (Factor -> gid minusl .)
    -               reduce using rule 82 (Factor -> gid minusl .)
    }               reduce using rule 82 (Factor -> gid minusl .)
    id              reduce using rule 82 (Factor -> gid minusl .)
    gid             reduce using rule 82 (Factor -> gid minusl .)
    return          reduce using rule 82 (Factor -> gid minusl .)
    print           reduce using rule 82 (Factor -> gid minusl .)
    println         reduce using rule 82 (Factor -> gid minusl .)
    prints          reduce using rule 82 (Factor -> gid minusl .)
    for             reduce using rule 82 (Factor -> gid minusl .)
    while           reduce using rule 82 (Factor -> gid minusl .)
    read            reduce using rule 82 (Factor -> gid minusl .)
    if              reduce using rule 82 (Factor -> gid minusl .)
    repeat          reduce using rule 82 (Factor -> gid minusl .)
    num             reduce using rule 82 (Factor -> gid minusl .)
    (               reduce using rule 82 (Factor -> gid minusl .)
    )               reduce using rule 82 (Factor -> gid minusl .)
    sup             reduce using rule 82 (Factor -> gid minusl .)
    inf             reduce using rule 82 (Factor -> gid minusl .)
    supeq           reduce using rule 82 (Factor -> gid minusl .)
    infeq           reduce using rule 82 (Factor -> gid minusl .)
    eq              reduce using rule 82 (Factor -> gid minusl .)
    diff            reduce using rule 82 (Factor -> gid minusl .)
    ;               reduce using rule 82 (Factor -> gid minusl .)
    ]               reduce using rule 82 (Factor -> gid minusl .)
    and             reduce using rule 82 (Factor -> gid minusl .)
    or              reduce using rule 82 (Factor -> gid minusl .)


state 86

    (44) Return -> return ( . Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 139
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 87

    (95) Cond -> ( . Cond and Cond )
    (96) Cond -> ( . Cond or Cond )
    (87) Factor -> ( . Cond )
    (92) Factor -> ( . Exp )
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 140
    Exp                            shift and go to state 89
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 88

    (87) Factor -> ( Cond . )
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

    )               shift and go to state 141
    and             shift and go to state 142
    or              shift and go to state 143


state 89

    (92) Factor -> ( Exp . )
    (97) Cond -> Exp . sup Exp
    (98) Cond -> Exp . inf Exp
    (99) Cond -> Exp . supeq Exp
    (100) Cond -> Exp . infeq Exp
    (102) Cond -> Exp . eq Exp
    (103) Cond -> Exp . diff Exp
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               shift and go to state 144
    sup             shift and go to state 145
    inf             shift and go to state 146
    supeq           shift and go to state 147
    infeq           shift and go to state 148
    eq              shift and go to state 149
    diff            shift and go to state 150
    +               shift and go to state 51
    -               shift and go to state 52


state 90

    (101) Cond -> not . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 151
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 91

    (50) Exp -> id . addeq Term
    (51) Exp -> id . subeq Term
    (52) Exp -> id . addeql Term
    (53) Exp -> id . subeql Term
    (62) Term -> id . muleq Factor
    (63) Term -> id . diveq Factor
    (64) Term -> id . modeq Factor
    (65) Term -> id . muleql Factor
    (66) Term -> id . diveql Factor
    (67) Term -> id . modeql Factor
    (75) Factor -> id . plus
    (76) Factor -> id . plusl
    (77) Factor -> id . minus
    (78) Factor -> id . minusl
    (83) Factor -> id .
    (86) Factor -> id . ( )
    (88) Factor -> id . [ Exp ]
    (89) Factor -> id . [ Exp ] [ Exp ]

  ! shift/reduce conflict for ( resolved as shift
    addeq           shift and go to state 55
    subeq           shift and go to state 56
    addeql          shift and go to state 57
    subeql          shift and go to state 58
    muleq           shift and go to state 59
    diveq           shift and go to state 60
    modeq           shift and go to state 61
    muleql          shift and go to state 62
    diveql          shift and go to state 63
    modeql          shift and go to state 64
    plus            shift and go to state 65
    plusl           shift and go to state 66
    minus           shift and go to state 67
    minusl          shift and go to state 68
    *               reduce using rule 83 (Factor -> id .)
    /               reduce using rule 83 (Factor -> id .)
    %               reduce using rule 83 (Factor -> id .)
    )               reduce using rule 83 (Factor -> id .)
    sup             reduce using rule 83 (Factor -> id .)
    inf             reduce using rule 83 (Factor -> id .)
    supeq           reduce using rule 83 (Factor -> id .)
    infeq           reduce using rule 83 (Factor -> id .)
    eq              reduce using rule 83 (Factor -> id .)
    diff            reduce using rule 83 (Factor -> id .)
    +               reduce using rule 83 (Factor -> id .)
    -               reduce using rule 83 (Factor -> id .)
    }               reduce using rule 83 (Factor -> id .)
    id              reduce using rule 83 (Factor -> id .)
    gid             reduce using rule 83 (Factor -> id .)
    return          reduce using rule 83 (Factor -> id .)
    print           reduce using rule 83 (Factor -> id .)
    println         reduce using rule 83 (Factor -> id .)
    prints          reduce using rule 83 (Factor -> id .)
    for             reduce using rule 83 (Factor -> id .)
    while           reduce using rule 83 (Factor -> id .)
    read            reduce using rule 83 (Factor -> id .)
    if              reduce using rule 83 (Factor -> id .)
    repeat          reduce using rule 83 (Factor -> id .)
    num             reduce using rule 83 (Factor -> id .)
    ;               reduce using rule 83 (Factor -> id .)
    ]               reduce using rule 83 (Factor -> id .)
    and             reduce using rule 83 (Factor -> id .)
    or              reduce using rule 83 (Factor -> id .)
    (               shift and go to state 69
    [               shift and go to state 152

  ! (               [ reduce using rule 83 (Factor -> id .) ]


state 92

    (54) Exp -> gid . addeq Term
    (55) Exp -> gid . subeq Term
    (56) Exp -> gid . addeql Term
    (57) Exp -> gid . subeql Term
    (68) Term -> gid . muleq Factor
    (69) Term -> gid . diveq Factor
    (70) Term -> gid . modeq Factor
    (71) Term -> gid . muleql Factor
    (72) Term -> gid . diveql Factor
    (73) Term -> gid . modeql Factor
    (79) Factor -> gid . plus
    (80) Factor -> gid . plusl
    (81) Factor -> gid . minus
    (82) Factor -> gid . minusl
    (84) Factor -> gid .
    (90) Factor -> gid . [ Exp ]
    (91) Factor -> gid . [ Exp ] [ Exp ]

    addeq           shift and go to state 72
    subeq           shift and go to state 73
    addeql          shift and go to state 74
    subeql          shift and go to state 75
    muleq           shift and go to state 76
    diveq           shift and go to state 77
    modeq           shift and go to state 78
    muleql          shift and go to state 79
    diveql          shift and go to state 80
    modeql          shift and go to state 81
    plus            shift and go to state 82
    plusl           shift and go to state 83
    minus           shift and go to state 84
    minusl          shift and go to state 85
    *               reduce using rule 84 (Factor -> gid .)
    /               reduce using rule 84 (Factor -> gid .)
    %               reduce using rule 84 (Factor -> gid .)
    )               reduce using rule 84 (Factor -> gid .)
    sup             reduce using rule 84 (Factor -> gid .)
    inf             reduce using rule 84 (Factor -> gid .)
    supeq           reduce using rule 84 (Factor -> gid .)
    infeq           reduce using rule 84 (Factor -> gid .)
    eq              reduce using rule 84 (Factor -> gid .)
    diff            reduce using rule 84 (Factor -> gid .)
    +               reduce using rule 84 (Factor -> gid .)
    -               reduce using rule 84 (Factor -> gid .)
    }               reduce using rule 84 (Factor -> gid .)
    id              reduce using rule 84 (Factor -> gid .)
    gid             reduce using rule 84 (Factor -> gid .)
    return          reduce using rule 84 (Factor -> gid .)
    print           reduce using rule 84 (Factor -> gid .)
    println         reduce using rule 84 (Factor -> gid .)
    prints          reduce using rule 84 (Factor -> gid .)
    for             reduce using rule 84 (Factor -> gid .)
    while           reduce using rule 84 (Factor -> gid .)
    read            reduce using rule 84 (Factor -> gid .)
    if              reduce using rule 84 (Factor -> gid .)
    repeat          reduce using rule 84 (Factor -> gid .)
    num             reduce using rule 84 (Factor -> gid .)
    (               reduce using rule 84 (Factor -> gid .)
    ;               reduce using rule 84 (Factor -> gid .)
    ]               reduce using rule 84 (Factor -> gid .)
    and             reduce using rule 84 (Factor -> gid .)
    or              reduce using rule 84 (Factor -> gid .)
    [               shift and go to state 153


state 93

    (59) Term -> Term * . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 154

state 94

    (60) Term -> Term / . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 155

state 95

    (61) Term -> Term % . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 118
    gid             shift and go to state 120
    num             shift and go to state 42
    (               shift and go to state 36

    Factor                         shift and go to state 156

state 96

    (30) Print -> print ( . Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 157
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 97

    (31) Println -> println ( . Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 158
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 98

    (32) Prints -> prints ( . string )

    string          shift and go to state 159


state 99

    (25) Repeat -> RepeatS ( . num ) { Insts }

    num             shift and go to state 160


state 100

    (27) For -> for ( . Insts ; Cond ; Insts ) { Insts }
    (12) Insts -> . Insts Inst
    (13) Insts -> .

    ;               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)

    Insts                          shift and go to state 161

state 101

    (28) While -> while ( . Cond ) { Insts }
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 162
    Exp                            shift and go to state 163
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 102

    (29) Read -> read ( . id )

    id              shift and go to state 164


state 103

    (45) If -> if ( . Cond ) { Insts }
    (46) If -> if ( . Cond ) Inst
    (47) If -> if ( . Cond ) { Insts } else { Insts }
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 165
    Exp                            shift and go to state 163
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 104

    (33) BlcInt -> int { Dcls } .

    }               reduce using rule 33 (BlcInt -> int { Dcls } .)
    int             reduce using rule 33 (BlcInt -> int { Dcls } .)
    id              reduce using rule 33 (BlcInt -> int { Dcls } .)
    gid             reduce using rule 33 (BlcInt -> int { Dcls } .)
    return          reduce using rule 33 (BlcInt -> int { Dcls } .)
    print           reduce using rule 33 (BlcInt -> int { Dcls } .)
    println         reduce using rule 33 (BlcInt -> int { Dcls } .)
    prints          reduce using rule 33 (BlcInt -> int { Dcls } .)
    for             reduce using rule 33 (BlcInt -> int { Dcls } .)
    while           reduce using rule 33 (BlcInt -> int { Dcls } .)
    read            reduce using rule 33 (BlcInt -> int { Dcls } .)
    if              reduce using rule 33 (BlcInt -> int { Dcls } .)
    repeat          reduce using rule 33 (BlcInt -> int { Dcls } .)
    num             reduce using rule 33 (BlcInt -> int { Dcls } .)
    (               reduce using rule 33 (BlcInt -> int { Dcls } .)


state 105

    (9) Dcls -> Dcls Dcl .

    }               reduce using rule 9 (Dcls -> Dcls Dcl .)
    id              reduce using rule 9 (Dcls -> Dcls Dcl .)


state 106

    (34) Dcl -> id . [ num ]
    (35) Dcl -> id . [ num ] [ num ]
    (36) Dcl -> id .
    (37) Dcl -> id . = num

    [               shift and go to state 166
    }               reduce using rule 36 (Dcl -> id .)
    id              reduce using rule 36 (Dcl -> id .)
    =               shift and go to state 167


state 107

    (4) DefBlc -> id { VarBlcs Insts } .

    id              reduce using rule 4 (DefBlc -> id { VarBlcs Insts } .)
    $end            reduce using rule 4 (DefBlc -> id { VarBlcs Insts } .)


state 108

    (48) Exp -> Exp + Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 48 (Exp -> Exp + Term .)
    -               reduce using rule 48 (Exp -> Exp + Term .)
    }               reduce using rule 48 (Exp -> Exp + Term .)
    id              reduce using rule 48 (Exp -> Exp + Term .)
    gid             reduce using rule 48 (Exp -> Exp + Term .)
    return          reduce using rule 48 (Exp -> Exp + Term .)
    print           reduce using rule 48 (Exp -> Exp + Term .)
    println         reduce using rule 48 (Exp -> Exp + Term .)
    prints          reduce using rule 48 (Exp -> Exp + Term .)
    for             reduce using rule 48 (Exp -> Exp + Term .)
    while           reduce using rule 48 (Exp -> Exp + Term .)
    read            reduce using rule 48 (Exp -> Exp + Term .)
    if              reduce using rule 48 (Exp -> Exp + Term .)
    repeat          reduce using rule 48 (Exp -> Exp + Term .)
    num             reduce using rule 48 (Exp -> Exp + Term .)
    (               reduce using rule 48 (Exp -> Exp + Term .)
    )               reduce using rule 48 (Exp -> Exp + Term .)
    sup             reduce using rule 48 (Exp -> Exp + Term .)
    inf             reduce using rule 48 (Exp -> Exp + Term .)
    supeq           reduce using rule 48 (Exp -> Exp + Term .)
    infeq           reduce using rule 48 (Exp -> Exp + Term .)
    eq              reduce using rule 48 (Exp -> Exp + Term .)
    diff            reduce using rule 48 (Exp -> Exp + Term .)
    ;               reduce using rule 48 (Exp -> Exp + Term .)
    ]               reduce using rule 48 (Exp -> Exp + Term .)
    and             reduce using rule 48 (Exp -> Exp + Term .)
    or              reduce using rule 48 (Exp -> Exp + Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 109

    (62) Term -> id . muleq Factor
    (63) Term -> id . diveq Factor
    (64) Term -> id . modeq Factor
    (65) Term -> id . muleql Factor
    (66) Term -> id . diveql Factor
    (67) Term -> id . modeql Factor
    (75) Factor -> id . plus
    (76) Factor -> id . plusl
    (77) Factor -> id . minus
    (78) Factor -> id . minusl
    (83) Factor -> id .
    (86) Factor -> id . ( )
    (88) Factor -> id . [ Exp ]
    (89) Factor -> id . [ Exp ] [ Exp ]

  ! shift/reduce conflict for ( resolved as shift
    muleq           shift and go to state 59
    diveq           shift and go to state 60
    modeq           shift and go to state 61
    muleql          shift and go to state 62
    diveql          shift and go to state 63
    modeql          shift and go to state 64
    plus            shift and go to state 65
    plusl           shift and go to state 66
    minus           shift and go to state 67
    minusl          shift and go to state 68
    *               reduce using rule 83 (Factor -> id .)
    /               reduce using rule 83 (Factor -> id .)
    %               reduce using rule 83 (Factor -> id .)
    +               reduce using rule 83 (Factor -> id .)
    -               reduce using rule 83 (Factor -> id .)
    }               reduce using rule 83 (Factor -> id .)
    id              reduce using rule 83 (Factor -> id .)
    gid             reduce using rule 83 (Factor -> id .)
    return          reduce using rule 83 (Factor -> id .)
    print           reduce using rule 83 (Factor -> id .)
    println         reduce using rule 83 (Factor -> id .)
    prints          reduce using rule 83 (Factor -> id .)
    for             reduce using rule 83 (Factor -> id .)
    while           reduce using rule 83 (Factor -> id .)
    read            reduce using rule 83 (Factor -> id .)
    if              reduce using rule 83 (Factor -> id .)
    repeat          reduce using rule 83 (Factor -> id .)
    num             reduce using rule 83 (Factor -> id .)
    )               reduce using rule 83 (Factor -> id .)
    sup             reduce using rule 83 (Factor -> id .)
    inf             reduce using rule 83 (Factor -> id .)
    supeq           reduce using rule 83 (Factor -> id .)
    infeq           reduce using rule 83 (Factor -> id .)
    eq              reduce using rule 83 (Factor -> id .)
    diff            reduce using rule 83 (Factor -> id .)
    ;               reduce using rule 83 (Factor -> id .)
    ]               reduce using rule 83 (Factor -> id .)
    and             reduce using rule 83 (Factor -> id .)
    or              reduce using rule 83 (Factor -> id .)
    (               shift and go to state 69
    [               shift and go to state 152

  ! (               [ reduce using rule 83 (Factor -> id .) ]


state 110

    (68) Term -> gid . muleq Factor
    (69) Term -> gid . diveq Factor
    (70) Term -> gid . modeq Factor
    (71) Term -> gid . muleql Factor
    (72) Term -> gid . diveql Factor
    (73) Term -> gid . modeql Factor
    (79) Factor -> gid . plus
    (80) Factor -> gid . plusl
    (81) Factor -> gid . minus
    (82) Factor -> gid . minusl
    (84) Factor -> gid .
    (90) Factor -> gid . [ Exp ]
    (91) Factor -> gid . [ Exp ] [ Exp ]

    muleq           shift and go to state 76
    diveq           shift and go to state 77
    modeq           shift and go to state 78
    muleql          shift and go to state 79
    diveql          shift and go to state 80
    modeql          shift and go to state 81
    plus            shift and go to state 82
    plusl           shift and go to state 83
    minus           shift and go to state 84
    minusl          shift and go to state 85
    *               reduce using rule 84 (Factor -> gid .)
    /               reduce using rule 84 (Factor -> gid .)
    %               reduce using rule 84 (Factor -> gid .)
    +               reduce using rule 84 (Factor -> gid .)
    -               reduce using rule 84 (Factor -> gid .)
    }               reduce using rule 84 (Factor -> gid .)
    id              reduce using rule 84 (Factor -> gid .)
    gid             reduce using rule 84 (Factor -> gid .)
    return          reduce using rule 84 (Factor -> gid .)
    print           reduce using rule 84 (Factor -> gid .)
    println         reduce using rule 84 (Factor -> gid .)
    prints          reduce using rule 84 (Factor -> gid .)
    for             reduce using rule 84 (Factor -> gid .)
    while           reduce using rule 84 (Factor -> gid .)
    read            reduce using rule 84 (Factor -> gid .)
    if              reduce using rule 84 (Factor -> gid .)
    repeat          reduce using rule 84 (Factor -> gid .)
    num             reduce using rule 84 (Factor -> gid .)
    (               reduce using rule 84 (Factor -> gid .)
    )               reduce using rule 84 (Factor -> gid .)
    sup             reduce using rule 84 (Factor -> gid .)
    inf             reduce using rule 84 (Factor -> gid .)
    supeq           reduce using rule 84 (Factor -> gid .)
    infeq           reduce using rule 84 (Factor -> gid .)
    eq              reduce using rule 84 (Factor -> gid .)
    diff            reduce using rule 84 (Factor -> gid .)
    ;               reduce using rule 84 (Factor -> gid .)
    ]               reduce using rule 84 (Factor -> gid .)
    and             reduce using rule 84 (Factor -> gid .)
    or              reduce using rule 84 (Factor -> gid .)
    [               shift and go to state 153


state 111

    (49) Exp -> Exp - Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 49 (Exp -> Exp - Term .)
    -               reduce using rule 49 (Exp -> Exp - Term .)
    }               reduce using rule 49 (Exp -> Exp - Term .)
    id              reduce using rule 49 (Exp -> Exp - Term .)
    gid             reduce using rule 49 (Exp -> Exp - Term .)
    return          reduce using rule 49 (Exp -> Exp - Term .)
    print           reduce using rule 49 (Exp -> Exp - Term .)
    println         reduce using rule 49 (Exp -> Exp - Term .)
    prints          reduce using rule 49 (Exp -> Exp - Term .)
    for             reduce using rule 49 (Exp -> Exp - Term .)
    while           reduce using rule 49 (Exp -> Exp - Term .)
    read            reduce using rule 49 (Exp -> Exp - Term .)
    if              reduce using rule 49 (Exp -> Exp - Term .)
    repeat          reduce using rule 49 (Exp -> Exp - Term .)
    num             reduce using rule 49 (Exp -> Exp - Term .)
    (               reduce using rule 49 (Exp -> Exp - Term .)
    )               reduce using rule 49 (Exp -> Exp - Term .)
    sup             reduce using rule 49 (Exp -> Exp - Term .)
    inf             reduce using rule 49 (Exp -> Exp - Term .)
    supeq           reduce using rule 49 (Exp -> Exp - Term .)
    infeq           reduce using rule 49 (Exp -> Exp - Term .)
    eq              reduce using rule 49 (Exp -> Exp - Term .)
    diff            reduce using rule 49 (Exp -> Exp - Term .)
    ;               reduce using rule 49 (Exp -> Exp - Term .)
    ]               reduce using rule 49 (Exp -> Exp - Term .)
    and             reduce using rule 49 (Exp -> Exp - Term .)
    or              reduce using rule 49 (Exp -> Exp - Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 112

    (38) Attr -> id = Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    }               reduce using rule 38 (Attr -> id = Exp .)
    id              reduce using rule 38 (Attr -> id = Exp .)
    gid             reduce using rule 38 (Attr -> id = Exp .)
    return          reduce using rule 38 (Attr -> id = Exp .)
    print           reduce using rule 38 (Attr -> id = Exp .)
    println         reduce using rule 38 (Attr -> id = Exp .)
    prints          reduce using rule 38 (Attr -> id = Exp .)
    for             reduce using rule 38 (Attr -> id = Exp .)
    while           reduce using rule 38 (Attr -> id = Exp .)
    read            reduce using rule 38 (Attr -> id = Exp .)
    if              reduce using rule 38 (Attr -> id = Exp .)
    repeat          reduce using rule 38 (Attr -> id = Exp .)
    num             reduce using rule 38 (Attr -> id = Exp .)
    (               reduce using rule 38 (Attr -> id = Exp .)
    ;               reduce using rule 38 (Attr -> id = Exp .)
    )               reduce using rule 38 (Attr -> id = Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 113

    (39) Attr -> id [ Exp . ] = Exp
    (40) Attr -> id [ Exp . ] [ Exp ] = Exp
    (88) Factor -> id [ Exp . ]
    (89) Factor -> id [ Exp . ] [ Exp ]
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    ]               shift and go to state 168
    +               shift and go to state 51
    -               shift and go to state 52


state 114

    (50) Exp -> id addeq Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 50 (Exp -> id addeq Term .)
    -               reduce using rule 50 (Exp -> id addeq Term .)
    }               reduce using rule 50 (Exp -> id addeq Term .)
    id              reduce using rule 50 (Exp -> id addeq Term .)
    gid             reduce using rule 50 (Exp -> id addeq Term .)
    return          reduce using rule 50 (Exp -> id addeq Term .)
    print           reduce using rule 50 (Exp -> id addeq Term .)
    println         reduce using rule 50 (Exp -> id addeq Term .)
    prints          reduce using rule 50 (Exp -> id addeq Term .)
    for             reduce using rule 50 (Exp -> id addeq Term .)
    while           reduce using rule 50 (Exp -> id addeq Term .)
    read            reduce using rule 50 (Exp -> id addeq Term .)
    if              reduce using rule 50 (Exp -> id addeq Term .)
    repeat          reduce using rule 50 (Exp -> id addeq Term .)
    num             reduce using rule 50 (Exp -> id addeq Term .)
    (               reduce using rule 50 (Exp -> id addeq Term .)
    )               reduce using rule 50 (Exp -> id addeq Term .)
    sup             reduce using rule 50 (Exp -> id addeq Term .)
    inf             reduce using rule 50 (Exp -> id addeq Term .)
    supeq           reduce using rule 50 (Exp -> id addeq Term .)
    infeq           reduce using rule 50 (Exp -> id addeq Term .)
    eq              reduce using rule 50 (Exp -> id addeq Term .)
    diff            reduce using rule 50 (Exp -> id addeq Term .)
    ;               reduce using rule 50 (Exp -> id addeq Term .)
    ]               reduce using rule 50 (Exp -> id addeq Term .)
    and             reduce using rule 50 (Exp -> id addeq Term .)
    or              reduce using rule 50 (Exp -> id addeq Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 115

    (51) Exp -> id subeq Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 51 (Exp -> id subeq Term .)
    -               reduce using rule 51 (Exp -> id subeq Term .)
    }               reduce using rule 51 (Exp -> id subeq Term .)
    id              reduce using rule 51 (Exp -> id subeq Term .)
    gid             reduce using rule 51 (Exp -> id subeq Term .)
    return          reduce using rule 51 (Exp -> id subeq Term .)
    print           reduce using rule 51 (Exp -> id subeq Term .)
    println         reduce using rule 51 (Exp -> id subeq Term .)
    prints          reduce using rule 51 (Exp -> id subeq Term .)
    for             reduce using rule 51 (Exp -> id subeq Term .)
    while           reduce using rule 51 (Exp -> id subeq Term .)
    read            reduce using rule 51 (Exp -> id subeq Term .)
    if              reduce using rule 51 (Exp -> id subeq Term .)
    repeat          reduce using rule 51 (Exp -> id subeq Term .)
    num             reduce using rule 51 (Exp -> id subeq Term .)
    (               reduce using rule 51 (Exp -> id subeq Term .)
    )               reduce using rule 51 (Exp -> id subeq Term .)
    sup             reduce using rule 51 (Exp -> id subeq Term .)
    inf             reduce using rule 51 (Exp -> id subeq Term .)
    supeq           reduce using rule 51 (Exp -> id subeq Term .)
    infeq           reduce using rule 51 (Exp -> id subeq Term .)
    eq              reduce using rule 51 (Exp -> id subeq Term .)
    diff            reduce using rule 51 (Exp -> id subeq Term .)
    ;               reduce using rule 51 (Exp -> id subeq Term .)
    ]               reduce using rule 51 (Exp -> id subeq Term .)
    and             reduce using rule 51 (Exp -> id subeq Term .)
    or              reduce using rule 51 (Exp -> id subeq Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 116

    (52) Exp -> id addeql Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 52 (Exp -> id addeql Term .)
    -               reduce using rule 52 (Exp -> id addeql Term .)
    }               reduce using rule 52 (Exp -> id addeql Term .)
    id              reduce using rule 52 (Exp -> id addeql Term .)
    gid             reduce using rule 52 (Exp -> id addeql Term .)
    return          reduce using rule 52 (Exp -> id addeql Term .)
    print           reduce using rule 52 (Exp -> id addeql Term .)
    println         reduce using rule 52 (Exp -> id addeql Term .)
    prints          reduce using rule 52 (Exp -> id addeql Term .)
    for             reduce using rule 52 (Exp -> id addeql Term .)
    while           reduce using rule 52 (Exp -> id addeql Term .)
    read            reduce using rule 52 (Exp -> id addeql Term .)
    if              reduce using rule 52 (Exp -> id addeql Term .)
    repeat          reduce using rule 52 (Exp -> id addeql Term .)
    num             reduce using rule 52 (Exp -> id addeql Term .)
    (               reduce using rule 52 (Exp -> id addeql Term .)
    )               reduce using rule 52 (Exp -> id addeql Term .)
    sup             reduce using rule 52 (Exp -> id addeql Term .)
    inf             reduce using rule 52 (Exp -> id addeql Term .)
    supeq           reduce using rule 52 (Exp -> id addeql Term .)
    infeq           reduce using rule 52 (Exp -> id addeql Term .)
    eq              reduce using rule 52 (Exp -> id addeql Term .)
    diff            reduce using rule 52 (Exp -> id addeql Term .)
    ;               reduce using rule 52 (Exp -> id addeql Term .)
    ]               reduce using rule 52 (Exp -> id addeql Term .)
    and             reduce using rule 52 (Exp -> id addeql Term .)
    or              reduce using rule 52 (Exp -> id addeql Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 117

    (53) Exp -> id subeql Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 53 (Exp -> id subeql Term .)
    -               reduce using rule 53 (Exp -> id subeql Term .)
    }               reduce using rule 53 (Exp -> id subeql Term .)
    id              reduce using rule 53 (Exp -> id subeql Term .)
    gid             reduce using rule 53 (Exp -> id subeql Term .)
    return          reduce using rule 53 (Exp -> id subeql Term .)
    print           reduce using rule 53 (Exp -> id subeql Term .)
    println         reduce using rule 53 (Exp -> id subeql Term .)
    prints          reduce using rule 53 (Exp -> id subeql Term .)
    for             reduce using rule 53 (Exp -> id subeql Term .)
    while           reduce using rule 53 (Exp -> id subeql Term .)
    read            reduce using rule 53 (Exp -> id subeql Term .)
    if              reduce using rule 53 (Exp -> id subeql Term .)
    repeat          reduce using rule 53 (Exp -> id subeql Term .)
    num             reduce using rule 53 (Exp -> id subeql Term .)
    (               reduce using rule 53 (Exp -> id subeql Term .)
    )               reduce using rule 53 (Exp -> id subeql Term .)
    sup             reduce using rule 53 (Exp -> id subeql Term .)
    inf             reduce using rule 53 (Exp -> id subeql Term .)
    supeq           reduce using rule 53 (Exp -> id subeql Term .)
    infeq           reduce using rule 53 (Exp -> id subeql Term .)
    eq              reduce using rule 53 (Exp -> id subeql Term .)
    diff            reduce using rule 53 (Exp -> id subeql Term .)
    ;               reduce using rule 53 (Exp -> id subeql Term .)
    ]               reduce using rule 53 (Exp -> id subeql Term .)
    and             reduce using rule 53 (Exp -> id subeql Term .)
    or              reduce using rule 53 (Exp -> id subeql Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 118

    (75) Factor -> id . plus
    (76) Factor -> id . plusl
    (77) Factor -> id . minus
    (78) Factor -> id . minusl
    (83) Factor -> id .
    (86) Factor -> id . ( )
    (88) Factor -> id . [ Exp ]
    (89) Factor -> id . [ Exp ] [ Exp ]

  ! shift/reduce conflict for ( resolved as shift
    plus            shift and go to state 65
    plusl           shift and go to state 66
    minus           shift and go to state 67
    minusl          shift and go to state 68
    *               reduce using rule 83 (Factor -> id .)
    /               reduce using rule 83 (Factor -> id .)
    %               reduce using rule 83 (Factor -> id .)
    +               reduce using rule 83 (Factor -> id .)
    -               reduce using rule 83 (Factor -> id .)
    }               reduce using rule 83 (Factor -> id .)
    id              reduce using rule 83 (Factor -> id .)
    gid             reduce using rule 83 (Factor -> id .)
    return          reduce using rule 83 (Factor -> id .)
    print           reduce using rule 83 (Factor -> id .)
    println         reduce using rule 83 (Factor -> id .)
    prints          reduce using rule 83 (Factor -> id .)
    for             reduce using rule 83 (Factor -> id .)
    while           reduce using rule 83 (Factor -> id .)
    read            reduce using rule 83 (Factor -> id .)
    if              reduce using rule 83 (Factor -> id .)
    repeat          reduce using rule 83 (Factor -> id .)
    num             reduce using rule 83 (Factor -> id .)
    )               reduce using rule 83 (Factor -> id .)
    sup             reduce using rule 83 (Factor -> id .)
    inf             reduce using rule 83 (Factor -> id .)
    supeq           reduce using rule 83 (Factor -> id .)
    infeq           reduce using rule 83 (Factor -> id .)
    eq              reduce using rule 83 (Factor -> id .)
    diff            reduce using rule 83 (Factor -> id .)
    ;               reduce using rule 83 (Factor -> id .)
    ]               reduce using rule 83 (Factor -> id .)
    and             reduce using rule 83 (Factor -> id .)
    or              reduce using rule 83 (Factor -> id .)
    (               shift and go to state 69
    [               shift and go to state 152

  ! (               [ reduce using rule 83 (Factor -> id .) ]


state 119

    (62) Term -> id muleq Factor .

    *               reduce using rule 62 (Term -> id muleq Factor .)
    /               reduce using rule 62 (Term -> id muleq Factor .)
    %               reduce using rule 62 (Term -> id muleq Factor .)
    +               reduce using rule 62 (Term -> id muleq Factor .)
    -               reduce using rule 62 (Term -> id muleq Factor .)
    }               reduce using rule 62 (Term -> id muleq Factor .)
    id              reduce using rule 62 (Term -> id muleq Factor .)
    gid             reduce using rule 62 (Term -> id muleq Factor .)
    return          reduce using rule 62 (Term -> id muleq Factor .)
    print           reduce using rule 62 (Term -> id muleq Factor .)
    println         reduce using rule 62 (Term -> id muleq Factor .)
    prints          reduce using rule 62 (Term -> id muleq Factor .)
    for             reduce using rule 62 (Term -> id muleq Factor .)
    while           reduce using rule 62 (Term -> id muleq Factor .)
    read            reduce using rule 62 (Term -> id muleq Factor .)
    if              reduce using rule 62 (Term -> id muleq Factor .)
    repeat          reduce using rule 62 (Term -> id muleq Factor .)
    num             reduce using rule 62 (Term -> id muleq Factor .)
    (               reduce using rule 62 (Term -> id muleq Factor .)
    )               reduce using rule 62 (Term -> id muleq Factor .)
    sup             reduce using rule 62 (Term -> id muleq Factor .)
    inf             reduce using rule 62 (Term -> id muleq Factor .)
    supeq           reduce using rule 62 (Term -> id muleq Factor .)
    infeq           reduce using rule 62 (Term -> id muleq Factor .)
    eq              reduce using rule 62 (Term -> id muleq Factor .)
    diff            reduce using rule 62 (Term -> id muleq Factor .)
    ;               reduce using rule 62 (Term -> id muleq Factor .)
    ]               reduce using rule 62 (Term -> id muleq Factor .)
    and             reduce using rule 62 (Term -> id muleq Factor .)
    or              reduce using rule 62 (Term -> id muleq Factor .)


state 120

    (79) Factor -> gid . plus
    (80) Factor -> gid . plusl
    (81) Factor -> gid . minus
    (82) Factor -> gid . minusl
    (84) Factor -> gid .
    (90) Factor -> gid . [ Exp ]
    (91) Factor -> gid . [ Exp ] [ Exp ]

    plus            shift and go to state 82
    plusl           shift and go to state 83
    minus           shift and go to state 84
    minusl          shift and go to state 85
    *               reduce using rule 84 (Factor -> gid .)
    /               reduce using rule 84 (Factor -> gid .)
    %               reduce using rule 84 (Factor -> gid .)
    +               reduce using rule 84 (Factor -> gid .)
    -               reduce using rule 84 (Factor -> gid .)
    }               reduce using rule 84 (Factor -> gid .)
    id              reduce using rule 84 (Factor -> gid .)
    gid             reduce using rule 84 (Factor -> gid .)
    return          reduce using rule 84 (Factor -> gid .)
    print           reduce using rule 84 (Factor -> gid .)
    println         reduce using rule 84 (Factor -> gid .)
    prints          reduce using rule 84 (Factor -> gid .)
    for             reduce using rule 84 (Factor -> gid .)
    while           reduce using rule 84 (Factor -> gid .)
    read            reduce using rule 84 (Factor -> gid .)
    if              reduce using rule 84 (Factor -> gid .)
    repeat          reduce using rule 84 (Factor -> gid .)
    num             reduce using rule 84 (Factor -> gid .)
    (               reduce using rule 84 (Factor -> gid .)
    )               reduce using rule 84 (Factor -> gid .)
    sup             reduce using rule 84 (Factor -> gid .)
    inf             reduce using rule 84 (Factor -> gid .)
    supeq           reduce using rule 84 (Factor -> gid .)
    infeq           reduce using rule 84 (Factor -> gid .)
    eq              reduce using rule 84 (Factor -> gid .)
    diff            reduce using rule 84 (Factor -> gid .)
    ;               reduce using rule 84 (Factor -> gid .)
    ]               reduce using rule 84 (Factor -> gid .)
    and             reduce using rule 84 (Factor -> gid .)
    or              reduce using rule 84 (Factor -> gid .)
    [               shift and go to state 153


state 121

    (63) Term -> id diveq Factor .

    *               reduce using rule 63 (Term -> id diveq Factor .)
    /               reduce using rule 63 (Term -> id diveq Factor .)
    %               reduce using rule 63 (Term -> id diveq Factor .)
    +               reduce using rule 63 (Term -> id diveq Factor .)
    -               reduce using rule 63 (Term -> id diveq Factor .)
    }               reduce using rule 63 (Term -> id diveq Factor .)
    id              reduce using rule 63 (Term -> id diveq Factor .)
    gid             reduce using rule 63 (Term -> id diveq Factor .)
    return          reduce using rule 63 (Term -> id diveq Factor .)
    print           reduce using rule 63 (Term -> id diveq Factor .)
    println         reduce using rule 63 (Term -> id diveq Factor .)
    prints          reduce using rule 63 (Term -> id diveq Factor .)
    for             reduce using rule 63 (Term -> id diveq Factor .)
    while           reduce using rule 63 (Term -> id diveq Factor .)
    read            reduce using rule 63 (Term -> id diveq Factor .)
    if              reduce using rule 63 (Term -> id diveq Factor .)
    repeat          reduce using rule 63 (Term -> id diveq Factor .)
    num             reduce using rule 63 (Term -> id diveq Factor .)
    (               reduce using rule 63 (Term -> id diveq Factor .)
    )               reduce using rule 63 (Term -> id diveq Factor .)
    sup             reduce using rule 63 (Term -> id diveq Factor .)
    inf             reduce using rule 63 (Term -> id diveq Factor .)
    supeq           reduce using rule 63 (Term -> id diveq Factor .)
    infeq           reduce using rule 63 (Term -> id diveq Factor .)
    eq              reduce using rule 63 (Term -> id diveq Factor .)
    diff            reduce using rule 63 (Term -> id diveq Factor .)
    ;               reduce using rule 63 (Term -> id diveq Factor .)
    ]               reduce using rule 63 (Term -> id diveq Factor .)
    and             reduce using rule 63 (Term -> id diveq Factor .)
    or              reduce using rule 63 (Term -> id diveq Factor .)


state 122

    (64) Term -> id modeq Factor .

    *               reduce using rule 64 (Term -> id modeq Factor .)
    /               reduce using rule 64 (Term -> id modeq Factor .)
    %               reduce using rule 64 (Term -> id modeq Factor .)
    +               reduce using rule 64 (Term -> id modeq Factor .)
    -               reduce using rule 64 (Term -> id modeq Factor .)
    }               reduce using rule 64 (Term -> id modeq Factor .)
    id              reduce using rule 64 (Term -> id modeq Factor .)
    gid             reduce using rule 64 (Term -> id modeq Factor .)
    return          reduce using rule 64 (Term -> id modeq Factor .)
    print           reduce using rule 64 (Term -> id modeq Factor .)
    println         reduce using rule 64 (Term -> id modeq Factor .)
    prints          reduce using rule 64 (Term -> id modeq Factor .)
    for             reduce using rule 64 (Term -> id modeq Factor .)
    while           reduce using rule 64 (Term -> id modeq Factor .)
    read            reduce using rule 64 (Term -> id modeq Factor .)
    if              reduce using rule 64 (Term -> id modeq Factor .)
    repeat          reduce using rule 64 (Term -> id modeq Factor .)
    num             reduce using rule 64 (Term -> id modeq Factor .)
    (               reduce using rule 64 (Term -> id modeq Factor .)
    )               reduce using rule 64 (Term -> id modeq Factor .)
    sup             reduce using rule 64 (Term -> id modeq Factor .)
    inf             reduce using rule 64 (Term -> id modeq Factor .)
    supeq           reduce using rule 64 (Term -> id modeq Factor .)
    infeq           reduce using rule 64 (Term -> id modeq Factor .)
    eq              reduce using rule 64 (Term -> id modeq Factor .)
    diff            reduce using rule 64 (Term -> id modeq Factor .)
    ;               reduce using rule 64 (Term -> id modeq Factor .)
    ]               reduce using rule 64 (Term -> id modeq Factor .)
    and             reduce using rule 64 (Term -> id modeq Factor .)
    or              reduce using rule 64 (Term -> id modeq Factor .)


state 123

    (65) Term -> id muleql Factor .

    *               reduce using rule 65 (Term -> id muleql Factor .)
    /               reduce using rule 65 (Term -> id muleql Factor .)
    %               reduce using rule 65 (Term -> id muleql Factor .)
    +               reduce using rule 65 (Term -> id muleql Factor .)
    -               reduce using rule 65 (Term -> id muleql Factor .)
    }               reduce using rule 65 (Term -> id muleql Factor .)
    id              reduce using rule 65 (Term -> id muleql Factor .)
    gid             reduce using rule 65 (Term -> id muleql Factor .)
    return          reduce using rule 65 (Term -> id muleql Factor .)
    print           reduce using rule 65 (Term -> id muleql Factor .)
    println         reduce using rule 65 (Term -> id muleql Factor .)
    prints          reduce using rule 65 (Term -> id muleql Factor .)
    for             reduce using rule 65 (Term -> id muleql Factor .)
    while           reduce using rule 65 (Term -> id muleql Factor .)
    read            reduce using rule 65 (Term -> id muleql Factor .)
    if              reduce using rule 65 (Term -> id muleql Factor .)
    repeat          reduce using rule 65 (Term -> id muleql Factor .)
    num             reduce using rule 65 (Term -> id muleql Factor .)
    (               reduce using rule 65 (Term -> id muleql Factor .)
    )               reduce using rule 65 (Term -> id muleql Factor .)
    sup             reduce using rule 65 (Term -> id muleql Factor .)
    inf             reduce using rule 65 (Term -> id muleql Factor .)
    supeq           reduce using rule 65 (Term -> id muleql Factor .)
    infeq           reduce using rule 65 (Term -> id muleql Factor .)
    eq              reduce using rule 65 (Term -> id muleql Factor .)
    diff            reduce using rule 65 (Term -> id muleql Factor .)
    ;               reduce using rule 65 (Term -> id muleql Factor .)
    ]               reduce using rule 65 (Term -> id muleql Factor .)
    and             reduce using rule 65 (Term -> id muleql Factor .)
    or              reduce using rule 65 (Term -> id muleql Factor .)


state 124

    (66) Term -> id diveql Factor .

    *               reduce using rule 66 (Term -> id diveql Factor .)
    /               reduce using rule 66 (Term -> id diveql Factor .)
    %               reduce using rule 66 (Term -> id diveql Factor .)
    +               reduce using rule 66 (Term -> id diveql Factor .)
    -               reduce using rule 66 (Term -> id diveql Factor .)
    }               reduce using rule 66 (Term -> id diveql Factor .)
    id              reduce using rule 66 (Term -> id diveql Factor .)
    gid             reduce using rule 66 (Term -> id diveql Factor .)
    return          reduce using rule 66 (Term -> id diveql Factor .)
    print           reduce using rule 66 (Term -> id diveql Factor .)
    println         reduce using rule 66 (Term -> id diveql Factor .)
    prints          reduce using rule 66 (Term -> id diveql Factor .)
    for             reduce using rule 66 (Term -> id diveql Factor .)
    while           reduce using rule 66 (Term -> id diveql Factor .)
    read            reduce using rule 66 (Term -> id diveql Factor .)
    if              reduce using rule 66 (Term -> id diveql Factor .)
    repeat          reduce using rule 66 (Term -> id diveql Factor .)
    num             reduce using rule 66 (Term -> id diveql Factor .)
    (               reduce using rule 66 (Term -> id diveql Factor .)
    )               reduce using rule 66 (Term -> id diveql Factor .)
    sup             reduce using rule 66 (Term -> id diveql Factor .)
    inf             reduce using rule 66 (Term -> id diveql Factor .)
    supeq           reduce using rule 66 (Term -> id diveql Factor .)
    infeq           reduce using rule 66 (Term -> id diveql Factor .)
    eq              reduce using rule 66 (Term -> id diveql Factor .)
    diff            reduce using rule 66 (Term -> id diveql Factor .)
    ;               reduce using rule 66 (Term -> id diveql Factor .)
    ]               reduce using rule 66 (Term -> id diveql Factor .)
    and             reduce using rule 66 (Term -> id diveql Factor .)
    or              reduce using rule 66 (Term -> id diveql Factor .)


state 125

    (67) Term -> id modeql Factor .

    *               reduce using rule 67 (Term -> id modeql Factor .)
    /               reduce using rule 67 (Term -> id modeql Factor .)
    %               reduce using rule 67 (Term -> id modeql Factor .)
    +               reduce using rule 67 (Term -> id modeql Factor .)
    -               reduce using rule 67 (Term -> id modeql Factor .)
    }               reduce using rule 67 (Term -> id modeql Factor .)
    id              reduce using rule 67 (Term -> id modeql Factor .)
    gid             reduce using rule 67 (Term -> id modeql Factor .)
    return          reduce using rule 67 (Term -> id modeql Factor .)
    print           reduce using rule 67 (Term -> id modeql Factor .)
    println         reduce using rule 67 (Term -> id modeql Factor .)
    prints          reduce using rule 67 (Term -> id modeql Factor .)
    for             reduce using rule 67 (Term -> id modeql Factor .)
    while           reduce using rule 67 (Term -> id modeql Factor .)
    read            reduce using rule 67 (Term -> id modeql Factor .)
    if              reduce using rule 67 (Term -> id modeql Factor .)
    repeat          reduce using rule 67 (Term -> id modeql Factor .)
    num             reduce using rule 67 (Term -> id modeql Factor .)
    (               reduce using rule 67 (Term -> id modeql Factor .)
    )               reduce using rule 67 (Term -> id modeql Factor .)
    sup             reduce using rule 67 (Term -> id modeql Factor .)
    inf             reduce using rule 67 (Term -> id modeql Factor .)
    supeq           reduce using rule 67 (Term -> id modeql Factor .)
    infeq           reduce using rule 67 (Term -> id modeql Factor .)
    eq              reduce using rule 67 (Term -> id modeql Factor .)
    diff            reduce using rule 67 (Term -> id modeql Factor .)
    ;               reduce using rule 67 (Term -> id modeql Factor .)
    ]               reduce using rule 67 (Term -> id modeql Factor .)
    and             reduce using rule 67 (Term -> id modeql Factor .)
    or              reduce using rule 67 (Term -> id modeql Factor .)


state 126

    (86) Factor -> id ( ) .

    *               reduce using rule 86 (Factor -> id ( ) .)
    /               reduce using rule 86 (Factor -> id ( ) .)
    %               reduce using rule 86 (Factor -> id ( ) .)
    +               reduce using rule 86 (Factor -> id ( ) .)
    -               reduce using rule 86 (Factor -> id ( ) .)
    }               reduce using rule 86 (Factor -> id ( ) .)
    id              reduce using rule 86 (Factor -> id ( ) .)
    gid             reduce using rule 86 (Factor -> id ( ) .)
    return          reduce using rule 86 (Factor -> id ( ) .)
    print           reduce using rule 86 (Factor -> id ( ) .)
    println         reduce using rule 86 (Factor -> id ( ) .)
    prints          reduce using rule 86 (Factor -> id ( ) .)
    for             reduce using rule 86 (Factor -> id ( ) .)
    while           reduce using rule 86 (Factor -> id ( ) .)
    read            reduce using rule 86 (Factor -> id ( ) .)
    if              reduce using rule 86 (Factor -> id ( ) .)
    repeat          reduce using rule 86 (Factor -> id ( ) .)
    num             reduce using rule 86 (Factor -> id ( ) .)
    (               reduce using rule 86 (Factor -> id ( ) .)
    )               reduce using rule 86 (Factor -> id ( ) .)
    sup             reduce using rule 86 (Factor -> id ( ) .)
    inf             reduce using rule 86 (Factor -> id ( ) .)
    supeq           reduce using rule 86 (Factor -> id ( ) .)
    infeq           reduce using rule 86 (Factor -> id ( ) .)
    eq              reduce using rule 86 (Factor -> id ( ) .)
    diff            reduce using rule 86 (Factor -> id ( ) .)
    ;               reduce using rule 86 (Factor -> id ( ) .)
    ]               reduce using rule 86 (Factor -> id ( ) .)
    and             reduce using rule 86 (Factor -> id ( ) .)
    or              reduce using rule 86 (Factor -> id ( ) .)


state 127

    (41) Attr -> gid = Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    }               reduce using rule 41 (Attr -> gid = Exp .)
    id              reduce using rule 41 (Attr -> gid = Exp .)
    gid             reduce using rule 41 (Attr -> gid = Exp .)
    return          reduce using rule 41 (Attr -> gid = Exp .)
    print           reduce using rule 41 (Attr -> gid = Exp .)
    println         reduce using rule 41 (Attr -> gid = Exp .)
    prints          reduce using rule 41 (Attr -> gid = Exp .)
    for             reduce using rule 41 (Attr -> gid = Exp .)
    while           reduce using rule 41 (Attr -> gid = Exp .)
    read            reduce using rule 41 (Attr -> gid = Exp .)
    if              reduce using rule 41 (Attr -> gid = Exp .)
    repeat          reduce using rule 41 (Attr -> gid = Exp .)
    num             reduce using rule 41 (Attr -> gid = Exp .)
    (               reduce using rule 41 (Attr -> gid = Exp .)
    ;               reduce using rule 41 (Attr -> gid = Exp .)
    )               reduce using rule 41 (Attr -> gid = Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 128

    (42) Attr -> gid [ Exp . ] = Exp
    (43) Attr -> gid [ Exp . ] [ Exp ] = Exp
    (90) Factor -> gid [ Exp . ]
    (91) Factor -> gid [ Exp . ] [ Exp ]
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    ]               shift and go to state 169
    +               shift and go to state 51
    -               shift and go to state 52


state 129

    (54) Exp -> gid addeq Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 54 (Exp -> gid addeq Term .)
    -               reduce using rule 54 (Exp -> gid addeq Term .)
    }               reduce using rule 54 (Exp -> gid addeq Term .)
    id              reduce using rule 54 (Exp -> gid addeq Term .)
    gid             reduce using rule 54 (Exp -> gid addeq Term .)
    return          reduce using rule 54 (Exp -> gid addeq Term .)
    print           reduce using rule 54 (Exp -> gid addeq Term .)
    println         reduce using rule 54 (Exp -> gid addeq Term .)
    prints          reduce using rule 54 (Exp -> gid addeq Term .)
    for             reduce using rule 54 (Exp -> gid addeq Term .)
    while           reduce using rule 54 (Exp -> gid addeq Term .)
    read            reduce using rule 54 (Exp -> gid addeq Term .)
    if              reduce using rule 54 (Exp -> gid addeq Term .)
    repeat          reduce using rule 54 (Exp -> gid addeq Term .)
    num             reduce using rule 54 (Exp -> gid addeq Term .)
    (               reduce using rule 54 (Exp -> gid addeq Term .)
    )               reduce using rule 54 (Exp -> gid addeq Term .)
    sup             reduce using rule 54 (Exp -> gid addeq Term .)
    inf             reduce using rule 54 (Exp -> gid addeq Term .)
    supeq           reduce using rule 54 (Exp -> gid addeq Term .)
    infeq           reduce using rule 54 (Exp -> gid addeq Term .)
    eq              reduce using rule 54 (Exp -> gid addeq Term .)
    diff            reduce using rule 54 (Exp -> gid addeq Term .)
    ;               reduce using rule 54 (Exp -> gid addeq Term .)
    ]               reduce using rule 54 (Exp -> gid addeq Term .)
    and             reduce using rule 54 (Exp -> gid addeq Term .)
    or              reduce using rule 54 (Exp -> gid addeq Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 130

    (55) Exp -> gid subeq Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 55 (Exp -> gid subeq Term .)
    -               reduce using rule 55 (Exp -> gid subeq Term .)
    }               reduce using rule 55 (Exp -> gid subeq Term .)
    id              reduce using rule 55 (Exp -> gid subeq Term .)
    gid             reduce using rule 55 (Exp -> gid subeq Term .)
    return          reduce using rule 55 (Exp -> gid subeq Term .)
    print           reduce using rule 55 (Exp -> gid subeq Term .)
    println         reduce using rule 55 (Exp -> gid subeq Term .)
    prints          reduce using rule 55 (Exp -> gid subeq Term .)
    for             reduce using rule 55 (Exp -> gid subeq Term .)
    while           reduce using rule 55 (Exp -> gid subeq Term .)
    read            reduce using rule 55 (Exp -> gid subeq Term .)
    if              reduce using rule 55 (Exp -> gid subeq Term .)
    repeat          reduce using rule 55 (Exp -> gid subeq Term .)
    num             reduce using rule 55 (Exp -> gid subeq Term .)
    (               reduce using rule 55 (Exp -> gid subeq Term .)
    )               reduce using rule 55 (Exp -> gid subeq Term .)
    sup             reduce using rule 55 (Exp -> gid subeq Term .)
    inf             reduce using rule 55 (Exp -> gid subeq Term .)
    supeq           reduce using rule 55 (Exp -> gid subeq Term .)
    infeq           reduce using rule 55 (Exp -> gid subeq Term .)
    eq              reduce using rule 55 (Exp -> gid subeq Term .)
    diff            reduce using rule 55 (Exp -> gid subeq Term .)
    ;               reduce using rule 55 (Exp -> gid subeq Term .)
    ]               reduce using rule 55 (Exp -> gid subeq Term .)
    and             reduce using rule 55 (Exp -> gid subeq Term .)
    or              reduce using rule 55 (Exp -> gid subeq Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 131

    (56) Exp -> gid addeql Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 56 (Exp -> gid addeql Term .)
    -               reduce using rule 56 (Exp -> gid addeql Term .)
    }               reduce using rule 56 (Exp -> gid addeql Term .)
    id              reduce using rule 56 (Exp -> gid addeql Term .)
    gid             reduce using rule 56 (Exp -> gid addeql Term .)
    return          reduce using rule 56 (Exp -> gid addeql Term .)
    print           reduce using rule 56 (Exp -> gid addeql Term .)
    println         reduce using rule 56 (Exp -> gid addeql Term .)
    prints          reduce using rule 56 (Exp -> gid addeql Term .)
    for             reduce using rule 56 (Exp -> gid addeql Term .)
    while           reduce using rule 56 (Exp -> gid addeql Term .)
    read            reduce using rule 56 (Exp -> gid addeql Term .)
    if              reduce using rule 56 (Exp -> gid addeql Term .)
    repeat          reduce using rule 56 (Exp -> gid addeql Term .)
    num             reduce using rule 56 (Exp -> gid addeql Term .)
    (               reduce using rule 56 (Exp -> gid addeql Term .)
    )               reduce using rule 56 (Exp -> gid addeql Term .)
    sup             reduce using rule 56 (Exp -> gid addeql Term .)
    inf             reduce using rule 56 (Exp -> gid addeql Term .)
    supeq           reduce using rule 56 (Exp -> gid addeql Term .)
    infeq           reduce using rule 56 (Exp -> gid addeql Term .)
    eq              reduce using rule 56 (Exp -> gid addeql Term .)
    diff            reduce using rule 56 (Exp -> gid addeql Term .)
    ;               reduce using rule 56 (Exp -> gid addeql Term .)
    ]               reduce using rule 56 (Exp -> gid addeql Term .)
    and             reduce using rule 56 (Exp -> gid addeql Term .)
    or              reduce using rule 56 (Exp -> gid addeql Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 132

    (57) Exp -> gid subeql Term .
    (59) Term -> Term . * Factor
    (60) Term -> Term . / Factor
    (61) Term -> Term . % Factor

    +               reduce using rule 57 (Exp -> gid subeql Term .)
    -               reduce using rule 57 (Exp -> gid subeql Term .)
    }               reduce using rule 57 (Exp -> gid subeql Term .)
    id              reduce using rule 57 (Exp -> gid subeql Term .)
    gid             reduce using rule 57 (Exp -> gid subeql Term .)
    return          reduce using rule 57 (Exp -> gid subeql Term .)
    print           reduce using rule 57 (Exp -> gid subeql Term .)
    println         reduce using rule 57 (Exp -> gid subeql Term .)
    prints          reduce using rule 57 (Exp -> gid subeql Term .)
    for             reduce using rule 57 (Exp -> gid subeql Term .)
    while           reduce using rule 57 (Exp -> gid subeql Term .)
    read            reduce using rule 57 (Exp -> gid subeql Term .)
    if              reduce using rule 57 (Exp -> gid subeql Term .)
    repeat          reduce using rule 57 (Exp -> gid subeql Term .)
    num             reduce using rule 57 (Exp -> gid subeql Term .)
    (               reduce using rule 57 (Exp -> gid subeql Term .)
    )               reduce using rule 57 (Exp -> gid subeql Term .)
    sup             reduce using rule 57 (Exp -> gid subeql Term .)
    inf             reduce using rule 57 (Exp -> gid subeql Term .)
    supeq           reduce using rule 57 (Exp -> gid subeql Term .)
    infeq           reduce using rule 57 (Exp -> gid subeql Term .)
    eq              reduce using rule 57 (Exp -> gid subeql Term .)
    diff            reduce using rule 57 (Exp -> gid subeql Term .)
    ;               reduce using rule 57 (Exp -> gid subeql Term .)
    ]               reduce using rule 57 (Exp -> gid subeql Term .)
    and             reduce using rule 57 (Exp -> gid subeql Term .)
    or              reduce using rule 57 (Exp -> gid subeql Term .)
    *               shift and go to state 93
    /               shift and go to state 94
    %               shift and go to state 95


state 133

    (68) Term -> gid muleq Factor .

    *               reduce using rule 68 (Term -> gid muleq Factor .)
    /               reduce using rule 68 (Term -> gid muleq Factor .)
    %               reduce using rule 68 (Term -> gid muleq Factor .)
    +               reduce using rule 68 (Term -> gid muleq Factor .)
    -               reduce using rule 68 (Term -> gid muleq Factor .)
    }               reduce using rule 68 (Term -> gid muleq Factor .)
    id              reduce using rule 68 (Term -> gid muleq Factor .)
    gid             reduce using rule 68 (Term -> gid muleq Factor .)
    return          reduce using rule 68 (Term -> gid muleq Factor .)
    print           reduce using rule 68 (Term -> gid muleq Factor .)
    println         reduce using rule 68 (Term -> gid muleq Factor .)
    prints          reduce using rule 68 (Term -> gid muleq Factor .)
    for             reduce using rule 68 (Term -> gid muleq Factor .)
    while           reduce using rule 68 (Term -> gid muleq Factor .)
    read            reduce using rule 68 (Term -> gid muleq Factor .)
    if              reduce using rule 68 (Term -> gid muleq Factor .)
    repeat          reduce using rule 68 (Term -> gid muleq Factor .)
    num             reduce using rule 68 (Term -> gid muleq Factor .)
    (               reduce using rule 68 (Term -> gid muleq Factor .)
    )               reduce using rule 68 (Term -> gid muleq Factor .)
    sup             reduce using rule 68 (Term -> gid muleq Factor .)
    inf             reduce using rule 68 (Term -> gid muleq Factor .)
    supeq           reduce using rule 68 (Term -> gid muleq Factor .)
    infeq           reduce using rule 68 (Term -> gid muleq Factor .)
    eq              reduce using rule 68 (Term -> gid muleq Factor .)
    diff            reduce using rule 68 (Term -> gid muleq Factor .)
    ;               reduce using rule 68 (Term -> gid muleq Factor .)
    ]               reduce using rule 68 (Term -> gid muleq Factor .)
    and             reduce using rule 68 (Term -> gid muleq Factor .)
    or              reduce using rule 68 (Term -> gid muleq Factor .)


state 134

    (69) Term -> gid diveq Factor .

    *               reduce using rule 69 (Term -> gid diveq Factor .)
    /               reduce using rule 69 (Term -> gid diveq Factor .)
    %               reduce using rule 69 (Term -> gid diveq Factor .)
    +               reduce using rule 69 (Term -> gid diveq Factor .)
    -               reduce using rule 69 (Term -> gid diveq Factor .)
    }               reduce using rule 69 (Term -> gid diveq Factor .)
    id              reduce using rule 69 (Term -> gid diveq Factor .)
    gid             reduce using rule 69 (Term -> gid diveq Factor .)
    return          reduce using rule 69 (Term -> gid diveq Factor .)
    print           reduce using rule 69 (Term -> gid diveq Factor .)
    println         reduce using rule 69 (Term -> gid diveq Factor .)
    prints          reduce using rule 69 (Term -> gid diveq Factor .)
    for             reduce using rule 69 (Term -> gid diveq Factor .)
    while           reduce using rule 69 (Term -> gid diveq Factor .)
    read            reduce using rule 69 (Term -> gid diveq Factor .)
    if              reduce using rule 69 (Term -> gid diveq Factor .)
    repeat          reduce using rule 69 (Term -> gid diveq Factor .)
    num             reduce using rule 69 (Term -> gid diveq Factor .)
    (               reduce using rule 69 (Term -> gid diveq Factor .)
    )               reduce using rule 69 (Term -> gid diveq Factor .)
    sup             reduce using rule 69 (Term -> gid diveq Factor .)
    inf             reduce using rule 69 (Term -> gid diveq Factor .)
    supeq           reduce using rule 69 (Term -> gid diveq Factor .)
    infeq           reduce using rule 69 (Term -> gid diveq Factor .)
    eq              reduce using rule 69 (Term -> gid diveq Factor .)
    diff            reduce using rule 69 (Term -> gid diveq Factor .)
    ;               reduce using rule 69 (Term -> gid diveq Factor .)
    ]               reduce using rule 69 (Term -> gid diveq Factor .)
    and             reduce using rule 69 (Term -> gid diveq Factor .)
    or              reduce using rule 69 (Term -> gid diveq Factor .)


state 135

    (70) Term -> gid modeq Factor .

    *               reduce using rule 70 (Term -> gid modeq Factor .)
    /               reduce using rule 70 (Term -> gid modeq Factor .)
    %               reduce using rule 70 (Term -> gid modeq Factor .)
    +               reduce using rule 70 (Term -> gid modeq Factor .)
    -               reduce using rule 70 (Term -> gid modeq Factor .)
    }               reduce using rule 70 (Term -> gid modeq Factor .)
    id              reduce using rule 70 (Term -> gid modeq Factor .)
    gid             reduce using rule 70 (Term -> gid modeq Factor .)
    return          reduce using rule 70 (Term -> gid modeq Factor .)
    print           reduce using rule 70 (Term -> gid modeq Factor .)
    println         reduce using rule 70 (Term -> gid modeq Factor .)
    prints          reduce using rule 70 (Term -> gid modeq Factor .)
    for             reduce using rule 70 (Term -> gid modeq Factor .)
    while           reduce using rule 70 (Term -> gid modeq Factor .)
    read            reduce using rule 70 (Term -> gid modeq Factor .)
    if              reduce using rule 70 (Term -> gid modeq Factor .)
    repeat          reduce using rule 70 (Term -> gid modeq Factor .)
    num             reduce using rule 70 (Term -> gid modeq Factor .)
    (               reduce using rule 70 (Term -> gid modeq Factor .)
    )               reduce using rule 70 (Term -> gid modeq Factor .)
    sup             reduce using rule 70 (Term -> gid modeq Factor .)
    inf             reduce using rule 70 (Term -> gid modeq Factor .)
    supeq           reduce using rule 70 (Term -> gid modeq Factor .)
    infeq           reduce using rule 70 (Term -> gid modeq Factor .)
    eq              reduce using rule 70 (Term -> gid modeq Factor .)
    diff            reduce using rule 70 (Term -> gid modeq Factor .)
    ;               reduce using rule 70 (Term -> gid modeq Factor .)
    ]               reduce using rule 70 (Term -> gid modeq Factor .)
    and             reduce using rule 70 (Term -> gid modeq Factor .)
    or              reduce using rule 70 (Term -> gid modeq Factor .)


state 136

    (71) Term -> gid muleql Factor .

    *               reduce using rule 71 (Term -> gid muleql Factor .)
    /               reduce using rule 71 (Term -> gid muleql Factor .)
    %               reduce using rule 71 (Term -> gid muleql Factor .)
    +               reduce using rule 71 (Term -> gid muleql Factor .)
    -               reduce using rule 71 (Term -> gid muleql Factor .)
    }               reduce using rule 71 (Term -> gid muleql Factor .)
    id              reduce using rule 71 (Term -> gid muleql Factor .)
    gid             reduce using rule 71 (Term -> gid muleql Factor .)
    return          reduce using rule 71 (Term -> gid muleql Factor .)
    print           reduce using rule 71 (Term -> gid muleql Factor .)
    println         reduce using rule 71 (Term -> gid muleql Factor .)
    prints          reduce using rule 71 (Term -> gid muleql Factor .)
    for             reduce using rule 71 (Term -> gid muleql Factor .)
    while           reduce using rule 71 (Term -> gid muleql Factor .)
    read            reduce using rule 71 (Term -> gid muleql Factor .)
    if              reduce using rule 71 (Term -> gid muleql Factor .)
    repeat          reduce using rule 71 (Term -> gid muleql Factor .)
    num             reduce using rule 71 (Term -> gid muleql Factor .)
    (               reduce using rule 71 (Term -> gid muleql Factor .)
    )               reduce using rule 71 (Term -> gid muleql Factor .)
    sup             reduce using rule 71 (Term -> gid muleql Factor .)
    inf             reduce using rule 71 (Term -> gid muleql Factor .)
    supeq           reduce using rule 71 (Term -> gid muleql Factor .)
    infeq           reduce using rule 71 (Term -> gid muleql Factor .)
    eq              reduce using rule 71 (Term -> gid muleql Factor .)
    diff            reduce using rule 71 (Term -> gid muleql Factor .)
    ;               reduce using rule 71 (Term -> gid muleql Factor .)
    ]               reduce using rule 71 (Term -> gid muleql Factor .)
    and             reduce using rule 71 (Term -> gid muleql Factor .)
    or              reduce using rule 71 (Term -> gid muleql Factor .)


state 137

    (72) Term -> gid diveql Factor .

    *               reduce using rule 72 (Term -> gid diveql Factor .)
    /               reduce using rule 72 (Term -> gid diveql Factor .)
    %               reduce using rule 72 (Term -> gid diveql Factor .)
    +               reduce using rule 72 (Term -> gid diveql Factor .)
    -               reduce using rule 72 (Term -> gid diveql Factor .)
    }               reduce using rule 72 (Term -> gid diveql Factor .)
    id              reduce using rule 72 (Term -> gid diveql Factor .)
    gid             reduce using rule 72 (Term -> gid diveql Factor .)
    return          reduce using rule 72 (Term -> gid diveql Factor .)
    print           reduce using rule 72 (Term -> gid diveql Factor .)
    println         reduce using rule 72 (Term -> gid diveql Factor .)
    prints          reduce using rule 72 (Term -> gid diveql Factor .)
    for             reduce using rule 72 (Term -> gid diveql Factor .)
    while           reduce using rule 72 (Term -> gid diveql Factor .)
    read            reduce using rule 72 (Term -> gid diveql Factor .)
    if              reduce using rule 72 (Term -> gid diveql Factor .)
    repeat          reduce using rule 72 (Term -> gid diveql Factor .)
    num             reduce using rule 72 (Term -> gid diveql Factor .)
    (               reduce using rule 72 (Term -> gid diveql Factor .)
    )               reduce using rule 72 (Term -> gid diveql Factor .)
    sup             reduce using rule 72 (Term -> gid diveql Factor .)
    inf             reduce using rule 72 (Term -> gid diveql Factor .)
    supeq           reduce using rule 72 (Term -> gid diveql Factor .)
    infeq           reduce using rule 72 (Term -> gid diveql Factor .)
    eq              reduce using rule 72 (Term -> gid diveql Factor .)
    diff            reduce using rule 72 (Term -> gid diveql Factor .)
    ;               reduce using rule 72 (Term -> gid diveql Factor .)
    ]               reduce using rule 72 (Term -> gid diveql Factor .)
    and             reduce using rule 72 (Term -> gid diveql Factor .)
    or              reduce using rule 72 (Term -> gid diveql Factor .)


state 138

    (73) Term -> gid modeql Factor .

    *               reduce using rule 73 (Term -> gid modeql Factor .)
    /               reduce using rule 73 (Term -> gid modeql Factor .)
    %               reduce using rule 73 (Term -> gid modeql Factor .)
    +               reduce using rule 73 (Term -> gid modeql Factor .)
    -               reduce using rule 73 (Term -> gid modeql Factor .)
    }               reduce using rule 73 (Term -> gid modeql Factor .)
    id              reduce using rule 73 (Term -> gid modeql Factor .)
    gid             reduce using rule 73 (Term -> gid modeql Factor .)
    return          reduce using rule 73 (Term -> gid modeql Factor .)
    print           reduce using rule 73 (Term -> gid modeql Factor .)
    println         reduce using rule 73 (Term -> gid modeql Factor .)
    prints          reduce using rule 73 (Term -> gid modeql Factor .)
    for             reduce using rule 73 (Term -> gid modeql Factor .)
    while           reduce using rule 73 (Term -> gid modeql Factor .)
    read            reduce using rule 73 (Term -> gid modeql Factor .)
    if              reduce using rule 73 (Term -> gid modeql Factor .)
    repeat          reduce using rule 73 (Term -> gid modeql Factor .)
    num             reduce using rule 73 (Term -> gid modeql Factor .)
    (               reduce using rule 73 (Term -> gid modeql Factor .)
    )               reduce using rule 73 (Term -> gid modeql Factor .)
    sup             reduce using rule 73 (Term -> gid modeql Factor .)
    inf             reduce using rule 73 (Term -> gid modeql Factor .)
    supeq           reduce using rule 73 (Term -> gid modeql Factor .)
    infeq           reduce using rule 73 (Term -> gid modeql Factor .)
    eq              reduce using rule 73 (Term -> gid modeql Factor .)
    diff            reduce using rule 73 (Term -> gid modeql Factor .)
    ;               reduce using rule 73 (Term -> gid modeql Factor .)
    ]               reduce using rule 73 (Term -> gid modeql Factor .)
    and             reduce using rule 73 (Term -> gid modeql Factor .)
    or              reduce using rule 73 (Term -> gid modeql Factor .)


state 139

    (44) Return -> return ( Exp . )
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               shift and go to state 170
    +               shift and go to state 51
    -               shift and go to state 52


state 140

    (95) Cond -> ( Cond . and Cond )
    (96) Cond -> ( Cond . or Cond )
    (87) Factor -> ( Cond . )
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

    and             shift and go to state 171
    or              shift and go to state 172
    )               shift and go to state 141


state 141

    (87) Factor -> ( Cond ) .

    *               reduce using rule 87 (Factor -> ( Cond ) .)
    /               reduce using rule 87 (Factor -> ( Cond ) .)
    %               reduce using rule 87 (Factor -> ( Cond ) .)
    +               reduce using rule 87 (Factor -> ( Cond ) .)
    -               reduce using rule 87 (Factor -> ( Cond ) .)
    }               reduce using rule 87 (Factor -> ( Cond ) .)
    id              reduce using rule 87 (Factor -> ( Cond ) .)
    gid             reduce using rule 87 (Factor -> ( Cond ) .)
    return          reduce using rule 87 (Factor -> ( Cond ) .)
    print           reduce using rule 87 (Factor -> ( Cond ) .)
    println         reduce using rule 87 (Factor -> ( Cond ) .)
    prints          reduce using rule 87 (Factor -> ( Cond ) .)
    for             reduce using rule 87 (Factor -> ( Cond ) .)
    while           reduce using rule 87 (Factor -> ( Cond ) .)
    read            reduce using rule 87 (Factor -> ( Cond ) .)
    if              reduce using rule 87 (Factor -> ( Cond ) .)
    repeat          reduce using rule 87 (Factor -> ( Cond ) .)
    num             reduce using rule 87 (Factor -> ( Cond ) .)
    (               reduce using rule 87 (Factor -> ( Cond ) .)
    )               reduce using rule 87 (Factor -> ( Cond ) .)
    sup             reduce using rule 87 (Factor -> ( Cond ) .)
    inf             reduce using rule 87 (Factor -> ( Cond ) .)
    supeq           reduce using rule 87 (Factor -> ( Cond ) .)
    infeq           reduce using rule 87 (Factor -> ( Cond ) .)
    eq              reduce using rule 87 (Factor -> ( Cond ) .)
    diff            reduce using rule 87 (Factor -> ( Cond ) .)
    ;               reduce using rule 87 (Factor -> ( Cond ) .)
    ]               reduce using rule 87 (Factor -> ( Cond ) .)
    and             reduce using rule 87 (Factor -> ( Cond ) .)
    or              reduce using rule 87 (Factor -> ( Cond ) .)


state 142

    (93) Cond -> Cond and . Cond
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 173
    Exp                            shift and go to state 163
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 143

    (94) Cond -> Cond or . Cond
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 174
    Exp                            shift and go to state 163
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 144

    (92) Factor -> ( Exp ) .

    *               reduce using rule 92 (Factor -> ( Exp ) .)
    /               reduce using rule 92 (Factor -> ( Exp ) .)
    %               reduce using rule 92 (Factor -> ( Exp ) .)
    +               reduce using rule 92 (Factor -> ( Exp ) .)
    -               reduce using rule 92 (Factor -> ( Exp ) .)
    }               reduce using rule 92 (Factor -> ( Exp ) .)
    id              reduce using rule 92 (Factor -> ( Exp ) .)
    gid             reduce using rule 92 (Factor -> ( Exp ) .)
    return          reduce using rule 92 (Factor -> ( Exp ) .)
    print           reduce using rule 92 (Factor -> ( Exp ) .)
    println         reduce using rule 92 (Factor -> ( Exp ) .)
    prints          reduce using rule 92 (Factor -> ( Exp ) .)
    for             reduce using rule 92 (Factor -> ( Exp ) .)
    while           reduce using rule 92 (Factor -> ( Exp ) .)
    read            reduce using rule 92 (Factor -> ( Exp ) .)
    if              reduce using rule 92 (Factor -> ( Exp ) .)
    repeat          reduce using rule 92 (Factor -> ( Exp ) .)
    num             reduce using rule 92 (Factor -> ( Exp ) .)
    (               reduce using rule 92 (Factor -> ( Exp ) .)
    )               reduce using rule 92 (Factor -> ( Exp ) .)
    sup             reduce using rule 92 (Factor -> ( Exp ) .)
    inf             reduce using rule 92 (Factor -> ( Exp ) .)
    supeq           reduce using rule 92 (Factor -> ( Exp ) .)
    infeq           reduce using rule 92 (Factor -> ( Exp ) .)
    eq              reduce using rule 92 (Factor -> ( Exp ) .)
    diff            reduce using rule 92 (Factor -> ( Exp ) .)
    ;               reduce using rule 92 (Factor -> ( Exp ) .)
    ]               reduce using rule 92 (Factor -> ( Exp ) .)
    and             reduce using rule 92 (Factor -> ( Exp ) .)
    or              reduce using rule 92 (Factor -> ( Exp ) .)


state 145

    (97) Cond -> Exp sup . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 175
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 146

    (98) Cond -> Exp inf . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 176
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 147

    (99) Cond -> Exp supeq . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 177
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 148

    (100) Cond -> Exp infeq . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 178
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 149

    (102) Cond -> Exp eq . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 179
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 150

    (103) Cond -> Exp diff . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 180
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 151

    (101) Cond -> not Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               reduce using rule 101 (Cond -> not Exp .)
    and             reduce using rule 101 (Cond -> not Exp .)
    or              reduce using rule 101 (Cond -> not Exp .)
    ;               reduce using rule 101 (Cond -> not Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 152

    (88) Factor -> id [ . Exp ]
    (89) Factor -> id [ . Exp ] [ Exp ]
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 181
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 153

    (90) Factor -> gid [ . Exp ]
    (91) Factor -> gid [ . Exp ] [ Exp ]
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 182
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 154

    (59) Term -> Term * Factor .

    *               reduce using rule 59 (Term -> Term * Factor .)
    /               reduce using rule 59 (Term -> Term * Factor .)
    %               reduce using rule 59 (Term -> Term * Factor .)
    +               reduce using rule 59 (Term -> Term * Factor .)
    -               reduce using rule 59 (Term -> Term * Factor .)
    }               reduce using rule 59 (Term -> Term * Factor .)
    id              reduce using rule 59 (Term -> Term * Factor .)
    gid             reduce using rule 59 (Term -> Term * Factor .)
    return          reduce using rule 59 (Term -> Term * Factor .)
    print           reduce using rule 59 (Term -> Term * Factor .)
    println         reduce using rule 59 (Term -> Term * Factor .)
    prints          reduce using rule 59 (Term -> Term * Factor .)
    for             reduce using rule 59 (Term -> Term * Factor .)
    while           reduce using rule 59 (Term -> Term * Factor .)
    read            reduce using rule 59 (Term -> Term * Factor .)
    if              reduce using rule 59 (Term -> Term * Factor .)
    repeat          reduce using rule 59 (Term -> Term * Factor .)
    num             reduce using rule 59 (Term -> Term * Factor .)
    (               reduce using rule 59 (Term -> Term * Factor .)
    )               reduce using rule 59 (Term -> Term * Factor .)
    sup             reduce using rule 59 (Term -> Term * Factor .)
    inf             reduce using rule 59 (Term -> Term * Factor .)
    supeq           reduce using rule 59 (Term -> Term * Factor .)
    infeq           reduce using rule 59 (Term -> Term * Factor .)
    eq              reduce using rule 59 (Term -> Term * Factor .)
    diff            reduce using rule 59 (Term -> Term * Factor .)
    ;               reduce using rule 59 (Term -> Term * Factor .)
    ]               reduce using rule 59 (Term -> Term * Factor .)
    and             reduce using rule 59 (Term -> Term * Factor .)
    or              reduce using rule 59 (Term -> Term * Factor .)


state 155

    (60) Term -> Term / Factor .

    *               reduce using rule 60 (Term -> Term / Factor .)
    /               reduce using rule 60 (Term -> Term / Factor .)
    %               reduce using rule 60 (Term -> Term / Factor .)
    +               reduce using rule 60 (Term -> Term / Factor .)
    -               reduce using rule 60 (Term -> Term / Factor .)
    }               reduce using rule 60 (Term -> Term / Factor .)
    id              reduce using rule 60 (Term -> Term / Factor .)
    gid             reduce using rule 60 (Term -> Term / Factor .)
    return          reduce using rule 60 (Term -> Term / Factor .)
    print           reduce using rule 60 (Term -> Term / Factor .)
    println         reduce using rule 60 (Term -> Term / Factor .)
    prints          reduce using rule 60 (Term -> Term / Factor .)
    for             reduce using rule 60 (Term -> Term / Factor .)
    while           reduce using rule 60 (Term -> Term / Factor .)
    read            reduce using rule 60 (Term -> Term / Factor .)
    if              reduce using rule 60 (Term -> Term / Factor .)
    repeat          reduce using rule 60 (Term -> Term / Factor .)
    num             reduce using rule 60 (Term -> Term / Factor .)
    (               reduce using rule 60 (Term -> Term / Factor .)
    )               reduce using rule 60 (Term -> Term / Factor .)
    sup             reduce using rule 60 (Term -> Term / Factor .)
    inf             reduce using rule 60 (Term -> Term / Factor .)
    supeq           reduce using rule 60 (Term -> Term / Factor .)
    infeq           reduce using rule 60 (Term -> Term / Factor .)
    eq              reduce using rule 60 (Term -> Term / Factor .)
    diff            reduce using rule 60 (Term -> Term / Factor .)
    ;               reduce using rule 60 (Term -> Term / Factor .)
    ]               reduce using rule 60 (Term -> Term / Factor .)
    and             reduce using rule 60 (Term -> Term / Factor .)
    or              reduce using rule 60 (Term -> Term / Factor .)


state 156

    (61) Term -> Term % Factor .

    *               reduce using rule 61 (Term -> Term % Factor .)
    /               reduce using rule 61 (Term -> Term % Factor .)
    %               reduce using rule 61 (Term -> Term % Factor .)
    +               reduce using rule 61 (Term -> Term % Factor .)
    -               reduce using rule 61 (Term -> Term % Factor .)
    }               reduce using rule 61 (Term -> Term % Factor .)
    id              reduce using rule 61 (Term -> Term % Factor .)
    gid             reduce using rule 61 (Term -> Term % Factor .)
    return          reduce using rule 61 (Term -> Term % Factor .)
    print           reduce using rule 61 (Term -> Term % Factor .)
    println         reduce using rule 61 (Term -> Term % Factor .)
    prints          reduce using rule 61 (Term -> Term % Factor .)
    for             reduce using rule 61 (Term -> Term % Factor .)
    while           reduce using rule 61 (Term -> Term % Factor .)
    read            reduce using rule 61 (Term -> Term % Factor .)
    if              reduce using rule 61 (Term -> Term % Factor .)
    repeat          reduce using rule 61 (Term -> Term % Factor .)
    num             reduce using rule 61 (Term -> Term % Factor .)
    (               reduce using rule 61 (Term -> Term % Factor .)
    )               reduce using rule 61 (Term -> Term % Factor .)
    sup             reduce using rule 61 (Term -> Term % Factor .)
    inf             reduce using rule 61 (Term -> Term % Factor .)
    supeq           reduce using rule 61 (Term -> Term % Factor .)
    infeq           reduce using rule 61 (Term -> Term % Factor .)
    eq              reduce using rule 61 (Term -> Term % Factor .)
    diff            reduce using rule 61 (Term -> Term % Factor .)
    ;               reduce using rule 61 (Term -> Term % Factor .)
    ]               reduce using rule 61 (Term -> Term % Factor .)
    and             reduce using rule 61 (Term -> Term % Factor .)
    or              reduce using rule 61 (Term -> Term % Factor .)


state 157

    (30) Print -> print ( Exp . )
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               shift and go to state 183
    +               shift and go to state 51
    -               shift and go to state 52


state 158

    (31) Println -> println ( Exp . )
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               shift and go to state 184
    +               shift and go to state 51
    -               shift and go to state 52


state 159

    (32) Prints -> prints ( string . )

    )               shift and go to state 185


state 160

    (25) Repeat -> RepeatS ( num . ) { Insts }

    )               shift and go to state 186


state 161

    (27) For -> for ( Insts . ; Cond ; Insts ) { Insts }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    ;               shift and go to state 187
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 162

    (28) While -> while ( Cond . ) { Insts }
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

    )               shift and go to state 188
    and             shift and go to state 142
    or              shift and go to state 143


state 163

    (97) Cond -> Exp . sup Exp
    (98) Cond -> Exp . inf Exp
    (99) Cond -> Exp . supeq Exp
    (100) Cond -> Exp . infeq Exp
    (102) Cond -> Exp . eq Exp
    (103) Cond -> Exp . diff Exp
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    sup             shift and go to state 145
    inf             shift and go to state 146
    supeq           shift and go to state 147
    infeq           shift and go to state 148
    eq              shift and go to state 149
    diff            shift and go to state 150
    +               shift and go to state 51
    -               shift and go to state 52


state 164

    (29) Read -> read ( id . )

    )               shift and go to state 189


state 165

    (45) If -> if ( Cond . ) { Insts }
    (46) If -> if ( Cond . ) Inst
    (47) If -> if ( Cond . ) { Insts } else { Insts }
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

    )               shift and go to state 190
    and             shift and go to state 142
    or              shift and go to state 143


state 166

    (34) Dcl -> id [ . num ]
    (35) Dcl -> id [ . num ] [ num ]

    num             shift and go to state 191


state 167

    (37) Dcl -> id = . num

    num             shift and go to state 192


state 168

    (39) Attr -> id [ Exp ] . = Exp
    (40) Attr -> id [ Exp ] . [ Exp ] = Exp
    (88) Factor -> id [ Exp ] .
    (89) Factor -> id [ Exp ] . [ Exp ]

    =               shift and go to state 194
    [               shift and go to state 193
    *               reduce using rule 88 (Factor -> id [ Exp ] .)
    /               reduce using rule 88 (Factor -> id [ Exp ] .)
    %               reduce using rule 88 (Factor -> id [ Exp ] .)
    +               reduce using rule 88 (Factor -> id [ Exp ] .)
    -               reduce using rule 88 (Factor -> id [ Exp ] .)
    }               reduce using rule 88 (Factor -> id [ Exp ] .)
    id              reduce using rule 88 (Factor -> id [ Exp ] .)
    gid             reduce using rule 88 (Factor -> id [ Exp ] .)
    return          reduce using rule 88 (Factor -> id [ Exp ] .)
    print           reduce using rule 88 (Factor -> id [ Exp ] .)
    println         reduce using rule 88 (Factor -> id [ Exp ] .)
    prints          reduce using rule 88 (Factor -> id [ Exp ] .)
    for             reduce using rule 88 (Factor -> id [ Exp ] .)
    while           reduce using rule 88 (Factor -> id [ Exp ] .)
    read            reduce using rule 88 (Factor -> id [ Exp ] .)
    if              reduce using rule 88 (Factor -> id [ Exp ] .)
    repeat          reduce using rule 88 (Factor -> id [ Exp ] .)
    num             reduce using rule 88 (Factor -> id [ Exp ] .)
    (               reduce using rule 88 (Factor -> id [ Exp ] .)
    ;               reduce using rule 88 (Factor -> id [ Exp ] .)
    )               reduce using rule 88 (Factor -> id [ Exp ] .)


state 169

    (42) Attr -> gid [ Exp ] . = Exp
    (43) Attr -> gid [ Exp ] . [ Exp ] = Exp
    (90) Factor -> gid [ Exp ] .
    (91) Factor -> gid [ Exp ] . [ Exp ]

    =               shift and go to state 196
    [               shift and go to state 195
    *               reduce using rule 90 (Factor -> gid [ Exp ] .)
    /               reduce using rule 90 (Factor -> gid [ Exp ] .)
    %               reduce using rule 90 (Factor -> gid [ Exp ] .)
    +               reduce using rule 90 (Factor -> gid [ Exp ] .)
    -               reduce using rule 90 (Factor -> gid [ Exp ] .)
    }               reduce using rule 90 (Factor -> gid [ Exp ] .)
    id              reduce using rule 90 (Factor -> gid [ Exp ] .)
    gid             reduce using rule 90 (Factor -> gid [ Exp ] .)
    return          reduce using rule 90 (Factor -> gid [ Exp ] .)
    print           reduce using rule 90 (Factor -> gid [ Exp ] .)
    println         reduce using rule 90 (Factor -> gid [ Exp ] .)
    prints          reduce using rule 90 (Factor -> gid [ Exp ] .)
    for             reduce using rule 90 (Factor -> gid [ Exp ] .)
    while           reduce using rule 90 (Factor -> gid [ Exp ] .)
    read            reduce using rule 90 (Factor -> gid [ Exp ] .)
    if              reduce using rule 90 (Factor -> gid [ Exp ] .)
    repeat          reduce using rule 90 (Factor -> gid [ Exp ] .)
    num             reduce using rule 90 (Factor -> gid [ Exp ] .)
    (               reduce using rule 90 (Factor -> gid [ Exp ] .)
    ;               reduce using rule 90 (Factor -> gid [ Exp ] .)
    )               reduce using rule 90 (Factor -> gid [ Exp ] .)


state 170

    (44) Return -> return ( Exp ) .

    }               reduce using rule 44 (Return -> return ( Exp ) .)
    id              reduce using rule 44 (Return -> return ( Exp ) .)
    gid             reduce using rule 44 (Return -> return ( Exp ) .)
    return          reduce using rule 44 (Return -> return ( Exp ) .)
    print           reduce using rule 44 (Return -> return ( Exp ) .)
    println         reduce using rule 44 (Return -> return ( Exp ) .)
    prints          reduce using rule 44 (Return -> return ( Exp ) .)
    for             reduce using rule 44 (Return -> return ( Exp ) .)
    while           reduce using rule 44 (Return -> return ( Exp ) .)
    read            reduce using rule 44 (Return -> return ( Exp ) .)
    if              reduce using rule 44 (Return -> return ( Exp ) .)
    repeat          reduce using rule 44 (Return -> return ( Exp ) .)
    num             reduce using rule 44 (Return -> return ( Exp ) .)
    (               reduce using rule 44 (Return -> return ( Exp ) .)
    ;               reduce using rule 44 (Return -> return ( Exp ) .)
    )               reduce using rule 44 (Return -> return ( Exp ) .)


state 171

    (95) Cond -> ( Cond and . Cond )
    (93) Cond -> Cond and . Cond
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 197
    Exp                            shift and go to state 163
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 172

    (96) Cond -> ( Cond or . Cond )
    (94) Cond -> Cond or . Cond
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 198
    Exp                            shift and go to state 163
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 173

    (93) Cond -> Cond and Cond .
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 93 (Cond -> Cond and Cond .)
    ;               reduce using rule 93 (Cond -> Cond and Cond .)
    and             shift and go to state 142
    or              shift and go to state 143

  ! and             [ reduce using rule 93 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 93 (Cond -> Cond and Cond .) ]


state 174

    (94) Cond -> Cond or Cond .
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 94 (Cond -> Cond or Cond .)
    ;               reduce using rule 94 (Cond -> Cond or Cond .)
    and             shift and go to state 142
    or              shift and go to state 143

  ! and             [ reduce using rule 94 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 94 (Cond -> Cond or Cond .) ]


state 175

    (97) Cond -> Exp sup Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               reduce using rule 97 (Cond -> Exp sup Exp .)
    and             reduce using rule 97 (Cond -> Exp sup Exp .)
    or              reduce using rule 97 (Cond -> Exp sup Exp .)
    ;               reduce using rule 97 (Cond -> Exp sup Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 176

    (98) Cond -> Exp inf Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               reduce using rule 98 (Cond -> Exp inf Exp .)
    and             reduce using rule 98 (Cond -> Exp inf Exp .)
    or              reduce using rule 98 (Cond -> Exp inf Exp .)
    ;               reduce using rule 98 (Cond -> Exp inf Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 177

    (99) Cond -> Exp supeq Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               reduce using rule 99 (Cond -> Exp supeq Exp .)
    and             reduce using rule 99 (Cond -> Exp supeq Exp .)
    or              reduce using rule 99 (Cond -> Exp supeq Exp .)
    ;               reduce using rule 99 (Cond -> Exp supeq Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 178

    (100) Cond -> Exp infeq Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               reduce using rule 100 (Cond -> Exp infeq Exp .)
    and             reduce using rule 100 (Cond -> Exp infeq Exp .)
    or              reduce using rule 100 (Cond -> Exp infeq Exp .)
    ;               reduce using rule 100 (Cond -> Exp infeq Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 179

    (102) Cond -> Exp eq Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               reduce using rule 102 (Cond -> Exp eq Exp .)
    and             reduce using rule 102 (Cond -> Exp eq Exp .)
    or              reduce using rule 102 (Cond -> Exp eq Exp .)
    ;               reduce using rule 102 (Cond -> Exp eq Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 180

    (103) Cond -> Exp diff Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    )               reduce using rule 103 (Cond -> Exp diff Exp .)
    and             reduce using rule 103 (Cond -> Exp diff Exp .)
    or              reduce using rule 103 (Cond -> Exp diff Exp .)
    ;               reduce using rule 103 (Cond -> Exp diff Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 181

    (88) Factor -> id [ Exp . ]
    (89) Factor -> id [ Exp . ] [ Exp ]
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    ]               shift and go to state 199
    +               shift and go to state 51
    -               shift and go to state 52


state 182

    (90) Factor -> gid [ Exp . ]
    (91) Factor -> gid [ Exp . ] [ Exp ]
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    ]               shift and go to state 200
    +               shift and go to state 51
    -               shift and go to state 52


state 183

    (30) Print -> print ( Exp ) .

    }               reduce using rule 30 (Print -> print ( Exp ) .)
    id              reduce using rule 30 (Print -> print ( Exp ) .)
    gid             reduce using rule 30 (Print -> print ( Exp ) .)
    return          reduce using rule 30 (Print -> print ( Exp ) .)
    print           reduce using rule 30 (Print -> print ( Exp ) .)
    println         reduce using rule 30 (Print -> print ( Exp ) .)
    prints          reduce using rule 30 (Print -> print ( Exp ) .)
    for             reduce using rule 30 (Print -> print ( Exp ) .)
    while           reduce using rule 30 (Print -> print ( Exp ) .)
    read            reduce using rule 30 (Print -> print ( Exp ) .)
    if              reduce using rule 30 (Print -> print ( Exp ) .)
    repeat          reduce using rule 30 (Print -> print ( Exp ) .)
    num             reduce using rule 30 (Print -> print ( Exp ) .)
    (               reduce using rule 30 (Print -> print ( Exp ) .)
    ;               reduce using rule 30 (Print -> print ( Exp ) .)
    )               reduce using rule 30 (Print -> print ( Exp ) .)


state 184

    (31) Println -> println ( Exp ) .

    }               reduce using rule 31 (Println -> println ( Exp ) .)
    id              reduce using rule 31 (Println -> println ( Exp ) .)
    gid             reduce using rule 31 (Println -> println ( Exp ) .)
    return          reduce using rule 31 (Println -> println ( Exp ) .)
    print           reduce using rule 31 (Println -> println ( Exp ) .)
    println         reduce using rule 31 (Println -> println ( Exp ) .)
    prints          reduce using rule 31 (Println -> println ( Exp ) .)
    for             reduce using rule 31 (Println -> println ( Exp ) .)
    while           reduce using rule 31 (Println -> println ( Exp ) .)
    read            reduce using rule 31 (Println -> println ( Exp ) .)
    if              reduce using rule 31 (Println -> println ( Exp ) .)
    repeat          reduce using rule 31 (Println -> println ( Exp ) .)
    num             reduce using rule 31 (Println -> println ( Exp ) .)
    (               reduce using rule 31 (Println -> println ( Exp ) .)
    ;               reduce using rule 31 (Println -> println ( Exp ) .)
    )               reduce using rule 31 (Println -> println ( Exp ) .)


state 185

    (32) Prints -> prints ( string ) .

    }               reduce using rule 32 (Prints -> prints ( string ) .)
    id              reduce using rule 32 (Prints -> prints ( string ) .)
    gid             reduce using rule 32 (Prints -> prints ( string ) .)
    return          reduce using rule 32 (Prints -> prints ( string ) .)
    print           reduce using rule 32 (Prints -> prints ( string ) .)
    println         reduce using rule 32 (Prints -> prints ( string ) .)
    prints          reduce using rule 32 (Prints -> prints ( string ) .)
    for             reduce using rule 32 (Prints -> prints ( string ) .)
    while           reduce using rule 32 (Prints -> prints ( string ) .)
    read            reduce using rule 32 (Prints -> prints ( string ) .)
    if              reduce using rule 32 (Prints -> prints ( string ) .)
    repeat          reduce using rule 32 (Prints -> prints ( string ) .)
    num             reduce using rule 32 (Prints -> prints ( string ) .)
    (               reduce using rule 32 (Prints -> prints ( string ) .)
    ;               reduce using rule 32 (Prints -> prints ( string ) .)
    )               reduce using rule 32 (Prints -> prints ( string ) .)


state 186

    (25) Repeat -> RepeatS ( num ) . { Insts }

    {               shift and go to state 201


state 187

    (27) For -> for ( Insts ; . Cond ; Insts ) { Insts }
    (93) Cond -> . Cond and Cond
    (94) Cond -> . Cond or Cond
    (95) Cond -> . ( Cond and Cond )
    (96) Cond -> . ( Cond or Cond )
    (97) Cond -> . Exp sup Exp
    (98) Cond -> . Exp inf Exp
    (99) Cond -> . Exp supeq Exp
    (100) Cond -> . Exp infeq Exp
    (101) Cond -> . not Exp
    (102) Cond -> . Exp eq Exp
    (103) Cond -> . Exp diff Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    (               shift and go to state 87
    not             shift and go to state 90
    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42

    Cond                           shift and go to state 202
    Exp                            shift and go to state 163
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 188

    (28) While -> while ( Cond ) . { Insts }

    {               shift and go to state 203


state 189

    (29) Read -> read ( id ) .

    }               reduce using rule 29 (Read -> read ( id ) .)
    id              reduce using rule 29 (Read -> read ( id ) .)
    gid             reduce using rule 29 (Read -> read ( id ) .)
    return          reduce using rule 29 (Read -> read ( id ) .)
    print           reduce using rule 29 (Read -> read ( id ) .)
    println         reduce using rule 29 (Read -> read ( id ) .)
    prints          reduce using rule 29 (Read -> read ( id ) .)
    for             reduce using rule 29 (Read -> read ( id ) .)
    while           reduce using rule 29 (Read -> read ( id ) .)
    read            reduce using rule 29 (Read -> read ( id ) .)
    if              reduce using rule 29 (Read -> read ( id ) .)
    repeat          reduce using rule 29 (Read -> read ( id ) .)
    num             reduce using rule 29 (Read -> read ( id ) .)
    (               reduce using rule 29 (Read -> read ( id ) .)
    ;               reduce using rule 29 (Read -> read ( id ) .)
    )               reduce using rule 29 (Read -> read ( id ) .)


state 190

    (45) If -> if ( Cond ) . { Insts }
    (46) If -> if ( Cond ) . Inst
    (47) If -> if ( Cond ) . { Insts } else { Insts }
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    {               shift and go to state 204
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 205
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 191

    (34) Dcl -> id [ num . ]
    (35) Dcl -> id [ num . ] [ num ]

    ]               shift and go to state 206


state 192

    (37) Dcl -> id = num .

    }               reduce using rule 37 (Dcl -> id = num .)
    id              reduce using rule 37 (Dcl -> id = num .)


state 193

    (40) Attr -> id [ Exp ] [ . Exp ] = Exp
    (89) Factor -> id [ Exp ] [ . Exp ]
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 207
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 194

    (39) Attr -> id [ Exp ] = . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 208
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 195

    (43) Attr -> gid [ Exp ] [ . Exp ] = Exp
    (91) Factor -> gid [ Exp ] [ . Exp ]
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 209
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 196

    (42) Attr -> gid [ Exp ] = . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 210
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 197

    (95) Cond -> ( Cond and Cond . )
    (93) Cond -> Cond and Cond .
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 211
    and             shift and go to state 142
    or              shift and go to state 143

  ! and             [ reduce using rule 93 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 93 (Cond -> Cond and Cond .) ]
  ! )               [ reduce using rule 93 (Cond -> Cond and Cond .) ]


state 198

    (96) Cond -> ( Cond or Cond . )
    (94) Cond -> Cond or Cond .
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 212
    and             shift and go to state 142
    or              shift and go to state 143

  ! and             [ reduce using rule 94 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 94 (Cond -> Cond or Cond .) ]
  ! )               [ reduce using rule 94 (Cond -> Cond or Cond .) ]


state 199

    (88) Factor -> id [ Exp ] .
    (89) Factor -> id [ Exp ] . [ Exp ]

    *               reduce using rule 88 (Factor -> id [ Exp ] .)
    /               reduce using rule 88 (Factor -> id [ Exp ] .)
    %               reduce using rule 88 (Factor -> id [ Exp ] .)
    )               reduce using rule 88 (Factor -> id [ Exp ] .)
    sup             reduce using rule 88 (Factor -> id [ Exp ] .)
    inf             reduce using rule 88 (Factor -> id [ Exp ] .)
    supeq           reduce using rule 88 (Factor -> id [ Exp ] .)
    infeq           reduce using rule 88 (Factor -> id [ Exp ] .)
    eq              reduce using rule 88 (Factor -> id [ Exp ] .)
    diff            reduce using rule 88 (Factor -> id [ Exp ] .)
    +               reduce using rule 88 (Factor -> id [ Exp ] .)
    -               reduce using rule 88 (Factor -> id [ Exp ] .)
    }               reduce using rule 88 (Factor -> id [ Exp ] .)
    id              reduce using rule 88 (Factor -> id [ Exp ] .)
    gid             reduce using rule 88 (Factor -> id [ Exp ] .)
    return          reduce using rule 88 (Factor -> id [ Exp ] .)
    print           reduce using rule 88 (Factor -> id [ Exp ] .)
    println         reduce using rule 88 (Factor -> id [ Exp ] .)
    prints          reduce using rule 88 (Factor -> id [ Exp ] .)
    for             reduce using rule 88 (Factor -> id [ Exp ] .)
    while           reduce using rule 88 (Factor -> id [ Exp ] .)
    read            reduce using rule 88 (Factor -> id [ Exp ] .)
    if              reduce using rule 88 (Factor -> id [ Exp ] .)
    repeat          reduce using rule 88 (Factor -> id [ Exp ] .)
    num             reduce using rule 88 (Factor -> id [ Exp ] .)
    (               reduce using rule 88 (Factor -> id [ Exp ] .)
    ;               reduce using rule 88 (Factor -> id [ Exp ] .)
    ]               reduce using rule 88 (Factor -> id [ Exp ] .)
    and             reduce using rule 88 (Factor -> id [ Exp ] .)
    or              reduce using rule 88 (Factor -> id [ Exp ] .)
    [               shift and go to state 213


state 200

    (90) Factor -> gid [ Exp ] .
    (91) Factor -> gid [ Exp ] . [ Exp ]

    *               reduce using rule 90 (Factor -> gid [ Exp ] .)
    /               reduce using rule 90 (Factor -> gid [ Exp ] .)
    %               reduce using rule 90 (Factor -> gid [ Exp ] .)
    )               reduce using rule 90 (Factor -> gid [ Exp ] .)
    sup             reduce using rule 90 (Factor -> gid [ Exp ] .)
    inf             reduce using rule 90 (Factor -> gid [ Exp ] .)
    supeq           reduce using rule 90 (Factor -> gid [ Exp ] .)
    infeq           reduce using rule 90 (Factor -> gid [ Exp ] .)
    eq              reduce using rule 90 (Factor -> gid [ Exp ] .)
    diff            reduce using rule 90 (Factor -> gid [ Exp ] .)
    +               reduce using rule 90 (Factor -> gid [ Exp ] .)
    -               reduce using rule 90 (Factor -> gid [ Exp ] .)
    }               reduce using rule 90 (Factor -> gid [ Exp ] .)
    id              reduce using rule 90 (Factor -> gid [ Exp ] .)
    gid             reduce using rule 90 (Factor -> gid [ Exp ] .)
    return          reduce using rule 90 (Factor -> gid [ Exp ] .)
    print           reduce using rule 90 (Factor -> gid [ Exp ] .)
    println         reduce using rule 90 (Factor -> gid [ Exp ] .)
    prints          reduce using rule 90 (Factor -> gid [ Exp ] .)
    for             reduce using rule 90 (Factor -> gid [ Exp ] .)
    while           reduce using rule 90 (Factor -> gid [ Exp ] .)
    read            reduce using rule 90 (Factor -> gid [ Exp ] .)
    if              reduce using rule 90 (Factor -> gid [ Exp ] .)
    repeat          reduce using rule 90 (Factor -> gid [ Exp ] .)
    num             reduce using rule 90 (Factor -> gid [ Exp ] .)
    (               reduce using rule 90 (Factor -> gid [ Exp ] .)
    ;               reduce using rule 90 (Factor -> gid [ Exp ] .)
    ]               reduce using rule 90 (Factor -> gid [ Exp ] .)
    and             reduce using rule 90 (Factor -> gid [ Exp ] .)
    or              reduce using rule 90 (Factor -> gid [ Exp ] .)
    [               shift and go to state 214


state 201

    (25) Repeat -> RepeatS ( num ) { . Insts }
    (12) Insts -> . Insts Inst
    (13) Insts -> .

    }               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)

    Insts                          shift and go to state 215

state 202

    (27) For -> for ( Insts ; Cond . ; Insts ) { Insts }
    (93) Cond -> Cond . and Cond
    (94) Cond -> Cond . or Cond

    ;               shift and go to state 216
    and             shift and go to state 142
    or              shift and go to state 143


state 203

    (28) While -> while ( Cond ) { . Insts }
    (12) Insts -> . Insts Inst
    (13) Insts -> .

    }               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)

    Insts                          shift and go to state 217

state 204

    (45) If -> if ( Cond ) { . Insts }
    (47) If -> if ( Cond ) { . Insts } else { Insts }
    (12) Insts -> . Insts Inst
    (13) Insts -> .

    }               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)

    Insts                          shift and go to state 218

state 205

    (46) If -> if ( Cond ) Inst .

    }               reduce using rule 46 (If -> if ( Cond ) Inst .)
    id              reduce using rule 46 (If -> if ( Cond ) Inst .)
    gid             reduce using rule 46 (If -> if ( Cond ) Inst .)
    return          reduce using rule 46 (If -> if ( Cond ) Inst .)
    print           reduce using rule 46 (If -> if ( Cond ) Inst .)
    println         reduce using rule 46 (If -> if ( Cond ) Inst .)
    prints          reduce using rule 46 (If -> if ( Cond ) Inst .)
    for             reduce using rule 46 (If -> if ( Cond ) Inst .)
    while           reduce using rule 46 (If -> if ( Cond ) Inst .)
    read            reduce using rule 46 (If -> if ( Cond ) Inst .)
    if              reduce using rule 46 (If -> if ( Cond ) Inst .)
    repeat          reduce using rule 46 (If -> if ( Cond ) Inst .)
    num             reduce using rule 46 (If -> if ( Cond ) Inst .)
    (               reduce using rule 46 (If -> if ( Cond ) Inst .)
    ;               reduce using rule 46 (If -> if ( Cond ) Inst .)
    )               reduce using rule 46 (If -> if ( Cond ) Inst .)


state 206

    (34) Dcl -> id [ num ] .
    (35) Dcl -> id [ num ] . [ num ]

    }               reduce using rule 34 (Dcl -> id [ num ] .)
    id              reduce using rule 34 (Dcl -> id [ num ] .)
    [               shift and go to state 219


state 207

    (40) Attr -> id [ Exp ] [ Exp . ] = Exp
    (89) Factor -> id [ Exp ] [ Exp . ]
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    ]               shift and go to state 220
    +               shift and go to state 51
    -               shift and go to state 52


state 208

    (39) Attr -> id [ Exp ] = Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    }               reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    id              reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    gid             reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    return          reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    print           reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    println         reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    prints          reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    for             reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    while           reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    read            reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    if              reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    repeat          reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    num             reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    (               reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    ;               reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    )               reduce using rule 39 (Attr -> id [ Exp ] = Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 209

    (43) Attr -> gid [ Exp ] [ Exp . ] = Exp
    (91) Factor -> gid [ Exp ] [ Exp . ]
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    ]               shift and go to state 221
    +               shift and go to state 51
    -               shift and go to state 52


state 210

    (42) Attr -> gid [ Exp ] = Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    }               reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    id              reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    gid             reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    return          reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    print           reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    println         reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    prints          reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    for             reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    while           reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    read            reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    if              reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    repeat          reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    num             reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    (               reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    ;               reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    )               reduce using rule 42 (Attr -> gid [ Exp ] = Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 211

    (95) Cond -> ( Cond and Cond ) .

    )               reduce using rule 95 (Cond -> ( Cond and Cond ) .)
    and             reduce using rule 95 (Cond -> ( Cond and Cond ) .)
    or              reduce using rule 95 (Cond -> ( Cond and Cond ) .)
    ;               reduce using rule 95 (Cond -> ( Cond and Cond ) .)


state 212

    (96) Cond -> ( Cond or Cond ) .

    )               reduce using rule 96 (Cond -> ( Cond or Cond ) .)
    and             reduce using rule 96 (Cond -> ( Cond or Cond ) .)
    or              reduce using rule 96 (Cond -> ( Cond or Cond ) .)
    ;               reduce using rule 96 (Cond -> ( Cond or Cond ) .)


state 213

    (89) Factor -> id [ Exp ] [ . Exp ]
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 222
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 214

    (91) Factor -> gid [ Exp ] [ . Exp ]
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 223
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 215

    (25) Repeat -> RepeatS ( num ) { Insts . }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    }               shift and go to state 224
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    RepeatS                        shift and go to state 41
    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 216

    (27) For -> for ( Insts ; Cond ; . Insts ) { Insts }
    (12) Insts -> . Insts Inst
    (13) Insts -> .

    )               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)

    Insts                          shift and go to state 225

state 217

    (28) While -> while ( Cond ) { Insts . }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    }               shift and go to state 226
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 218

    (45) If -> if ( Cond ) { Insts . }
    (47) If -> if ( Cond ) { Insts . } else { Insts }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    }               shift and go to state 227
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 219

    (35) Dcl -> id [ num ] [ . num ]

    num             shift and go to state 228


state 220

    (40) Attr -> id [ Exp ] [ Exp ] . = Exp
    (89) Factor -> id [ Exp ] [ Exp ] .

    =               shift and go to state 229
    *               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    /               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    %               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    +               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    -               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    }               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    id              reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    gid             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    return          reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    print           reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    println         reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    prints          reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    for             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    while           reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    read            reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    if              reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    repeat          reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    num             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    (               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    ;               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    )               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)


state 221

    (43) Attr -> gid [ Exp ] [ Exp ] . = Exp
    (91) Factor -> gid [ Exp ] [ Exp ] .

    =               shift and go to state 230
    *               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    /               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    %               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    +               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    -               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    }               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    id              reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    gid             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    return          reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    print           reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    println         reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    prints          reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    for             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    while           reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    read            reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    if              reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    repeat          reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    num             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    (               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    ;               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    )               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)


state 222

    (89) Factor -> id [ Exp ] [ Exp . ]
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    ]               shift and go to state 231
    +               shift and go to state 51
    -               shift and go to state 52


state 223

    (91) Factor -> gid [ Exp ] [ Exp . ]
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    ]               shift and go to state 232
    +               shift and go to state 51
    -               shift and go to state 52


state 224

    (25) Repeat -> RepeatS ( num ) { Insts } .

    }               reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    id              reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    gid             reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    return          reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    print           reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    println         reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    prints          reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    for             reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    while           reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    read            reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    if              reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    repeat          reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    num             reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    (               reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    ;               reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)
    )               reduce using rule 25 (Repeat -> RepeatS ( num ) { Insts } .)


state 225

    (27) For -> for ( Insts ; Cond ; Insts . ) { Insts }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    )               shift and go to state 233
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 226

    (28) While -> while ( Cond ) { Insts } .

    }               reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    id              reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    gid             reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    return          reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    print           reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    println         reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    prints          reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    for             reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    while           reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    read            reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    if              reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    repeat          reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    num             reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    (               reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    ;               reduce using rule 28 (While -> while ( Cond ) { Insts } .)
    )               reduce using rule 28 (While -> while ( Cond ) { Insts } .)


state 227

    (45) If -> if ( Cond ) { Insts } .
    (47) If -> if ( Cond ) { Insts } . else { Insts }

    }               reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    id              reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    gid             reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    return          reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    print           reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    println         reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    prints          reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    for             reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    while           reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    read            reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    if              reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    repeat          reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    num             reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    (               reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    ;               reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    )               reduce using rule 45 (If -> if ( Cond ) { Insts } .)
    else            shift and go to state 234


state 228

    (35) Dcl -> id [ num ] [ num . ]

    ]               shift and go to state 235


state 229

    (40) Attr -> id [ Exp ] [ Exp ] = . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 236
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 230

    (43) Attr -> gid [ Exp ] [ Exp ] = . Exp
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    id              shift and go to state 91
    gid             shift and go to state 92
    num             shift and go to state 42
    (               shift and go to state 36

    Exp                            shift and go to state 237
    Term                           shift and go to state 37
    Factor                         shift and go to state 47

state 231

    (89) Factor -> id [ Exp ] [ Exp ] .

    *               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    /               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    %               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    )               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    sup             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    inf             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    supeq           reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    infeq           reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    eq              reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    diff            reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    +               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    -               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    }               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    id              reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    gid             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    return          reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    print           reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    println         reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    prints          reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    for             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    while           reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    read            reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    if              reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    repeat          reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    num             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    (               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    ;               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    ]               reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    and             reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)
    or              reduce using rule 89 (Factor -> id [ Exp ] [ Exp ] .)


state 232

    (91) Factor -> gid [ Exp ] [ Exp ] .

    *               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    /               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    %               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    )               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    sup             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    inf             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    supeq           reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    infeq           reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    eq              reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    diff            reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    +               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    -               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    }               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    id              reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    gid             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    return          reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    print           reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    println         reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    prints          reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    for             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    while           reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    read            reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    if              reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    repeat          reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    num             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    (               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    ;               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    ]               reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    and             reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)
    or              reduce using rule 91 (Factor -> gid [ Exp ] [ Exp ] .)


state 233

    (27) For -> for ( Insts ; Cond ; Insts ) . { Insts }

    {               shift and go to state 238


state 234

    (47) If -> if ( Cond ) { Insts } else . { Insts }

    {               shift and go to state 239


state 235

    (35) Dcl -> id [ num ] [ num ] .

    }               reduce using rule 35 (Dcl -> id [ num ] [ num ] .)
    id              reduce using rule 35 (Dcl -> id [ num ] [ num ] .)


state 236

    (40) Attr -> id [ Exp ] [ Exp ] = Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    }               reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    id              reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    gid             reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    return          reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    prints          reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    for             reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    while           reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    if              reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    num             reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    (               reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    ;               reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    )               reduce using rule 40 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 237

    (43) Attr -> gid [ Exp ] [ Exp ] = Exp .
    (48) Exp -> Exp . + Term
    (49) Exp -> Exp . - Term

    }               reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    id              reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    gid             reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    return          reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    prints          reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    for             reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    while           reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    if              reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    num             reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    (               reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    ;               reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    )               reduce using rule 43 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 51
    -               shift and go to state 52


state 238

    (27) For -> for ( Insts ; Cond ; Insts ) { . Insts }
    (12) Insts -> . Insts Inst
    (13) Insts -> .

    }               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)

    Insts                          shift and go to state 240

state 239

    (47) If -> if ( Cond ) { Insts } else { . Insts }
    (12) Insts -> . Insts Inst
    (13) Insts -> .

    }               reduce using rule 13 (Insts -> .)
    id              reduce using rule 13 (Insts -> .)
    gid             reduce using rule 13 (Insts -> .)
    return          reduce using rule 13 (Insts -> .)
    print           reduce using rule 13 (Insts -> .)
    println         reduce using rule 13 (Insts -> .)
    prints          reduce using rule 13 (Insts -> .)
    for             reduce using rule 13 (Insts -> .)
    while           reduce using rule 13 (Insts -> .)
    read            reduce using rule 13 (Insts -> .)
    if              reduce using rule 13 (Insts -> .)
    repeat          reduce using rule 13 (Insts -> .)
    num             reduce using rule 13 (Insts -> .)
    (               reduce using rule 13 (Insts -> .)

    Insts                          shift and go to state 241

state 240

    (27) For -> for ( Insts ; Cond ; Insts ) { Insts . }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    }               shift and go to state 242
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 241

    (47) If -> if ( Cond ) { Insts } else { Insts . }
    (12) Insts -> Insts . Inst
    (14) Inst -> . Attr
    (15) Inst -> . Return
    (16) Inst -> . Exp
    (17) Inst -> . Print
    (18) Inst -> . Println
    (19) Inst -> . Prints
    (20) Inst -> . Repeat
    (21) Inst -> . For
    (22) Inst -> . While
    (23) Inst -> . Read
    (24) Inst -> . If
    (38) Attr -> . id = Exp
    (39) Attr -> . id [ Exp ] = Exp
    (40) Attr -> . id [ Exp ] [ Exp ] = Exp
    (41) Attr -> . gid = Exp
    (42) Attr -> . gid [ Exp ] = Exp
    (43) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (44) Return -> . return ( Exp )
    (48) Exp -> . Exp + Term
    (49) Exp -> . Exp - Term
    (50) Exp -> . id addeq Term
    (51) Exp -> . id subeq Term
    (52) Exp -> . id addeql Term
    (53) Exp -> . id subeql Term
    (54) Exp -> . gid addeq Term
    (55) Exp -> . gid subeq Term
    (56) Exp -> . gid addeql Term
    (57) Exp -> . gid subeql Term
    (58) Exp -> . Term
    (30) Print -> . print ( Exp )
    (31) Println -> . println ( Exp )
    (32) Prints -> . prints ( string )
    (25) Repeat -> . RepeatS ( num ) { Insts }
    (27) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (28) While -> . while ( Cond ) { Insts }
    (29) Read -> . read ( id )
    (45) If -> . if ( Cond ) { Insts }
    (46) If -> . if ( Cond ) Inst
    (47) If -> . if ( Cond ) { Insts } else { Insts }
    (59) Term -> . Term * Factor
    (60) Term -> . Term / Factor
    (61) Term -> . Term % Factor
    (62) Term -> . id muleq Factor
    (63) Term -> . id diveq Factor
    (64) Term -> . id modeq Factor
    (65) Term -> . id muleql Factor
    (66) Term -> . id diveql Factor
    (67) Term -> . id modeql Factor
    (68) Term -> . gid muleq Factor
    (69) Term -> . gid diveq Factor
    (70) Term -> . gid modeq Factor
    (71) Term -> . gid muleql Factor
    (72) Term -> . gid diveql Factor
    (73) Term -> . gid modeql Factor
    (74) Term -> . Factor
    (26) RepeatS -> . repeat
    (75) Factor -> . id plus
    (76) Factor -> . id plusl
    (77) Factor -> . id minus
    (78) Factor -> . id minusl
    (79) Factor -> . gid plus
    (80) Factor -> . gid plusl
    (81) Factor -> . gid minus
    (82) Factor -> . gid minusl
    (83) Factor -> . id
    (84) Factor -> . gid
    (85) Factor -> . num
    (86) Factor -> . id ( )
    (87) Factor -> . ( Cond )
    (88) Factor -> . id [ Exp ]
    (89) Factor -> . id [ Exp ] [ Exp ]
    (90) Factor -> . gid [ Exp ]
    (91) Factor -> . gid [ Exp ] [ Exp ]
    (92) Factor -> . ( Exp )

    }               shift and go to state 243
    id              shift and go to state 33
    gid             shift and go to state 34
    return          shift and go to state 35
    print           shift and go to state 38
    println         shift and go to state 39
    prints          shift and go to state 40
    for             shift and go to state 43
    while           shift and go to state 44
    read            shift and go to state 45
    if              shift and go to state 46
    repeat          shift and go to state 48
    num             shift and go to state 42
    (               shift and go to state 36

    Inst                           shift and go to state 21
    Attr                           shift and go to state 22
    Return                         shift and go to state 23
    Exp                            shift and go to state 24
    Print                          shift and go to state 25
    Println                        shift and go to state 26
    Prints                         shift and go to state 27
    Repeat                         shift and go to state 28
    For                            shift and go to state 29
    While                          shift and go to state 30
    Read                           shift and go to state 31
    If                             shift and go to state 32
    Term                           shift and go to state 37
    RepeatS                        shift and go to state 41
    Factor                         shift and go to state 47

state 242

    (27) For -> for ( Insts ; Cond ; Insts ) { Insts } .

    }               reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    id              reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    gid             reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    return          reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    print           reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    println         reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    prints          reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    for             reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    while           reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    read            reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    if              reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    repeat          reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    num             reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    (               reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    ;               reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    )               reduce using rule 27 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)


state 243

    (47) If -> if ( Cond ) { Insts } else { Insts } .

    }               reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    id              reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    gid             reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    return          reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    print           reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    println         reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    prints          reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    for             reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    while           reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    read            reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    if              reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    repeat          reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    num             reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    (               reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    ;               reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)
    )               reduce using rule 47 (If -> if ( Cond ) { Insts } else { Insts } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 33 resolved as shift
WARNING: shift/reduce conflict for ( in state 91 resolved as shift
WARNING: shift/reduce conflict for ( in state 109 resolved as shift
WARNING: shift/reduce conflict for ( in state 118 resolved as shift
WARNING: shift/reduce conflict for and in state 173 resolved as shift
WARNING: shift/reduce conflict for or in state 173 resolved as shift
WARNING: shift/reduce conflict for and in state 174 resolved as shift
WARNING: shift/reduce conflict for or in state 174 resolved as shift
WARNING: shift/reduce conflict for ) in state 197 resolved as shift
WARNING: shift/reduce conflict for and in state 197 resolved as shift
WARNING: shift/reduce conflict for or in state 197 resolved as shift
WARNING: shift/reduce conflict for ) in state 198 resolved as shift
WARNING: shift/reduce conflict for and in state 198 resolved as shift
WARNING: shift/reduce conflict for or in state 198 resolved as shift
