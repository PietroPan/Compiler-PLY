Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> VarBlc MainBlc
Rule 2     VarBlc -> vars { Dcls }
Rule 3     Dcls -> Dcls Dcl
Rule 4     Dcls -> <empty>
Rule 5     MainBlc -> main { Insts }
Rule 6     Insts -> Insts Inst
Rule 7     Insts -> <empty>
Rule 8     Inst -> Attr
Rule 9     Inst -> Print
Rule 10    Inst -> Println
Rule 11    Inst -> Prints
Rule 12    Inst -> Repeat
Rule 13    Inst -> For
Rule 14    Inst -> Read
Rule 15    Inst -> If
Rule 16    Repeat -> RepeatS ( num ) { Insts }
Rule 17    RepeatS -> repeat
Rule 18    For -> for ( Insts ; Cond ; Insts ) { Insts }
Rule 19    Read -> read ( id )
Rule 20    Print -> print ( Exp )
Rule 21    Println -> println ( Exp )
Rule 22    Prints -> prints ( string )
Rule 23    Dcl -> int id [ num ]
Rule 24    Dcl -> int id [ num ] [ num ]
Rule 25    Dcl -> int id
Rule 26    Dcl -> int id = num
Rule 27    Attr -> id = Exp
Rule 28    Attr -> id [ Exp ] = Exp
Rule 29    Attr -> id [ Exp ] [ Exp ] = Exp
Rule 30    If -> if ( Cond ) { Insts }
Rule 31    If -> if ( Cond ) Inst
Rule 32    IfStart -> if ( Cond )
Rule 33    If -> if ( Cond ) { Insts } else { Insts }
Rule 34    ElseStart -> else
Rule 35    Exp -> Exp + Term
Rule 36    Exp -> Exp - Term
Rule 37    Exp -> Term
Rule 38    Term -> Term * Factor
Rule 39    Term -> Term / Factor
Rule 40    Term -> Factor
Rule 41    Factor -> id
Rule 42    Factor -> num
Rule 43    Factor -> ( Cond )
Rule 44    Factor -> id [ Exp ]
Rule 45    Factor -> id [ Exp ] [ Exp ]
Rule 46    Factor -> ( Exp )
Rule 47    Cond -> Cond and Cond
Rule 48    Cond -> Cond or Cond
Rule 49    Cond -> ( Cond and Cond )
Rule 50    Cond -> ( Cond or Cond )
Rule 51    Cond -> Exp sup Exp
Rule 52    Cond -> Exp inf Exp
Rule 53    Cond -> Exp supeq Exp
Rule 54    Cond -> Exp infeq Exp
Rule 55    Cond -> not Exp
Rule 56    Cond -> Exp eq Exp
Rule 57    Cond -> Exp diff Exp

Terminals, with rules where they appear

(                    : 16 18 19 20 21 22 30 31 32 33 43 46 49 50
)                    : 16 18 19 20 21 22 30 31 32 33 43 46 49 50
*                    : 38
+                    : 35
-                    : 36
/                    : 39
;                    : 18 18
=                    : 26 27 28 29
[                    : 23 24 24 28 29 29 44 45 45
]                    : 23 24 24 28 29 29 44 45 45
and                  : 47 49
diff                 : 57
else                 : 33 34
eq                   : 56
error                : 
for                  : 18
id                   : 19 23 24 25 26 27 28 29 41 44 45
if                   : 30 31 32 33
inf                  : 52
infeq                : 54
int                  : 23 24 25 26
main                 : 5
not                  : 55
num                  : 16 23 24 24 26 42
or                   : 48 50
print                : 20
println              : 21
prints               : 22
read                 : 19
repeat               : 17
string               : 22
sup                  : 51
supeq                : 53
vars                 : 2
{                    : 2 5 16 18 30 33 33
}                    : 2 5 16 18 30 33 33

Nonterminals, with rules where they appear

Attr                 : 8
Cond                 : 18 30 31 32 33 43 47 47 48 48 49 49 50 50
Dcl                  : 3
Dcls                 : 2 3
ElseStart            : 
Exp                  : 20 21 27 28 28 29 29 29 35 36 44 45 45 46 51 51 52 52 53 53 54 54 55 56 56 57 57
Factor               : 38 39 40
For                  : 13
If                   : 15
IfStart              : 
Inst                 : 6 31
Insts                : 5 6 16 18 18 18 30 33 33
MainBlc              : 1
Print                : 9
Println              : 10
Prints               : 11
Prog                 : 0
Read                 : 14
Repeat               : 12
RepeatS              : 16
Term                 : 35 36 37 38 39
VarBlc               : 1

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . VarBlc MainBlc
    (2) VarBlc -> . vars { Dcls }

    vars            shift and go to state 3

    Prog                           shift and go to state 1
    VarBlc                         shift and go to state 2

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> VarBlc . MainBlc
    (5) MainBlc -> . main { Insts }

    main            shift and go to state 5

    MainBlc                        shift and go to state 4

state 3

    (2) VarBlc -> vars . { Dcls }

    {               shift and go to state 6


state 4

    (1) Prog -> VarBlc MainBlc .

    $end            reduce using rule 1 (Prog -> VarBlc MainBlc .)


state 5

    (5) MainBlc -> main . { Insts }

    {               shift and go to state 7


state 6

    (2) VarBlc -> vars { . Dcls }
    (3) Dcls -> . Dcls Dcl
    (4) Dcls -> .

    }               reduce using rule 4 (Dcls -> .)
    int             reduce using rule 4 (Dcls -> .)

    Dcls                           shift and go to state 8

state 7

    (5) MainBlc -> main { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 9

state 8

    (2) VarBlc -> vars { Dcls . }
    (3) Dcls -> Dcls . Dcl
    (23) Dcl -> . int id [ num ]
    (24) Dcl -> . int id [ num ] [ num ]
    (25) Dcl -> . int id
    (26) Dcl -> . int id = num

    }               shift and go to state 10
    int             shift and go to state 12

    Dcl                            shift and go to state 11

state 9

    (5) MainBlc -> main { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Print
    (10) Inst -> . Println
    (11) Inst -> . Prints
    (12) Inst -> . Repeat
    (13) Inst -> . For
    (14) Inst -> . Read
    (15) Inst -> . If
    (27) Attr -> . id = Exp
    (28) Attr -> . id [ Exp ] = Exp
    (29) Attr -> . id [ Exp ] [ Exp ] = Exp
    (20) Print -> . print ( Exp )
    (21) Println -> . println ( Exp )
    (22) Prints -> . prints ( string )
    (16) Repeat -> . RepeatS ( num ) { Insts }
    (18) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (19) Read -> . read ( id )
    (30) If -> . if ( Cond ) { Insts }
    (31) If -> . if ( Cond ) Inst
    (33) If -> . if ( Cond ) { Insts } else { Insts }
    (17) RepeatS -> . repeat

    }               shift and go to state 13
    id              shift and go to state 23
    print           shift and go to state 24
    println         shift and go to state 25
    prints          shift and go to state 26
    for             shift and go to state 28
    read            shift and go to state 29
    if              shift and go to state 30
    repeat          shift and go to state 31

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Print                          shift and go to state 16
    Println                        shift and go to state 17
    Prints                         shift and go to state 18
    Repeat                         shift and go to state 19
    For                            shift and go to state 20
    Read                           shift and go to state 21
    If                             shift and go to state 22
    RepeatS                        shift and go to state 27

state 10

    (2) VarBlc -> vars { Dcls } .

    main            reduce using rule 2 (VarBlc -> vars { Dcls } .)


state 11

    (3) Dcls -> Dcls Dcl .

    }               reduce using rule 3 (Dcls -> Dcls Dcl .)
    int             reduce using rule 3 (Dcls -> Dcls Dcl .)


state 12

    (23) Dcl -> int . id [ num ]
    (24) Dcl -> int . id [ num ] [ num ]
    (25) Dcl -> int . id
    (26) Dcl -> int . id = num

    id              shift and go to state 32


state 13

    (5) MainBlc -> main { Insts } .

    $end            reduce using rule 5 (MainBlc -> main { Insts } .)


state 14

    (6) Insts -> Insts Inst .

    }               reduce using rule 6 (Insts -> Insts Inst .)
    id              reduce using rule 6 (Insts -> Insts Inst .)
    print           reduce using rule 6 (Insts -> Insts Inst .)
    println         reduce using rule 6 (Insts -> Insts Inst .)
    prints          reduce using rule 6 (Insts -> Insts Inst .)
    for             reduce using rule 6 (Insts -> Insts Inst .)
    read            reduce using rule 6 (Insts -> Insts Inst .)
    if              reduce using rule 6 (Insts -> Insts Inst .)
    repeat          reduce using rule 6 (Insts -> Insts Inst .)
    ;               reduce using rule 6 (Insts -> Insts Inst .)
    )               reduce using rule 6 (Insts -> Insts Inst .)


state 15

    (8) Inst -> Attr .

    }               reduce using rule 8 (Inst -> Attr .)
    id              reduce using rule 8 (Inst -> Attr .)
    print           reduce using rule 8 (Inst -> Attr .)
    println         reduce using rule 8 (Inst -> Attr .)
    prints          reduce using rule 8 (Inst -> Attr .)
    for             reduce using rule 8 (Inst -> Attr .)
    read            reduce using rule 8 (Inst -> Attr .)
    if              reduce using rule 8 (Inst -> Attr .)
    repeat          reduce using rule 8 (Inst -> Attr .)
    ;               reduce using rule 8 (Inst -> Attr .)
    )               reduce using rule 8 (Inst -> Attr .)


state 16

    (9) Inst -> Print .

    }               reduce using rule 9 (Inst -> Print .)
    id              reduce using rule 9 (Inst -> Print .)
    print           reduce using rule 9 (Inst -> Print .)
    println         reduce using rule 9 (Inst -> Print .)
    prints          reduce using rule 9 (Inst -> Print .)
    for             reduce using rule 9 (Inst -> Print .)
    read            reduce using rule 9 (Inst -> Print .)
    if              reduce using rule 9 (Inst -> Print .)
    repeat          reduce using rule 9 (Inst -> Print .)
    ;               reduce using rule 9 (Inst -> Print .)
    )               reduce using rule 9 (Inst -> Print .)


state 17

    (10) Inst -> Println .

    }               reduce using rule 10 (Inst -> Println .)
    id              reduce using rule 10 (Inst -> Println .)
    print           reduce using rule 10 (Inst -> Println .)
    println         reduce using rule 10 (Inst -> Println .)
    prints          reduce using rule 10 (Inst -> Println .)
    for             reduce using rule 10 (Inst -> Println .)
    read            reduce using rule 10 (Inst -> Println .)
    if              reduce using rule 10 (Inst -> Println .)
    repeat          reduce using rule 10 (Inst -> Println .)
    ;               reduce using rule 10 (Inst -> Println .)
    )               reduce using rule 10 (Inst -> Println .)


state 18

    (11) Inst -> Prints .

    }               reduce using rule 11 (Inst -> Prints .)
    id              reduce using rule 11 (Inst -> Prints .)
    print           reduce using rule 11 (Inst -> Prints .)
    println         reduce using rule 11 (Inst -> Prints .)
    prints          reduce using rule 11 (Inst -> Prints .)
    for             reduce using rule 11 (Inst -> Prints .)
    read            reduce using rule 11 (Inst -> Prints .)
    if              reduce using rule 11 (Inst -> Prints .)
    repeat          reduce using rule 11 (Inst -> Prints .)
    ;               reduce using rule 11 (Inst -> Prints .)
    )               reduce using rule 11 (Inst -> Prints .)


state 19

    (12) Inst -> Repeat .

    }               reduce using rule 12 (Inst -> Repeat .)
    id              reduce using rule 12 (Inst -> Repeat .)
    print           reduce using rule 12 (Inst -> Repeat .)
    println         reduce using rule 12 (Inst -> Repeat .)
    prints          reduce using rule 12 (Inst -> Repeat .)
    for             reduce using rule 12 (Inst -> Repeat .)
    read            reduce using rule 12 (Inst -> Repeat .)
    if              reduce using rule 12 (Inst -> Repeat .)
    repeat          reduce using rule 12 (Inst -> Repeat .)
    ;               reduce using rule 12 (Inst -> Repeat .)
    )               reduce using rule 12 (Inst -> Repeat .)


state 20

    (13) Inst -> For .

    }               reduce using rule 13 (Inst -> For .)
    id              reduce using rule 13 (Inst -> For .)
    print           reduce using rule 13 (Inst -> For .)
    println         reduce using rule 13 (Inst -> For .)
    prints          reduce using rule 13 (Inst -> For .)
    for             reduce using rule 13 (Inst -> For .)
    read            reduce using rule 13 (Inst -> For .)
    if              reduce using rule 13 (Inst -> For .)
    repeat          reduce using rule 13 (Inst -> For .)
    ;               reduce using rule 13 (Inst -> For .)
    )               reduce using rule 13 (Inst -> For .)


state 21

    (14) Inst -> Read .

    }               reduce using rule 14 (Inst -> Read .)
    id              reduce using rule 14 (Inst -> Read .)
    print           reduce using rule 14 (Inst -> Read .)
    println         reduce using rule 14 (Inst -> Read .)
    prints          reduce using rule 14 (Inst -> Read .)
    for             reduce using rule 14 (Inst -> Read .)
    read            reduce using rule 14 (Inst -> Read .)
    if              reduce using rule 14 (Inst -> Read .)
    repeat          reduce using rule 14 (Inst -> Read .)
    ;               reduce using rule 14 (Inst -> Read .)
    )               reduce using rule 14 (Inst -> Read .)


state 22

    (15) Inst -> If .

    }               reduce using rule 15 (Inst -> If .)
    id              reduce using rule 15 (Inst -> If .)
    print           reduce using rule 15 (Inst -> If .)
    println         reduce using rule 15 (Inst -> If .)
    prints          reduce using rule 15 (Inst -> If .)
    for             reduce using rule 15 (Inst -> If .)
    read            reduce using rule 15 (Inst -> If .)
    if              reduce using rule 15 (Inst -> If .)
    repeat          reduce using rule 15 (Inst -> If .)
    ;               reduce using rule 15 (Inst -> If .)
    )               reduce using rule 15 (Inst -> If .)


state 23

    (27) Attr -> id . = Exp
    (28) Attr -> id . [ Exp ] = Exp
    (29) Attr -> id . [ Exp ] [ Exp ] = Exp

    =               shift and go to state 33
    [               shift and go to state 34


state 24

    (20) Print -> print . ( Exp )

    (               shift and go to state 35


state 25

    (21) Println -> println . ( Exp )

    (               shift and go to state 36


state 26

    (22) Prints -> prints . ( string )

    (               shift and go to state 37


state 27

    (16) Repeat -> RepeatS . ( num ) { Insts }

    (               shift and go to state 38


state 28

    (18) For -> for . ( Insts ; Cond ; Insts ) { Insts }

    (               shift and go to state 39


state 29

    (19) Read -> read . ( id )

    (               shift and go to state 40


state 30

    (30) If -> if . ( Cond ) { Insts }
    (31) If -> if . ( Cond ) Inst
    (33) If -> if . ( Cond ) { Insts } else { Insts }

    (               shift and go to state 41


state 31

    (17) RepeatS -> repeat .

    (               reduce using rule 17 (RepeatS -> repeat .)


state 32

    (23) Dcl -> int id . [ num ]
    (24) Dcl -> int id . [ num ] [ num ]
    (25) Dcl -> int id .
    (26) Dcl -> int id . = num

    [               shift and go to state 42
    }               reduce using rule 25 (Dcl -> int id .)
    int             reduce using rule 25 (Dcl -> int id .)
    =               shift and go to state 43


state 33

    (27) Attr -> id = . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 45
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 34

    (28) Attr -> id [ . Exp ] = Exp
    (29) Attr -> id [ . Exp ] [ Exp ] = Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 50
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 35

    (20) Print -> print ( . Exp )
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 51
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 36

    (21) Println -> println ( . Exp )
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 52
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 37

    (22) Prints -> prints ( . string )

    string          shift and go to state 53


state 38

    (16) Repeat -> RepeatS ( . num ) { Insts }

    num             shift and go to state 54


state 39

    (18) For -> for ( . Insts ; Cond ; Insts ) { Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    ;               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 55

state 40

    (19) Read -> read ( . id )

    id              shift and go to state 56


state 41

    (30) If -> if ( . Cond ) { Insts }
    (31) If -> if ( . Cond ) Inst
    (33) If -> if ( . Cond ) { Insts } else { Insts }
    (47) Cond -> . Cond and Cond
    (48) Cond -> . Cond or Cond
    (49) Cond -> . ( Cond and Cond )
    (50) Cond -> . ( Cond or Cond )
    (51) Cond -> . Exp sup Exp
    (52) Cond -> . Exp inf Exp
    (53) Cond -> . Exp supeq Exp
    (54) Cond -> . Exp infeq Exp
    (55) Cond -> . not Exp
    (56) Cond -> . Exp eq Exp
    (57) Cond -> . Exp diff Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    (               shift and go to state 57
    not             shift and go to state 60
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 58
    Exp                            shift and go to state 59
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 42

    (23) Dcl -> int id [ . num ]
    (24) Dcl -> int id [ . num ] [ num ]

    num             shift and go to state 61


state 43

    (26) Dcl -> int id = . num

    num             shift and go to state 62


state 44

    (41) Factor -> id .
    (44) Factor -> id . [ Exp ]
    (45) Factor -> id . [ Exp ] [ Exp ]

    *               reduce using rule 41 (Factor -> id .)
    /               reduce using rule 41 (Factor -> id .)
    +               reduce using rule 41 (Factor -> id .)
    -               reduce using rule 41 (Factor -> id .)
    }               reduce using rule 41 (Factor -> id .)
    id              reduce using rule 41 (Factor -> id .)
    print           reduce using rule 41 (Factor -> id .)
    println         reduce using rule 41 (Factor -> id .)
    prints          reduce using rule 41 (Factor -> id .)
    for             reduce using rule 41 (Factor -> id .)
    read            reduce using rule 41 (Factor -> id .)
    if              reduce using rule 41 (Factor -> id .)
    repeat          reduce using rule 41 (Factor -> id .)
    ;               reduce using rule 41 (Factor -> id .)
    )               reduce using rule 41 (Factor -> id .)
    ]               reduce using rule 41 (Factor -> id .)
    sup             reduce using rule 41 (Factor -> id .)
    inf             reduce using rule 41 (Factor -> id .)
    supeq           reduce using rule 41 (Factor -> id .)
    infeq           reduce using rule 41 (Factor -> id .)
    eq              reduce using rule 41 (Factor -> id .)
    diff            reduce using rule 41 (Factor -> id .)
    and             reduce using rule 41 (Factor -> id .)
    or              reduce using rule 41 (Factor -> id .)
    [               shift and go to state 63


state 45

    (27) Attr -> id = Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    }               reduce using rule 27 (Attr -> id = Exp .)
    id              reduce using rule 27 (Attr -> id = Exp .)
    print           reduce using rule 27 (Attr -> id = Exp .)
    println         reduce using rule 27 (Attr -> id = Exp .)
    prints          reduce using rule 27 (Attr -> id = Exp .)
    for             reduce using rule 27 (Attr -> id = Exp .)
    read            reduce using rule 27 (Attr -> id = Exp .)
    if              reduce using rule 27 (Attr -> id = Exp .)
    repeat          reduce using rule 27 (Attr -> id = Exp .)
    ;               reduce using rule 27 (Attr -> id = Exp .)
    )               reduce using rule 27 (Attr -> id = Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 46

    (37) Exp -> Term .
    (38) Term -> Term . * Factor
    (39) Term -> Term . / Factor

    +               reduce using rule 37 (Exp -> Term .)
    -               reduce using rule 37 (Exp -> Term .)
    }               reduce using rule 37 (Exp -> Term .)
    id              reduce using rule 37 (Exp -> Term .)
    print           reduce using rule 37 (Exp -> Term .)
    println         reduce using rule 37 (Exp -> Term .)
    prints          reduce using rule 37 (Exp -> Term .)
    for             reduce using rule 37 (Exp -> Term .)
    read            reduce using rule 37 (Exp -> Term .)
    if              reduce using rule 37 (Exp -> Term .)
    repeat          reduce using rule 37 (Exp -> Term .)
    ;               reduce using rule 37 (Exp -> Term .)
    )               reduce using rule 37 (Exp -> Term .)
    ]               reduce using rule 37 (Exp -> Term .)
    sup             reduce using rule 37 (Exp -> Term .)
    inf             reduce using rule 37 (Exp -> Term .)
    supeq           reduce using rule 37 (Exp -> Term .)
    infeq           reduce using rule 37 (Exp -> Term .)
    eq              reduce using rule 37 (Exp -> Term .)
    diff            reduce using rule 37 (Exp -> Term .)
    and             reduce using rule 37 (Exp -> Term .)
    or              reduce using rule 37 (Exp -> Term .)
    *               shift and go to state 66
    /               shift and go to state 67


state 47

    (40) Term -> Factor .

    *               reduce using rule 40 (Term -> Factor .)
    /               reduce using rule 40 (Term -> Factor .)
    +               reduce using rule 40 (Term -> Factor .)
    -               reduce using rule 40 (Term -> Factor .)
    }               reduce using rule 40 (Term -> Factor .)
    id              reduce using rule 40 (Term -> Factor .)
    print           reduce using rule 40 (Term -> Factor .)
    println         reduce using rule 40 (Term -> Factor .)
    prints          reduce using rule 40 (Term -> Factor .)
    for             reduce using rule 40 (Term -> Factor .)
    read            reduce using rule 40 (Term -> Factor .)
    if              reduce using rule 40 (Term -> Factor .)
    repeat          reduce using rule 40 (Term -> Factor .)
    ;               reduce using rule 40 (Term -> Factor .)
    )               reduce using rule 40 (Term -> Factor .)
    ]               reduce using rule 40 (Term -> Factor .)
    sup             reduce using rule 40 (Term -> Factor .)
    inf             reduce using rule 40 (Term -> Factor .)
    supeq           reduce using rule 40 (Term -> Factor .)
    infeq           reduce using rule 40 (Term -> Factor .)
    eq              reduce using rule 40 (Term -> Factor .)
    diff            reduce using rule 40 (Term -> Factor .)
    and             reduce using rule 40 (Term -> Factor .)
    or              reduce using rule 40 (Term -> Factor .)


state 48

    (42) Factor -> num .

    *               reduce using rule 42 (Factor -> num .)
    /               reduce using rule 42 (Factor -> num .)
    +               reduce using rule 42 (Factor -> num .)
    -               reduce using rule 42 (Factor -> num .)
    }               reduce using rule 42 (Factor -> num .)
    id              reduce using rule 42 (Factor -> num .)
    print           reduce using rule 42 (Factor -> num .)
    println         reduce using rule 42 (Factor -> num .)
    prints          reduce using rule 42 (Factor -> num .)
    for             reduce using rule 42 (Factor -> num .)
    read            reduce using rule 42 (Factor -> num .)
    if              reduce using rule 42 (Factor -> num .)
    repeat          reduce using rule 42 (Factor -> num .)
    ;               reduce using rule 42 (Factor -> num .)
    )               reduce using rule 42 (Factor -> num .)
    ]               reduce using rule 42 (Factor -> num .)
    sup             reduce using rule 42 (Factor -> num .)
    inf             reduce using rule 42 (Factor -> num .)
    supeq           reduce using rule 42 (Factor -> num .)
    infeq           reduce using rule 42 (Factor -> num .)
    eq              reduce using rule 42 (Factor -> num .)
    diff            reduce using rule 42 (Factor -> num .)
    and             reduce using rule 42 (Factor -> num .)
    or              reduce using rule 42 (Factor -> num .)


state 49

    (43) Factor -> ( . Cond )
    (46) Factor -> ( . Exp )
    (47) Cond -> . Cond and Cond
    (48) Cond -> . Cond or Cond
    (49) Cond -> . ( Cond and Cond )
    (50) Cond -> . ( Cond or Cond )
    (51) Cond -> . Exp sup Exp
    (52) Cond -> . Exp inf Exp
    (53) Cond -> . Exp supeq Exp
    (54) Cond -> . Exp infeq Exp
    (55) Cond -> . not Exp
    (56) Cond -> . Exp eq Exp
    (57) Cond -> . Exp diff Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    (               shift and go to state 57
    not             shift and go to state 60
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 68
    Exp                            shift and go to state 69
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 50

    (28) Attr -> id [ Exp . ] = Exp
    (29) Attr -> id [ Exp . ] [ Exp ] = Exp
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    ]               shift and go to state 70
    +               shift and go to state 64
    -               shift and go to state 65


state 51

    (20) Print -> print ( Exp . )
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               shift and go to state 71
    +               shift and go to state 64
    -               shift and go to state 65


state 52

    (21) Println -> println ( Exp . )
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               shift and go to state 72
    +               shift and go to state 64
    -               shift and go to state 65


state 53

    (22) Prints -> prints ( string . )

    )               shift and go to state 73


state 54

    (16) Repeat -> RepeatS ( num . ) { Insts }

    )               shift and go to state 74


state 55

    (18) For -> for ( Insts . ; Cond ; Insts ) { Insts }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Print
    (10) Inst -> . Println
    (11) Inst -> . Prints
    (12) Inst -> . Repeat
    (13) Inst -> . For
    (14) Inst -> . Read
    (15) Inst -> . If
    (27) Attr -> . id = Exp
    (28) Attr -> . id [ Exp ] = Exp
    (29) Attr -> . id [ Exp ] [ Exp ] = Exp
    (20) Print -> . print ( Exp )
    (21) Println -> . println ( Exp )
    (22) Prints -> . prints ( string )
    (16) Repeat -> . RepeatS ( num ) { Insts }
    (18) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (19) Read -> . read ( id )
    (30) If -> . if ( Cond ) { Insts }
    (31) If -> . if ( Cond ) Inst
    (33) If -> . if ( Cond ) { Insts } else { Insts }
    (17) RepeatS -> . repeat

    ;               shift and go to state 75
    id              shift and go to state 23
    print           shift and go to state 24
    println         shift and go to state 25
    prints          shift and go to state 26
    for             shift and go to state 28
    read            shift and go to state 29
    if              shift and go to state 30
    repeat          shift and go to state 31

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Print                          shift and go to state 16
    Println                        shift and go to state 17
    Prints                         shift and go to state 18
    Repeat                         shift and go to state 19
    For                            shift and go to state 20
    Read                           shift and go to state 21
    If                             shift and go to state 22
    RepeatS                        shift and go to state 27

state 56

    (19) Read -> read ( id . )

    )               shift and go to state 76


state 57

    (49) Cond -> ( . Cond and Cond )
    (50) Cond -> ( . Cond or Cond )
    (43) Factor -> ( . Cond )
    (46) Factor -> ( . Exp )
    (47) Cond -> . Cond and Cond
    (48) Cond -> . Cond or Cond
    (49) Cond -> . ( Cond and Cond )
    (50) Cond -> . ( Cond or Cond )
    (51) Cond -> . Exp sup Exp
    (52) Cond -> . Exp inf Exp
    (53) Cond -> . Exp supeq Exp
    (54) Cond -> . Exp infeq Exp
    (55) Cond -> . not Exp
    (56) Cond -> . Exp eq Exp
    (57) Cond -> . Exp diff Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    (               shift and go to state 57
    not             shift and go to state 60
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 77
    Exp                            shift and go to state 69
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 58

    (30) If -> if ( Cond . ) { Insts }
    (31) If -> if ( Cond . ) Inst
    (33) If -> if ( Cond . ) { Insts } else { Insts }
    (47) Cond -> Cond . and Cond
    (48) Cond -> Cond . or Cond

    )               shift and go to state 78
    and             shift and go to state 79
    or              shift and go to state 80


state 59

    (51) Cond -> Exp . sup Exp
    (52) Cond -> Exp . inf Exp
    (53) Cond -> Exp . supeq Exp
    (54) Cond -> Exp . infeq Exp
    (56) Cond -> Exp . eq Exp
    (57) Cond -> Exp . diff Exp
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    sup             shift and go to state 81
    inf             shift and go to state 82
    supeq           shift and go to state 83
    infeq           shift and go to state 84
    eq              shift and go to state 85
    diff            shift and go to state 86
    +               shift and go to state 64
    -               shift and go to state 65


state 60

    (55) Cond -> not . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 87
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 61

    (23) Dcl -> int id [ num . ]
    (24) Dcl -> int id [ num . ] [ num ]

    ]               shift and go to state 88


state 62

    (26) Dcl -> int id = num .

    }               reduce using rule 26 (Dcl -> int id = num .)
    int             reduce using rule 26 (Dcl -> int id = num .)


state 63

    (44) Factor -> id [ . Exp ]
    (45) Factor -> id [ . Exp ] [ Exp ]
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 89
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 64

    (35) Exp -> Exp + . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Term                           shift and go to state 90
    Factor                         shift and go to state 47

state 65

    (36) Exp -> Exp - . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Term                           shift and go to state 91
    Factor                         shift and go to state 47

state 66

    (38) Term -> Term * . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Factor                         shift and go to state 92

state 67

    (39) Term -> Term / . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Factor                         shift and go to state 93

state 68

    (43) Factor -> ( Cond . )
    (47) Cond -> Cond . and Cond
    (48) Cond -> Cond . or Cond

    )               shift and go to state 94
    and             shift and go to state 79
    or              shift and go to state 80


state 69

    (46) Factor -> ( Exp . )
    (51) Cond -> Exp . sup Exp
    (52) Cond -> Exp . inf Exp
    (53) Cond -> Exp . supeq Exp
    (54) Cond -> Exp . infeq Exp
    (56) Cond -> Exp . eq Exp
    (57) Cond -> Exp . diff Exp
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               shift and go to state 95
    sup             shift and go to state 81
    inf             shift and go to state 82
    supeq           shift and go to state 83
    infeq           shift and go to state 84
    eq              shift and go to state 85
    diff            shift and go to state 86
    +               shift and go to state 64
    -               shift and go to state 65


state 70

    (28) Attr -> id [ Exp ] . = Exp
    (29) Attr -> id [ Exp ] . [ Exp ] = Exp

    =               shift and go to state 97
    [               shift and go to state 96


state 71

    (20) Print -> print ( Exp ) .

    }               reduce using rule 20 (Print -> print ( Exp ) .)
    id              reduce using rule 20 (Print -> print ( Exp ) .)
    print           reduce using rule 20 (Print -> print ( Exp ) .)
    println         reduce using rule 20 (Print -> print ( Exp ) .)
    prints          reduce using rule 20 (Print -> print ( Exp ) .)
    for             reduce using rule 20 (Print -> print ( Exp ) .)
    read            reduce using rule 20 (Print -> print ( Exp ) .)
    if              reduce using rule 20 (Print -> print ( Exp ) .)
    repeat          reduce using rule 20 (Print -> print ( Exp ) .)
    ;               reduce using rule 20 (Print -> print ( Exp ) .)
    )               reduce using rule 20 (Print -> print ( Exp ) .)


state 72

    (21) Println -> println ( Exp ) .

    }               reduce using rule 21 (Println -> println ( Exp ) .)
    id              reduce using rule 21 (Println -> println ( Exp ) .)
    print           reduce using rule 21 (Println -> println ( Exp ) .)
    println         reduce using rule 21 (Println -> println ( Exp ) .)
    prints          reduce using rule 21 (Println -> println ( Exp ) .)
    for             reduce using rule 21 (Println -> println ( Exp ) .)
    read            reduce using rule 21 (Println -> println ( Exp ) .)
    if              reduce using rule 21 (Println -> println ( Exp ) .)
    repeat          reduce using rule 21 (Println -> println ( Exp ) .)
    ;               reduce using rule 21 (Println -> println ( Exp ) .)
    )               reduce using rule 21 (Println -> println ( Exp ) .)


state 73

    (22) Prints -> prints ( string ) .

    }               reduce using rule 22 (Prints -> prints ( string ) .)
    id              reduce using rule 22 (Prints -> prints ( string ) .)
    print           reduce using rule 22 (Prints -> prints ( string ) .)
    println         reduce using rule 22 (Prints -> prints ( string ) .)
    prints          reduce using rule 22 (Prints -> prints ( string ) .)
    for             reduce using rule 22 (Prints -> prints ( string ) .)
    read            reduce using rule 22 (Prints -> prints ( string ) .)
    if              reduce using rule 22 (Prints -> prints ( string ) .)
    repeat          reduce using rule 22 (Prints -> prints ( string ) .)
    ;               reduce using rule 22 (Prints -> prints ( string ) .)
    )               reduce using rule 22 (Prints -> prints ( string ) .)


state 74

    (16) Repeat -> RepeatS ( num ) . { Insts }

    {               shift and go to state 98


state 75

    (18) For -> for ( Insts ; . Cond ; Insts ) { Insts }
    (47) Cond -> . Cond and Cond
    (48) Cond -> . Cond or Cond
    (49) Cond -> . ( Cond and Cond )
    (50) Cond -> . ( Cond or Cond )
    (51) Cond -> . Exp sup Exp
    (52) Cond -> . Exp inf Exp
    (53) Cond -> . Exp supeq Exp
    (54) Cond -> . Exp infeq Exp
    (55) Cond -> . not Exp
    (56) Cond -> . Exp eq Exp
    (57) Cond -> . Exp diff Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    (               shift and go to state 57
    not             shift and go to state 60
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 99
    Exp                            shift and go to state 59
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 76

    (19) Read -> read ( id ) .

    }               reduce using rule 19 (Read -> read ( id ) .)
    id              reduce using rule 19 (Read -> read ( id ) .)
    print           reduce using rule 19 (Read -> read ( id ) .)
    println         reduce using rule 19 (Read -> read ( id ) .)
    prints          reduce using rule 19 (Read -> read ( id ) .)
    for             reduce using rule 19 (Read -> read ( id ) .)
    read            reduce using rule 19 (Read -> read ( id ) .)
    if              reduce using rule 19 (Read -> read ( id ) .)
    repeat          reduce using rule 19 (Read -> read ( id ) .)
    ;               reduce using rule 19 (Read -> read ( id ) .)
    )               reduce using rule 19 (Read -> read ( id ) .)


state 77

    (49) Cond -> ( Cond . and Cond )
    (50) Cond -> ( Cond . or Cond )
    (43) Factor -> ( Cond . )
    (47) Cond -> Cond . and Cond
    (48) Cond -> Cond . or Cond

    and             shift and go to state 100
    or              shift and go to state 101
    )               shift and go to state 94


state 78

    (30) If -> if ( Cond ) . { Insts }
    (31) If -> if ( Cond ) . Inst
    (33) If -> if ( Cond ) . { Insts } else { Insts }
    (8) Inst -> . Attr
    (9) Inst -> . Print
    (10) Inst -> . Println
    (11) Inst -> . Prints
    (12) Inst -> . Repeat
    (13) Inst -> . For
    (14) Inst -> . Read
    (15) Inst -> . If
    (27) Attr -> . id = Exp
    (28) Attr -> . id [ Exp ] = Exp
    (29) Attr -> . id [ Exp ] [ Exp ] = Exp
    (20) Print -> . print ( Exp )
    (21) Println -> . println ( Exp )
    (22) Prints -> . prints ( string )
    (16) Repeat -> . RepeatS ( num ) { Insts }
    (18) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (19) Read -> . read ( id )
    (30) If -> . if ( Cond ) { Insts }
    (31) If -> . if ( Cond ) Inst
    (33) If -> . if ( Cond ) { Insts } else { Insts }
    (17) RepeatS -> . repeat

    {               shift and go to state 102
    id              shift and go to state 23
    print           shift and go to state 24
    println         shift and go to state 25
    prints          shift and go to state 26
    for             shift and go to state 28
    read            shift and go to state 29
    if              shift and go to state 30
    repeat          shift and go to state 31

    Inst                           shift and go to state 103
    Attr                           shift and go to state 15
    Print                          shift and go to state 16
    Println                        shift and go to state 17
    Prints                         shift and go to state 18
    Repeat                         shift and go to state 19
    For                            shift and go to state 20
    Read                           shift and go to state 21
    If                             shift and go to state 22
    RepeatS                        shift and go to state 27

state 79

    (47) Cond -> Cond and . Cond
    (47) Cond -> . Cond and Cond
    (48) Cond -> . Cond or Cond
    (49) Cond -> . ( Cond and Cond )
    (50) Cond -> . ( Cond or Cond )
    (51) Cond -> . Exp sup Exp
    (52) Cond -> . Exp inf Exp
    (53) Cond -> . Exp supeq Exp
    (54) Cond -> . Exp infeq Exp
    (55) Cond -> . not Exp
    (56) Cond -> . Exp eq Exp
    (57) Cond -> . Exp diff Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    (               shift and go to state 57
    not             shift and go to state 60
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 104
    Exp                            shift and go to state 59
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 80

    (48) Cond -> Cond or . Cond
    (47) Cond -> . Cond and Cond
    (48) Cond -> . Cond or Cond
    (49) Cond -> . ( Cond and Cond )
    (50) Cond -> . ( Cond or Cond )
    (51) Cond -> . Exp sup Exp
    (52) Cond -> . Exp inf Exp
    (53) Cond -> . Exp supeq Exp
    (54) Cond -> . Exp infeq Exp
    (55) Cond -> . not Exp
    (56) Cond -> . Exp eq Exp
    (57) Cond -> . Exp diff Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    (               shift and go to state 57
    not             shift and go to state 60
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 105
    Exp                            shift and go to state 59
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 81

    (51) Cond -> Exp sup . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 106
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 82

    (52) Cond -> Exp inf . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 107
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 83

    (53) Cond -> Exp supeq . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 108
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 84

    (54) Cond -> Exp infeq . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 109
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 85

    (56) Cond -> Exp eq . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 110
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 86

    (57) Cond -> Exp diff . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 111
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 87

    (55) Cond -> not Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               reduce using rule 55 (Cond -> not Exp .)
    and             reduce using rule 55 (Cond -> not Exp .)
    or              reduce using rule 55 (Cond -> not Exp .)
    ;               reduce using rule 55 (Cond -> not Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 88

    (23) Dcl -> int id [ num ] .
    (24) Dcl -> int id [ num ] . [ num ]

    }               reduce using rule 23 (Dcl -> int id [ num ] .)
    int             reduce using rule 23 (Dcl -> int id [ num ] .)
    [               shift and go to state 112


state 89

    (44) Factor -> id [ Exp . ]
    (45) Factor -> id [ Exp . ] [ Exp ]
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    ]               shift and go to state 113
    +               shift and go to state 64
    -               shift and go to state 65


state 90

    (35) Exp -> Exp + Term .
    (38) Term -> Term . * Factor
    (39) Term -> Term . / Factor

    +               reduce using rule 35 (Exp -> Exp + Term .)
    -               reduce using rule 35 (Exp -> Exp + Term .)
    }               reduce using rule 35 (Exp -> Exp + Term .)
    id              reduce using rule 35 (Exp -> Exp + Term .)
    print           reduce using rule 35 (Exp -> Exp + Term .)
    println         reduce using rule 35 (Exp -> Exp + Term .)
    prints          reduce using rule 35 (Exp -> Exp + Term .)
    for             reduce using rule 35 (Exp -> Exp + Term .)
    read            reduce using rule 35 (Exp -> Exp + Term .)
    if              reduce using rule 35 (Exp -> Exp + Term .)
    repeat          reduce using rule 35 (Exp -> Exp + Term .)
    ;               reduce using rule 35 (Exp -> Exp + Term .)
    )               reduce using rule 35 (Exp -> Exp + Term .)
    ]               reduce using rule 35 (Exp -> Exp + Term .)
    sup             reduce using rule 35 (Exp -> Exp + Term .)
    inf             reduce using rule 35 (Exp -> Exp + Term .)
    supeq           reduce using rule 35 (Exp -> Exp + Term .)
    infeq           reduce using rule 35 (Exp -> Exp + Term .)
    eq              reduce using rule 35 (Exp -> Exp + Term .)
    diff            reduce using rule 35 (Exp -> Exp + Term .)
    and             reduce using rule 35 (Exp -> Exp + Term .)
    or              reduce using rule 35 (Exp -> Exp + Term .)
    *               shift and go to state 66
    /               shift and go to state 67


state 91

    (36) Exp -> Exp - Term .
    (38) Term -> Term . * Factor
    (39) Term -> Term . / Factor

    +               reduce using rule 36 (Exp -> Exp - Term .)
    -               reduce using rule 36 (Exp -> Exp - Term .)
    }               reduce using rule 36 (Exp -> Exp - Term .)
    id              reduce using rule 36 (Exp -> Exp - Term .)
    print           reduce using rule 36 (Exp -> Exp - Term .)
    println         reduce using rule 36 (Exp -> Exp - Term .)
    prints          reduce using rule 36 (Exp -> Exp - Term .)
    for             reduce using rule 36 (Exp -> Exp - Term .)
    read            reduce using rule 36 (Exp -> Exp - Term .)
    if              reduce using rule 36 (Exp -> Exp - Term .)
    repeat          reduce using rule 36 (Exp -> Exp - Term .)
    ;               reduce using rule 36 (Exp -> Exp - Term .)
    )               reduce using rule 36 (Exp -> Exp - Term .)
    ]               reduce using rule 36 (Exp -> Exp - Term .)
    sup             reduce using rule 36 (Exp -> Exp - Term .)
    inf             reduce using rule 36 (Exp -> Exp - Term .)
    supeq           reduce using rule 36 (Exp -> Exp - Term .)
    infeq           reduce using rule 36 (Exp -> Exp - Term .)
    eq              reduce using rule 36 (Exp -> Exp - Term .)
    diff            reduce using rule 36 (Exp -> Exp - Term .)
    and             reduce using rule 36 (Exp -> Exp - Term .)
    or              reduce using rule 36 (Exp -> Exp - Term .)
    *               shift and go to state 66
    /               shift and go to state 67


state 92

    (38) Term -> Term * Factor .

    *               reduce using rule 38 (Term -> Term * Factor .)
    /               reduce using rule 38 (Term -> Term * Factor .)
    +               reduce using rule 38 (Term -> Term * Factor .)
    -               reduce using rule 38 (Term -> Term * Factor .)
    }               reduce using rule 38 (Term -> Term * Factor .)
    id              reduce using rule 38 (Term -> Term * Factor .)
    print           reduce using rule 38 (Term -> Term * Factor .)
    println         reduce using rule 38 (Term -> Term * Factor .)
    prints          reduce using rule 38 (Term -> Term * Factor .)
    for             reduce using rule 38 (Term -> Term * Factor .)
    read            reduce using rule 38 (Term -> Term * Factor .)
    if              reduce using rule 38 (Term -> Term * Factor .)
    repeat          reduce using rule 38 (Term -> Term * Factor .)
    ;               reduce using rule 38 (Term -> Term * Factor .)
    )               reduce using rule 38 (Term -> Term * Factor .)
    ]               reduce using rule 38 (Term -> Term * Factor .)
    sup             reduce using rule 38 (Term -> Term * Factor .)
    inf             reduce using rule 38 (Term -> Term * Factor .)
    supeq           reduce using rule 38 (Term -> Term * Factor .)
    infeq           reduce using rule 38 (Term -> Term * Factor .)
    eq              reduce using rule 38 (Term -> Term * Factor .)
    diff            reduce using rule 38 (Term -> Term * Factor .)
    and             reduce using rule 38 (Term -> Term * Factor .)
    or              reduce using rule 38 (Term -> Term * Factor .)


state 93

    (39) Term -> Term / Factor .

    *               reduce using rule 39 (Term -> Term / Factor .)
    /               reduce using rule 39 (Term -> Term / Factor .)
    +               reduce using rule 39 (Term -> Term / Factor .)
    -               reduce using rule 39 (Term -> Term / Factor .)
    }               reduce using rule 39 (Term -> Term / Factor .)
    id              reduce using rule 39 (Term -> Term / Factor .)
    print           reduce using rule 39 (Term -> Term / Factor .)
    println         reduce using rule 39 (Term -> Term / Factor .)
    prints          reduce using rule 39 (Term -> Term / Factor .)
    for             reduce using rule 39 (Term -> Term / Factor .)
    read            reduce using rule 39 (Term -> Term / Factor .)
    if              reduce using rule 39 (Term -> Term / Factor .)
    repeat          reduce using rule 39 (Term -> Term / Factor .)
    ;               reduce using rule 39 (Term -> Term / Factor .)
    )               reduce using rule 39 (Term -> Term / Factor .)
    ]               reduce using rule 39 (Term -> Term / Factor .)
    sup             reduce using rule 39 (Term -> Term / Factor .)
    inf             reduce using rule 39 (Term -> Term / Factor .)
    supeq           reduce using rule 39 (Term -> Term / Factor .)
    infeq           reduce using rule 39 (Term -> Term / Factor .)
    eq              reduce using rule 39 (Term -> Term / Factor .)
    diff            reduce using rule 39 (Term -> Term / Factor .)
    and             reduce using rule 39 (Term -> Term / Factor .)
    or              reduce using rule 39 (Term -> Term / Factor .)


state 94

    (43) Factor -> ( Cond ) .

    *               reduce using rule 43 (Factor -> ( Cond ) .)
    /               reduce using rule 43 (Factor -> ( Cond ) .)
    +               reduce using rule 43 (Factor -> ( Cond ) .)
    -               reduce using rule 43 (Factor -> ( Cond ) .)
    }               reduce using rule 43 (Factor -> ( Cond ) .)
    id              reduce using rule 43 (Factor -> ( Cond ) .)
    print           reduce using rule 43 (Factor -> ( Cond ) .)
    println         reduce using rule 43 (Factor -> ( Cond ) .)
    prints          reduce using rule 43 (Factor -> ( Cond ) .)
    for             reduce using rule 43 (Factor -> ( Cond ) .)
    read            reduce using rule 43 (Factor -> ( Cond ) .)
    if              reduce using rule 43 (Factor -> ( Cond ) .)
    repeat          reduce using rule 43 (Factor -> ( Cond ) .)
    ;               reduce using rule 43 (Factor -> ( Cond ) .)
    )               reduce using rule 43 (Factor -> ( Cond ) .)
    ]               reduce using rule 43 (Factor -> ( Cond ) .)
    sup             reduce using rule 43 (Factor -> ( Cond ) .)
    inf             reduce using rule 43 (Factor -> ( Cond ) .)
    supeq           reduce using rule 43 (Factor -> ( Cond ) .)
    infeq           reduce using rule 43 (Factor -> ( Cond ) .)
    eq              reduce using rule 43 (Factor -> ( Cond ) .)
    diff            reduce using rule 43 (Factor -> ( Cond ) .)
    and             reduce using rule 43 (Factor -> ( Cond ) .)
    or              reduce using rule 43 (Factor -> ( Cond ) .)


state 95

    (46) Factor -> ( Exp ) .

    *               reduce using rule 46 (Factor -> ( Exp ) .)
    /               reduce using rule 46 (Factor -> ( Exp ) .)
    +               reduce using rule 46 (Factor -> ( Exp ) .)
    -               reduce using rule 46 (Factor -> ( Exp ) .)
    }               reduce using rule 46 (Factor -> ( Exp ) .)
    id              reduce using rule 46 (Factor -> ( Exp ) .)
    print           reduce using rule 46 (Factor -> ( Exp ) .)
    println         reduce using rule 46 (Factor -> ( Exp ) .)
    prints          reduce using rule 46 (Factor -> ( Exp ) .)
    for             reduce using rule 46 (Factor -> ( Exp ) .)
    read            reduce using rule 46 (Factor -> ( Exp ) .)
    if              reduce using rule 46 (Factor -> ( Exp ) .)
    repeat          reduce using rule 46 (Factor -> ( Exp ) .)
    ;               reduce using rule 46 (Factor -> ( Exp ) .)
    )               reduce using rule 46 (Factor -> ( Exp ) .)
    ]               reduce using rule 46 (Factor -> ( Exp ) .)
    sup             reduce using rule 46 (Factor -> ( Exp ) .)
    inf             reduce using rule 46 (Factor -> ( Exp ) .)
    supeq           reduce using rule 46 (Factor -> ( Exp ) .)
    infeq           reduce using rule 46 (Factor -> ( Exp ) .)
    eq              reduce using rule 46 (Factor -> ( Exp ) .)
    diff            reduce using rule 46 (Factor -> ( Exp ) .)
    and             reduce using rule 46 (Factor -> ( Exp ) .)
    or              reduce using rule 46 (Factor -> ( Exp ) .)


state 96

    (29) Attr -> id [ Exp ] [ . Exp ] = Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 114
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 97

    (28) Attr -> id [ Exp ] = . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 115
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 98

    (16) Repeat -> RepeatS ( num ) { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 116

state 99

    (18) For -> for ( Insts ; Cond . ; Insts ) { Insts }
    (47) Cond -> Cond . and Cond
    (48) Cond -> Cond . or Cond

    ;               shift and go to state 117
    and             shift and go to state 79
    or              shift and go to state 80


state 100

    (49) Cond -> ( Cond and . Cond )
    (47) Cond -> Cond and . Cond
    (47) Cond -> . Cond and Cond
    (48) Cond -> . Cond or Cond
    (49) Cond -> . ( Cond and Cond )
    (50) Cond -> . ( Cond or Cond )
    (51) Cond -> . Exp sup Exp
    (52) Cond -> . Exp inf Exp
    (53) Cond -> . Exp supeq Exp
    (54) Cond -> . Exp infeq Exp
    (55) Cond -> . not Exp
    (56) Cond -> . Exp eq Exp
    (57) Cond -> . Exp diff Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    (               shift and go to state 57
    not             shift and go to state 60
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 118
    Exp                            shift and go to state 59
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 101

    (50) Cond -> ( Cond or . Cond )
    (48) Cond -> Cond or . Cond
    (47) Cond -> . Cond and Cond
    (48) Cond -> . Cond or Cond
    (49) Cond -> . ( Cond and Cond )
    (50) Cond -> . ( Cond or Cond )
    (51) Cond -> . Exp sup Exp
    (52) Cond -> . Exp inf Exp
    (53) Cond -> . Exp supeq Exp
    (54) Cond -> . Exp infeq Exp
    (55) Cond -> . not Exp
    (56) Cond -> . Exp eq Exp
    (57) Cond -> . Exp diff Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    (               shift and go to state 57
    not             shift and go to state 60
    id              shift and go to state 44
    num             shift and go to state 48

    Cond                           shift and go to state 119
    Exp                            shift and go to state 59
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 102

    (30) If -> if ( Cond ) { . Insts }
    (33) If -> if ( Cond ) { . Insts } else { Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 120

state 103

    (31) If -> if ( Cond ) Inst .

    }               reduce using rule 31 (If -> if ( Cond ) Inst .)
    id              reduce using rule 31 (If -> if ( Cond ) Inst .)
    print           reduce using rule 31 (If -> if ( Cond ) Inst .)
    println         reduce using rule 31 (If -> if ( Cond ) Inst .)
    prints          reduce using rule 31 (If -> if ( Cond ) Inst .)
    for             reduce using rule 31 (If -> if ( Cond ) Inst .)
    read            reduce using rule 31 (If -> if ( Cond ) Inst .)
    if              reduce using rule 31 (If -> if ( Cond ) Inst .)
    repeat          reduce using rule 31 (If -> if ( Cond ) Inst .)
    ;               reduce using rule 31 (If -> if ( Cond ) Inst .)
    )               reduce using rule 31 (If -> if ( Cond ) Inst .)


state 104

    (47) Cond -> Cond and Cond .
    (47) Cond -> Cond . and Cond
    (48) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 47 (Cond -> Cond and Cond .)
    ;               reduce using rule 47 (Cond -> Cond and Cond .)
    and             shift and go to state 79
    or              shift and go to state 80

  ! and             [ reduce using rule 47 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 47 (Cond -> Cond and Cond .) ]


state 105

    (48) Cond -> Cond or Cond .
    (47) Cond -> Cond . and Cond
    (48) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 48 (Cond -> Cond or Cond .)
    ;               reduce using rule 48 (Cond -> Cond or Cond .)
    and             shift and go to state 79
    or              shift and go to state 80

  ! and             [ reduce using rule 48 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 48 (Cond -> Cond or Cond .) ]


state 106

    (51) Cond -> Exp sup Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               reduce using rule 51 (Cond -> Exp sup Exp .)
    and             reduce using rule 51 (Cond -> Exp sup Exp .)
    or              reduce using rule 51 (Cond -> Exp sup Exp .)
    ;               reduce using rule 51 (Cond -> Exp sup Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 107

    (52) Cond -> Exp inf Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               reduce using rule 52 (Cond -> Exp inf Exp .)
    and             reduce using rule 52 (Cond -> Exp inf Exp .)
    or              reduce using rule 52 (Cond -> Exp inf Exp .)
    ;               reduce using rule 52 (Cond -> Exp inf Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 108

    (53) Cond -> Exp supeq Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               reduce using rule 53 (Cond -> Exp supeq Exp .)
    and             reduce using rule 53 (Cond -> Exp supeq Exp .)
    or              reduce using rule 53 (Cond -> Exp supeq Exp .)
    ;               reduce using rule 53 (Cond -> Exp supeq Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 109

    (54) Cond -> Exp infeq Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               reduce using rule 54 (Cond -> Exp infeq Exp .)
    and             reduce using rule 54 (Cond -> Exp infeq Exp .)
    or              reduce using rule 54 (Cond -> Exp infeq Exp .)
    ;               reduce using rule 54 (Cond -> Exp infeq Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 110

    (56) Cond -> Exp eq Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               reduce using rule 56 (Cond -> Exp eq Exp .)
    and             reduce using rule 56 (Cond -> Exp eq Exp .)
    or              reduce using rule 56 (Cond -> Exp eq Exp .)
    ;               reduce using rule 56 (Cond -> Exp eq Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 111

    (57) Cond -> Exp diff Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    )               reduce using rule 57 (Cond -> Exp diff Exp .)
    and             reduce using rule 57 (Cond -> Exp diff Exp .)
    or              reduce using rule 57 (Cond -> Exp diff Exp .)
    ;               reduce using rule 57 (Cond -> Exp diff Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 112

    (24) Dcl -> int id [ num ] [ . num ]

    num             shift and go to state 121


state 113

    (44) Factor -> id [ Exp ] .
    (45) Factor -> id [ Exp ] . [ Exp ]

    *               reduce using rule 44 (Factor -> id [ Exp ] .)
    /               reduce using rule 44 (Factor -> id [ Exp ] .)
    +               reduce using rule 44 (Factor -> id [ Exp ] .)
    -               reduce using rule 44 (Factor -> id [ Exp ] .)
    }               reduce using rule 44 (Factor -> id [ Exp ] .)
    id              reduce using rule 44 (Factor -> id [ Exp ] .)
    print           reduce using rule 44 (Factor -> id [ Exp ] .)
    println         reduce using rule 44 (Factor -> id [ Exp ] .)
    prints          reduce using rule 44 (Factor -> id [ Exp ] .)
    for             reduce using rule 44 (Factor -> id [ Exp ] .)
    read            reduce using rule 44 (Factor -> id [ Exp ] .)
    if              reduce using rule 44 (Factor -> id [ Exp ] .)
    repeat          reduce using rule 44 (Factor -> id [ Exp ] .)
    ;               reduce using rule 44 (Factor -> id [ Exp ] .)
    )               reduce using rule 44 (Factor -> id [ Exp ] .)
    ]               reduce using rule 44 (Factor -> id [ Exp ] .)
    sup             reduce using rule 44 (Factor -> id [ Exp ] .)
    inf             reduce using rule 44 (Factor -> id [ Exp ] .)
    supeq           reduce using rule 44 (Factor -> id [ Exp ] .)
    infeq           reduce using rule 44 (Factor -> id [ Exp ] .)
    eq              reduce using rule 44 (Factor -> id [ Exp ] .)
    diff            reduce using rule 44 (Factor -> id [ Exp ] .)
    and             reduce using rule 44 (Factor -> id [ Exp ] .)
    or              reduce using rule 44 (Factor -> id [ Exp ] .)
    [               shift and go to state 122


state 114

    (29) Attr -> id [ Exp ] [ Exp . ] = Exp
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    ]               shift and go to state 123
    +               shift and go to state 64
    -               shift and go to state 65


state 115

    (28) Attr -> id [ Exp ] = Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    }               reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    id              reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    print           reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    println         reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    prints          reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    for             reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    read            reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    if              reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    repeat          reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    ;               reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    )               reduce using rule 28 (Attr -> id [ Exp ] = Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 116

    (16) Repeat -> RepeatS ( num ) { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Print
    (10) Inst -> . Println
    (11) Inst -> . Prints
    (12) Inst -> . Repeat
    (13) Inst -> . For
    (14) Inst -> . Read
    (15) Inst -> . If
    (27) Attr -> . id = Exp
    (28) Attr -> . id [ Exp ] = Exp
    (29) Attr -> . id [ Exp ] [ Exp ] = Exp
    (20) Print -> . print ( Exp )
    (21) Println -> . println ( Exp )
    (22) Prints -> . prints ( string )
    (16) Repeat -> . RepeatS ( num ) { Insts }
    (18) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (19) Read -> . read ( id )
    (30) If -> . if ( Cond ) { Insts }
    (31) If -> . if ( Cond ) Inst
    (33) If -> . if ( Cond ) { Insts } else { Insts }
    (17) RepeatS -> . repeat

    }               shift and go to state 124
    id              shift and go to state 23
    print           shift and go to state 24
    println         shift and go to state 25
    prints          shift and go to state 26
    for             shift and go to state 28
    read            shift and go to state 29
    if              shift and go to state 30
    repeat          shift and go to state 31

    RepeatS                        shift and go to state 27
    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Print                          shift and go to state 16
    Println                        shift and go to state 17
    Prints                         shift and go to state 18
    Repeat                         shift and go to state 19
    For                            shift and go to state 20
    Read                           shift and go to state 21
    If                             shift and go to state 22

state 117

    (18) For -> for ( Insts ; Cond ; . Insts ) { Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    )               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 125

state 118

    (49) Cond -> ( Cond and Cond . )
    (47) Cond -> Cond and Cond .
    (47) Cond -> Cond . and Cond
    (48) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 126
    and             shift and go to state 79
    or              shift and go to state 80

  ! and             [ reduce using rule 47 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 47 (Cond -> Cond and Cond .) ]
  ! )               [ reduce using rule 47 (Cond -> Cond and Cond .) ]


state 119

    (50) Cond -> ( Cond or Cond . )
    (48) Cond -> Cond or Cond .
    (47) Cond -> Cond . and Cond
    (48) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 127
    and             shift and go to state 79
    or              shift and go to state 80

  ! and             [ reduce using rule 48 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 48 (Cond -> Cond or Cond .) ]
  ! )               [ reduce using rule 48 (Cond -> Cond or Cond .) ]


state 120

    (30) If -> if ( Cond ) { Insts . }
    (33) If -> if ( Cond ) { Insts . } else { Insts }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Print
    (10) Inst -> . Println
    (11) Inst -> . Prints
    (12) Inst -> . Repeat
    (13) Inst -> . For
    (14) Inst -> . Read
    (15) Inst -> . If
    (27) Attr -> . id = Exp
    (28) Attr -> . id [ Exp ] = Exp
    (29) Attr -> . id [ Exp ] [ Exp ] = Exp
    (20) Print -> . print ( Exp )
    (21) Println -> . println ( Exp )
    (22) Prints -> . prints ( string )
    (16) Repeat -> . RepeatS ( num ) { Insts }
    (18) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (19) Read -> . read ( id )
    (30) If -> . if ( Cond ) { Insts }
    (31) If -> . if ( Cond ) Inst
    (33) If -> . if ( Cond ) { Insts } else { Insts }
    (17) RepeatS -> . repeat

    }               shift and go to state 128
    id              shift and go to state 23
    print           shift and go to state 24
    println         shift and go to state 25
    prints          shift and go to state 26
    for             shift and go to state 28
    read            shift and go to state 29
    if              shift and go to state 30
    repeat          shift and go to state 31

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Print                          shift and go to state 16
    Println                        shift and go to state 17
    Prints                         shift and go to state 18
    Repeat                         shift and go to state 19
    For                            shift and go to state 20
    Read                           shift and go to state 21
    If                             shift and go to state 22
    RepeatS                        shift and go to state 27

state 121

    (24) Dcl -> int id [ num ] [ num . ]

    ]               shift and go to state 129


state 122

    (45) Factor -> id [ Exp ] [ . Exp ]
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 130
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 123

    (29) Attr -> id [ Exp ] [ Exp ] . = Exp

    =               shift and go to state 131


state 124

    (16) Repeat -> RepeatS ( num ) { Insts } .

    }               reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    id              reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    print           reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    println         reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    prints          reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    for             reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    read            reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    if              reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    repeat          reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    ;               reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)
    )               reduce using rule 16 (Repeat -> RepeatS ( num ) { Insts } .)


state 125

    (18) For -> for ( Insts ; Cond ; Insts . ) { Insts }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Print
    (10) Inst -> . Println
    (11) Inst -> . Prints
    (12) Inst -> . Repeat
    (13) Inst -> . For
    (14) Inst -> . Read
    (15) Inst -> . If
    (27) Attr -> . id = Exp
    (28) Attr -> . id [ Exp ] = Exp
    (29) Attr -> . id [ Exp ] [ Exp ] = Exp
    (20) Print -> . print ( Exp )
    (21) Println -> . println ( Exp )
    (22) Prints -> . prints ( string )
    (16) Repeat -> . RepeatS ( num ) { Insts }
    (18) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (19) Read -> . read ( id )
    (30) If -> . if ( Cond ) { Insts }
    (31) If -> . if ( Cond ) Inst
    (33) If -> . if ( Cond ) { Insts } else { Insts }
    (17) RepeatS -> . repeat

    )               shift and go to state 132
    id              shift and go to state 23
    print           shift and go to state 24
    println         shift and go to state 25
    prints          shift and go to state 26
    for             shift and go to state 28
    read            shift and go to state 29
    if              shift and go to state 30
    repeat          shift and go to state 31

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Print                          shift and go to state 16
    Println                        shift and go to state 17
    Prints                         shift and go to state 18
    Repeat                         shift and go to state 19
    For                            shift and go to state 20
    Read                           shift and go to state 21
    If                             shift and go to state 22
    RepeatS                        shift and go to state 27

state 126

    (49) Cond -> ( Cond and Cond ) .

    )               reduce using rule 49 (Cond -> ( Cond and Cond ) .)
    and             reduce using rule 49 (Cond -> ( Cond and Cond ) .)
    or              reduce using rule 49 (Cond -> ( Cond and Cond ) .)
    ;               reduce using rule 49 (Cond -> ( Cond and Cond ) .)


state 127

    (50) Cond -> ( Cond or Cond ) .

    )               reduce using rule 50 (Cond -> ( Cond or Cond ) .)
    and             reduce using rule 50 (Cond -> ( Cond or Cond ) .)
    or              reduce using rule 50 (Cond -> ( Cond or Cond ) .)
    ;               reduce using rule 50 (Cond -> ( Cond or Cond ) .)


state 128

    (30) If -> if ( Cond ) { Insts } .
    (33) If -> if ( Cond ) { Insts } . else { Insts }

    }               reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    id              reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    print           reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    println         reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    prints          reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    for             reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    read            reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    if              reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    repeat          reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    ;               reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    )               reduce using rule 30 (If -> if ( Cond ) { Insts } .)
    else            shift and go to state 133


state 129

    (24) Dcl -> int id [ num ] [ num ] .

    }               reduce using rule 24 (Dcl -> int id [ num ] [ num ] .)
    int             reduce using rule 24 (Dcl -> int id [ num ] [ num ] .)


state 130

    (45) Factor -> id [ Exp ] [ Exp . ]
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    ]               shift and go to state 134
    +               shift and go to state 64
    -               shift and go to state 65


state 131

    (29) Attr -> id [ Exp ] [ Exp ] = . Exp
    (35) Exp -> . Exp + Term
    (36) Exp -> . Exp - Term
    (37) Exp -> . Term
    (38) Term -> . Term * Factor
    (39) Term -> . Term / Factor
    (40) Term -> . Factor
    (41) Factor -> . id
    (42) Factor -> . num
    (43) Factor -> . ( Cond )
    (44) Factor -> . id [ Exp ]
    (45) Factor -> . id [ Exp ] [ Exp ]
    (46) Factor -> . ( Exp )

    id              shift and go to state 44
    num             shift and go to state 48
    (               shift and go to state 49

    Exp                            shift and go to state 135
    Term                           shift and go to state 46
    Factor                         shift and go to state 47

state 132

    (18) For -> for ( Insts ; Cond ; Insts ) . { Insts }

    {               shift and go to state 136


state 133

    (33) If -> if ( Cond ) { Insts } else . { Insts }

    {               shift and go to state 137


state 134

    (45) Factor -> id [ Exp ] [ Exp ] .

    *               reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    /               reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    +               reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    -               reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    }               reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    id              reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    print           reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    println         reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    prints          reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    for             reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    read            reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    if              reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    repeat          reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    ;               reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    )               reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    ]               reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    sup             reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    inf             reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    supeq           reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    infeq           reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    eq              reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    diff            reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    and             reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)
    or              reduce using rule 45 (Factor -> id [ Exp ] [ Exp ] .)


state 135

    (29) Attr -> id [ Exp ] [ Exp ] = Exp .
    (35) Exp -> Exp . + Term
    (36) Exp -> Exp . - Term

    }               reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    id              reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    prints          reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    for             reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    if              reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    ;               reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    )               reduce using rule 29 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 64
    -               shift and go to state 65


state 136

    (18) For -> for ( Insts ; Cond ; Insts ) { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 138

state 137

    (33) If -> if ( Cond ) { Insts } else { . Insts }
    (6) Insts -> . Insts Inst
    (7) Insts -> .

    }               reduce using rule 7 (Insts -> .)
    id              reduce using rule 7 (Insts -> .)
    print           reduce using rule 7 (Insts -> .)
    println         reduce using rule 7 (Insts -> .)
    prints          reduce using rule 7 (Insts -> .)
    for             reduce using rule 7 (Insts -> .)
    read            reduce using rule 7 (Insts -> .)
    if              reduce using rule 7 (Insts -> .)
    repeat          reduce using rule 7 (Insts -> .)

    Insts                          shift and go to state 139

state 138

    (18) For -> for ( Insts ; Cond ; Insts ) { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Print
    (10) Inst -> . Println
    (11) Inst -> . Prints
    (12) Inst -> . Repeat
    (13) Inst -> . For
    (14) Inst -> . Read
    (15) Inst -> . If
    (27) Attr -> . id = Exp
    (28) Attr -> . id [ Exp ] = Exp
    (29) Attr -> . id [ Exp ] [ Exp ] = Exp
    (20) Print -> . print ( Exp )
    (21) Println -> . println ( Exp )
    (22) Prints -> . prints ( string )
    (16) Repeat -> . RepeatS ( num ) { Insts }
    (18) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (19) Read -> . read ( id )
    (30) If -> . if ( Cond ) { Insts }
    (31) If -> . if ( Cond ) Inst
    (33) If -> . if ( Cond ) { Insts } else { Insts }
    (17) RepeatS -> . repeat

    }               shift and go to state 140
    id              shift and go to state 23
    print           shift and go to state 24
    println         shift and go to state 25
    prints          shift and go to state 26
    for             shift and go to state 28
    read            shift and go to state 29
    if              shift and go to state 30
    repeat          shift and go to state 31

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Print                          shift and go to state 16
    Println                        shift and go to state 17
    Prints                         shift and go to state 18
    Repeat                         shift and go to state 19
    For                            shift and go to state 20
    Read                           shift and go to state 21
    If                             shift and go to state 22
    RepeatS                        shift and go to state 27

state 139

    (33) If -> if ( Cond ) { Insts } else { Insts . }
    (6) Insts -> Insts . Inst
    (8) Inst -> . Attr
    (9) Inst -> . Print
    (10) Inst -> . Println
    (11) Inst -> . Prints
    (12) Inst -> . Repeat
    (13) Inst -> . For
    (14) Inst -> . Read
    (15) Inst -> . If
    (27) Attr -> . id = Exp
    (28) Attr -> . id [ Exp ] = Exp
    (29) Attr -> . id [ Exp ] [ Exp ] = Exp
    (20) Print -> . print ( Exp )
    (21) Println -> . println ( Exp )
    (22) Prints -> . prints ( string )
    (16) Repeat -> . RepeatS ( num ) { Insts }
    (18) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (19) Read -> . read ( id )
    (30) If -> . if ( Cond ) { Insts }
    (31) If -> . if ( Cond ) Inst
    (33) If -> . if ( Cond ) { Insts } else { Insts }
    (17) RepeatS -> . repeat

    }               shift and go to state 141
    id              shift and go to state 23
    print           shift and go to state 24
    println         shift and go to state 25
    prints          shift and go to state 26
    for             shift and go to state 28
    read            shift and go to state 29
    if              shift and go to state 30
    repeat          shift and go to state 31

    Inst                           shift and go to state 14
    Attr                           shift and go to state 15
    Print                          shift and go to state 16
    Println                        shift and go to state 17
    Prints                         shift and go to state 18
    Repeat                         shift and go to state 19
    For                            shift and go to state 20
    Read                           shift and go to state 21
    If                             shift and go to state 22
    RepeatS                        shift and go to state 27

state 140

    (18) For -> for ( Insts ; Cond ; Insts ) { Insts } .

    }               reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    id              reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    print           reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    println         reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    prints          reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    for             reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    read            reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    if              reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    repeat          reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    ;               reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    )               reduce using rule 18 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)


state 141

    (33) If -> if ( Cond ) { Insts } else { Insts } .

    }               reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    id              reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    print           reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    println         reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    prints          reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    for             reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    read            reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    if              reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    repeat          reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    ;               reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)
    )               reduce using rule 33 (If -> if ( Cond ) { Insts } else { Insts } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for and in state 104 resolved as shift
WARNING: shift/reduce conflict for or in state 104 resolved as shift
WARNING: shift/reduce conflict for and in state 105 resolved as shift
WARNING: shift/reduce conflict for or in state 105 resolved as shift
WARNING: shift/reduce conflict for ) in state 118 resolved as shift
WARNING: shift/reduce conflict for and in state 118 resolved as shift
WARNING: shift/reduce conflict for or in state 118 resolved as shift
WARNING: shift/reduce conflict for ) in state 119 resolved as shift
WARNING: shift/reduce conflict for and in state 119 resolved as shift
WARNING: shift/reduce conflict for or in state 119 resolved as shift
