Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    numR

Grammar

Rule 0     S' -> Prog
Rule 1     Prog -> GlobalBlc MainBlc DefBlcs
Rule 2     DefBlcs -> DefBlcs DefBlc
Rule 3     DefBlcs -> <empty>
Rule 4     DefBlc -> id { VarBlcs Insts }
Rule 5     VarBlcs -> VarBlcs BlcInt
Rule 6     VarBlcs -> <empty>
Rule 7     GlobalBlc -> GlobalBegin VarBlcs }
Rule 8     GlobalBegin -> global {
Rule 9     GlobalBlc -> <empty>
Rule 10    Dcls -> Dcls Dcl
Rule 11    Dcls -> <empty>
Rule 12    MainBlc -> main { VarBlcs Insts }
Rule 13    Insts -> Insts Inst
Rule 14    Insts -> <empty>
Rule 15    Inst -> Attr
Rule 16    Inst -> Return
Rule 17    Inst -> Exp
Rule 18    Inst -> Print
Rule 19    Inst -> Println
Rule 20    Inst -> Prints
Rule 21    Inst -> Repeat
Rule 22    Inst -> For
Rule 23    Inst -> While
Rule 24    Inst -> Read
Rule 25    Inst -> If
Rule 26    Repeat -> RepeatS ( num ) { Insts }
Rule 27    RepeatS -> repeat
Rule 28    For -> for ( Insts ; Cond ; Insts ) { Insts }
Rule 29    While -> while ( Cond ) { Insts }
Rule 30    Read -> read ( id )
Rule 31    Print -> print ( Exp )
Rule 32    Println -> println ( Exp )
Rule 33    Prints -> prints ( string )
Rule 34    BlcInt -> int { Dcls }
Rule 35    Dcl -> id [ num ]
Rule 36    Dcl -> id [ num ] = num
Rule 37    Dcl -> id [ ] = { Nums }
Rule 38    Nums -> Nums num
Rule 39    Nums -> <empty>
Rule 40    Dcl -> id [ num ] [ num ] = num
Rule 41    Dcl -> id [ num ] [ num ]
Rule 42    Dcl -> id [ ] [ ] = { BlcsNums }
Rule 43    BlcsNums -> BlcsNums { Nums }
Rule 44    BlcsNums -> <empty>
Rule 45    Dcl -> id
Rule 46    Dcl -> id = num
Rule 47    Attr -> id = Exp
Rule 48    Attr -> id [ Exp ] = Exp
Rule 49    Attr -> id [ Exp ] [ Exp ] = Exp
Rule 50    Attr -> gid = Exp
Rule 51    Attr -> gid [ Exp ] = Exp
Rule 52    Attr -> gid [ Exp ] [ Exp ] = Exp
Rule 53    Return -> return ( Exp )
Rule 54    If -> if ( Cond ) { Insts }
Rule 55    If -> if ( Cond ) Inst
Rule 56    If -> if ( Cond ) { Insts } else { Insts }
Rule 57    Exp -> Exp + Term
Rule 58    Exp -> Exp - Term
Rule 59    Exp -> id addeq Term
Rule 60    Exp -> id subeq Term
Rule 61    Exp -> id addeql Term
Rule 62    Exp -> id subeql Term
Rule 63    Exp -> gid addeq Term
Rule 64    Exp -> gid subeq Term
Rule 65    Exp -> gid addeql Term
Rule 66    Exp -> gid subeql Term
Rule 67    Exp -> Term
Rule 68    Term -> Term * Factor
Rule 69    Term -> Term / Factor
Rule 70    Term -> Term % Factor
Rule 71    Term -> id muleq Factor
Rule 72    Term -> id diveq Factor
Rule 73    Term -> id modeq Factor
Rule 74    Term -> id muleql Factor
Rule 75    Term -> id diveql Factor
Rule 76    Term -> id modeql Factor
Rule 77    Term -> gid muleq Factor
Rule 78    Term -> gid diveq Factor
Rule 79    Term -> gid modeq Factor
Rule 80    Term -> gid muleql Factor
Rule 81    Term -> gid diveql Factor
Rule 82    Term -> gid modeql Factor
Rule 83    Term -> Factor
Rule 84    Factor -> id plus
Rule 85    Factor -> id plusl
Rule 86    Factor -> id minus
Rule 87    Factor -> id minusl
Rule 88    Factor -> gid plus
Rule 89    Factor -> gid plusl
Rule 90    Factor -> gid minus
Rule 91    Factor -> gid minusl
Rule 92    Factor -> id
Rule 93    Factor -> gid
Rule 94    Factor -> num
Rule 95    Factor -> id ( )
Rule 96    Factor -> ( Cond )
Rule 97    Factor -> id [ Exp ]
Rule 98    Factor -> id [ Exp ] [ Exp ]
Rule 99    Factor -> gid [ Exp ]
Rule 100   Factor -> gid [ Exp ] [ Exp ]
Rule 101   Factor -> ( Exp )
Rule 102   Cond -> Cond and Cond
Rule 103   Cond -> Cond or Cond
Rule 104   Cond -> ( Cond and Cond )
Rule 105   Cond -> ( Cond or Cond )
Rule 106   Cond -> Exp sup Exp
Rule 107   Cond -> Exp inf Exp
Rule 108   Cond -> Exp supeq Exp
Rule 109   Cond -> Exp infeq Exp
Rule 110   Cond -> not Exp
Rule 111   Cond -> Exp eq Exp
Rule 112   Cond -> Exp diff Exp

Terminals, with rules where they appear

%                    : 70
(                    : 26 28 29 30 31 32 33 53 54 55 56 95 96 101 104 105
)                    : 26 28 29 30 31 32 33 53 54 55 56 95 96 101 104 105
*                    : 68
+                    : 57
-                    : 58
/                    : 69
;                    : 28 28
=                    : 36 37 40 42 46 47 48 49 50 51 52
[                    : 35 36 37 40 40 41 41 42 42 48 49 49 51 52 52 97 98 98 99 100 100
]                    : 35 36 37 40 40 41 41 42 42 48 49 49 51 52 52 97 98 98 99 100 100
addeq                : 59 63
addeql               : 61 65
and                  : 102 104
diff                 : 112
diveq                : 72 78
diveql               : 75 81
else                 : 56
eq                   : 111
error                : 
for                  : 28
gid                  : 50 51 52 63 64 65 66 77 78 79 80 81 82 88 89 90 91 93 99 100
global               : 8
id                   : 4 30 35 36 37 40 41 42 45 46 47 48 49 59 60 61 62 71 72 73 74 75 76 84 85 86 87 92 95 97 98
if                   : 54 55 56
inf                  : 107
infeq                : 109
int                  : 34
main                 : 12
minus                : 86 90
minusl               : 87 91
modeq                : 73 79
modeql               : 76 82
muleq                : 71 77
muleql               : 74 80
not                  : 110
num                  : 26 35 36 36 38 40 40 40 41 41 46 94
numR                 : 
or                   : 103 105
plus                 : 84 88
plusl                : 85 89
print                : 31
println              : 32
prints               : 33
read                 : 30
repeat               : 27
return               : 53
string               : 33
subeq                : 60 64
subeql               : 62 66
sup                  : 106
supeq                : 108
while                : 29
{                    : 4 8 12 26 28 29 34 37 42 43 54 56 56
}                    : 4 7 12 26 28 29 34 37 42 43 54 56 56

Nonterminals, with rules where they appear

Attr                 : 15
BlcInt               : 5
BlcsNums             : 42 43
Cond                 : 28 29 54 55 56 96 102 102 103 103 104 104 105 105
Dcl                  : 10
Dcls                 : 10 34
DefBlc               : 2
DefBlcs              : 1 2
Exp                  : 17 31 32 47 48 48 49 49 49 50 51 51 52 52 52 53 57 58 97 98 98 99 100 100 101 106 106 107 107 108 108 109 109 110 111 111 112 112
Factor               : 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83
For                  : 22
GlobalBegin          : 7
GlobalBlc            : 1
If                   : 25
Inst                 : 13 55
Insts                : 4 12 13 26 28 28 28 29 54 56 56
MainBlc              : 1
Nums                 : 37 38 43
Print                : 18
Println              : 19
Prints               : 20
Prog                 : 0
Read                 : 24
Repeat               : 21
RepeatS              : 26
Return               : 16
Term                 : 57 58 59 60 61 62 63 64 65 66 67 68 69 70
VarBlcs              : 4 5 7 12
While                : 23

Parsing method: LALR

state 0

    (0) S' -> . Prog
    (1) Prog -> . GlobalBlc MainBlc DefBlcs
    (7) GlobalBlc -> . GlobalBegin VarBlcs }
    (9) GlobalBlc -> .
    (8) GlobalBegin -> . global {

    main            reduce using rule 9 (GlobalBlc -> .)
    global          shift and go to state 4

    Prog                           shift and go to state 1
    GlobalBlc                      shift and go to state 2
    GlobalBegin                    shift and go to state 3

state 1

    (0) S' -> Prog .



state 2

    (1) Prog -> GlobalBlc . MainBlc DefBlcs
    (12) MainBlc -> . main { VarBlcs Insts }

    main            shift and go to state 6

    MainBlc                        shift and go to state 5

state 3

    (7) GlobalBlc -> GlobalBegin . VarBlcs }
    (5) VarBlcs -> . VarBlcs BlcInt
    (6) VarBlcs -> .

    }               reduce using rule 6 (VarBlcs -> .)
    int             reduce using rule 6 (VarBlcs -> .)

    VarBlcs                        shift and go to state 7

state 4

    (8) GlobalBegin -> global . {

    {               shift and go to state 8


state 5

    (1) Prog -> GlobalBlc MainBlc . DefBlcs
    (2) DefBlcs -> . DefBlcs DefBlc
    (3) DefBlcs -> .

    id              reduce using rule 3 (DefBlcs -> .)
    $end            reduce using rule 3 (DefBlcs -> .)

    DefBlcs                        shift and go to state 9

state 6

    (12) MainBlc -> main . { VarBlcs Insts }

    {               shift and go to state 10


state 7

    (7) GlobalBlc -> GlobalBegin VarBlcs . }
    (5) VarBlcs -> VarBlcs . BlcInt
    (34) BlcInt -> . int { Dcls }

    }               shift and go to state 11
    int             shift and go to state 13

    BlcInt                         shift and go to state 12

state 8

    (8) GlobalBegin -> global { .

    }               reduce using rule 8 (GlobalBegin -> global { .)
    int             reduce using rule 8 (GlobalBegin -> global { .)


state 9

    (1) Prog -> GlobalBlc MainBlc DefBlcs .
    (2) DefBlcs -> DefBlcs . DefBlc
    (4) DefBlc -> . id { VarBlcs Insts }

    $end            reduce using rule 1 (Prog -> GlobalBlc MainBlc DefBlcs .)
    id              shift and go to state 15

    DefBlc                         shift and go to state 14

state 10

    (12) MainBlc -> main { . VarBlcs Insts }
    (5) VarBlcs -> . VarBlcs BlcInt
    (6) VarBlcs -> .

    int             reduce using rule 6 (VarBlcs -> .)
    }               reduce using rule 6 (VarBlcs -> .)
    id              reduce using rule 6 (VarBlcs -> .)
    gid             reduce using rule 6 (VarBlcs -> .)
    return          reduce using rule 6 (VarBlcs -> .)
    print           reduce using rule 6 (VarBlcs -> .)
    println         reduce using rule 6 (VarBlcs -> .)
    prints          reduce using rule 6 (VarBlcs -> .)
    for             reduce using rule 6 (VarBlcs -> .)
    while           reduce using rule 6 (VarBlcs -> .)
    read            reduce using rule 6 (VarBlcs -> .)
    if              reduce using rule 6 (VarBlcs -> .)
    repeat          reduce using rule 6 (VarBlcs -> .)
    num             reduce using rule 6 (VarBlcs -> .)
    (               reduce using rule 6 (VarBlcs -> .)

    VarBlcs                        shift and go to state 16

state 11

    (7) GlobalBlc -> GlobalBegin VarBlcs } .

    main            reduce using rule 7 (GlobalBlc -> GlobalBegin VarBlcs } .)


state 12

    (5) VarBlcs -> VarBlcs BlcInt .

    }               reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    int             reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    id              reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    gid             reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    return          reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    print           reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    println         reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    prints          reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    for             reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    while           reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    read            reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    if              reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    repeat          reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    num             reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)
    (               reduce using rule 5 (VarBlcs -> VarBlcs BlcInt .)


state 13

    (34) BlcInt -> int . { Dcls }

    {               shift and go to state 17


state 14

    (2) DefBlcs -> DefBlcs DefBlc .

    id              reduce using rule 2 (DefBlcs -> DefBlcs DefBlc .)
    $end            reduce using rule 2 (DefBlcs -> DefBlcs DefBlc .)


state 15

    (4) DefBlc -> id . { VarBlcs Insts }

    {               shift and go to state 18


state 16

    (12) MainBlc -> main { VarBlcs . Insts }
    (5) VarBlcs -> VarBlcs . BlcInt
    (13) Insts -> . Insts Inst
    (14) Insts -> .
    (34) BlcInt -> . int { Dcls }

    }               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)
    int             shift and go to state 13

    Insts                          shift and go to state 19
    BlcInt                         shift and go to state 12

state 17

    (34) BlcInt -> int { . Dcls }
    (10) Dcls -> . Dcls Dcl
    (11) Dcls -> .

    }               reduce using rule 11 (Dcls -> .)
    id              reduce using rule 11 (Dcls -> .)

    Dcls                           shift and go to state 20

state 18

    (4) DefBlc -> id { . VarBlcs Insts }
    (5) VarBlcs -> . VarBlcs BlcInt
    (6) VarBlcs -> .

    int             reduce using rule 6 (VarBlcs -> .)
    }               reduce using rule 6 (VarBlcs -> .)
    id              reduce using rule 6 (VarBlcs -> .)
    gid             reduce using rule 6 (VarBlcs -> .)
    return          reduce using rule 6 (VarBlcs -> .)
    print           reduce using rule 6 (VarBlcs -> .)
    println         reduce using rule 6 (VarBlcs -> .)
    prints          reduce using rule 6 (VarBlcs -> .)
    for             reduce using rule 6 (VarBlcs -> .)
    while           reduce using rule 6 (VarBlcs -> .)
    read            reduce using rule 6 (VarBlcs -> .)
    if              reduce using rule 6 (VarBlcs -> .)
    repeat          reduce using rule 6 (VarBlcs -> .)
    num             reduce using rule 6 (VarBlcs -> .)
    (               reduce using rule 6 (VarBlcs -> .)

    VarBlcs                        shift and go to state 21

state 19

    (12) MainBlc -> main { VarBlcs Insts . }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    }               shift and go to state 22
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 20

    (34) BlcInt -> int { Dcls . }
    (10) Dcls -> Dcls . Dcl
    (35) Dcl -> . id [ num ]
    (36) Dcl -> . id [ num ] = num
    (37) Dcl -> . id [ ] = { Nums }
    (40) Dcl -> . id [ num ] [ num ] = num
    (41) Dcl -> . id [ num ] [ num ]
    (42) Dcl -> . id [ ] [ ] = { BlcsNums }
    (45) Dcl -> . id
    (46) Dcl -> . id = num

    }               shift and go to state 51
    id              shift and go to state 53

    Dcl                            shift and go to state 52

state 21

    (4) DefBlc -> id { VarBlcs . Insts }
    (5) VarBlcs -> VarBlcs . BlcInt
    (13) Insts -> . Insts Inst
    (14) Insts -> .
    (34) BlcInt -> . int { Dcls }

    }               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)
    int             shift and go to state 13

    Insts                          shift and go to state 54
    BlcInt                         shift and go to state 12

state 22

    (12) MainBlc -> main { VarBlcs Insts } .

    id              reduce using rule 12 (MainBlc -> main { VarBlcs Insts } .)
    $end            reduce using rule 12 (MainBlc -> main { VarBlcs Insts } .)


state 23

    (13) Insts -> Insts Inst .

    }               reduce using rule 13 (Insts -> Insts Inst .)
    id              reduce using rule 13 (Insts -> Insts Inst .)
    gid             reduce using rule 13 (Insts -> Insts Inst .)
    return          reduce using rule 13 (Insts -> Insts Inst .)
    print           reduce using rule 13 (Insts -> Insts Inst .)
    println         reduce using rule 13 (Insts -> Insts Inst .)
    prints          reduce using rule 13 (Insts -> Insts Inst .)
    for             reduce using rule 13 (Insts -> Insts Inst .)
    while           reduce using rule 13 (Insts -> Insts Inst .)
    read            reduce using rule 13 (Insts -> Insts Inst .)
    if              reduce using rule 13 (Insts -> Insts Inst .)
    repeat          reduce using rule 13 (Insts -> Insts Inst .)
    num             reduce using rule 13 (Insts -> Insts Inst .)
    (               reduce using rule 13 (Insts -> Insts Inst .)
    ;               reduce using rule 13 (Insts -> Insts Inst .)
    )               reduce using rule 13 (Insts -> Insts Inst .)


state 24

    (15) Inst -> Attr .

    }               reduce using rule 15 (Inst -> Attr .)
    id              reduce using rule 15 (Inst -> Attr .)
    gid             reduce using rule 15 (Inst -> Attr .)
    return          reduce using rule 15 (Inst -> Attr .)
    print           reduce using rule 15 (Inst -> Attr .)
    println         reduce using rule 15 (Inst -> Attr .)
    prints          reduce using rule 15 (Inst -> Attr .)
    for             reduce using rule 15 (Inst -> Attr .)
    while           reduce using rule 15 (Inst -> Attr .)
    read            reduce using rule 15 (Inst -> Attr .)
    if              reduce using rule 15 (Inst -> Attr .)
    repeat          reduce using rule 15 (Inst -> Attr .)
    num             reduce using rule 15 (Inst -> Attr .)
    (               reduce using rule 15 (Inst -> Attr .)
    ;               reduce using rule 15 (Inst -> Attr .)
    )               reduce using rule 15 (Inst -> Attr .)


state 25

    (16) Inst -> Return .

    }               reduce using rule 16 (Inst -> Return .)
    id              reduce using rule 16 (Inst -> Return .)
    gid             reduce using rule 16 (Inst -> Return .)
    return          reduce using rule 16 (Inst -> Return .)
    print           reduce using rule 16 (Inst -> Return .)
    println         reduce using rule 16 (Inst -> Return .)
    prints          reduce using rule 16 (Inst -> Return .)
    for             reduce using rule 16 (Inst -> Return .)
    while           reduce using rule 16 (Inst -> Return .)
    read            reduce using rule 16 (Inst -> Return .)
    if              reduce using rule 16 (Inst -> Return .)
    repeat          reduce using rule 16 (Inst -> Return .)
    num             reduce using rule 16 (Inst -> Return .)
    (               reduce using rule 16 (Inst -> Return .)
    ;               reduce using rule 16 (Inst -> Return .)
    )               reduce using rule 16 (Inst -> Return .)


state 26

    (17) Inst -> Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    }               reduce using rule 17 (Inst -> Exp .)
    id              reduce using rule 17 (Inst -> Exp .)
    gid             reduce using rule 17 (Inst -> Exp .)
    return          reduce using rule 17 (Inst -> Exp .)
    print           reduce using rule 17 (Inst -> Exp .)
    println         reduce using rule 17 (Inst -> Exp .)
    prints          reduce using rule 17 (Inst -> Exp .)
    for             reduce using rule 17 (Inst -> Exp .)
    while           reduce using rule 17 (Inst -> Exp .)
    read            reduce using rule 17 (Inst -> Exp .)
    if              reduce using rule 17 (Inst -> Exp .)
    repeat          reduce using rule 17 (Inst -> Exp .)
    num             reduce using rule 17 (Inst -> Exp .)
    (               reduce using rule 17 (Inst -> Exp .)
    ;               reduce using rule 17 (Inst -> Exp .)
    )               reduce using rule 17 (Inst -> Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 27

    (18) Inst -> Print .

    }               reduce using rule 18 (Inst -> Print .)
    id              reduce using rule 18 (Inst -> Print .)
    gid             reduce using rule 18 (Inst -> Print .)
    return          reduce using rule 18 (Inst -> Print .)
    print           reduce using rule 18 (Inst -> Print .)
    println         reduce using rule 18 (Inst -> Print .)
    prints          reduce using rule 18 (Inst -> Print .)
    for             reduce using rule 18 (Inst -> Print .)
    while           reduce using rule 18 (Inst -> Print .)
    read            reduce using rule 18 (Inst -> Print .)
    if              reduce using rule 18 (Inst -> Print .)
    repeat          reduce using rule 18 (Inst -> Print .)
    num             reduce using rule 18 (Inst -> Print .)
    (               reduce using rule 18 (Inst -> Print .)
    ;               reduce using rule 18 (Inst -> Print .)
    )               reduce using rule 18 (Inst -> Print .)


state 28

    (19) Inst -> Println .

    }               reduce using rule 19 (Inst -> Println .)
    id              reduce using rule 19 (Inst -> Println .)
    gid             reduce using rule 19 (Inst -> Println .)
    return          reduce using rule 19 (Inst -> Println .)
    print           reduce using rule 19 (Inst -> Println .)
    println         reduce using rule 19 (Inst -> Println .)
    prints          reduce using rule 19 (Inst -> Println .)
    for             reduce using rule 19 (Inst -> Println .)
    while           reduce using rule 19 (Inst -> Println .)
    read            reduce using rule 19 (Inst -> Println .)
    if              reduce using rule 19 (Inst -> Println .)
    repeat          reduce using rule 19 (Inst -> Println .)
    num             reduce using rule 19 (Inst -> Println .)
    (               reduce using rule 19 (Inst -> Println .)
    ;               reduce using rule 19 (Inst -> Println .)
    )               reduce using rule 19 (Inst -> Println .)


state 29

    (20) Inst -> Prints .

    }               reduce using rule 20 (Inst -> Prints .)
    id              reduce using rule 20 (Inst -> Prints .)
    gid             reduce using rule 20 (Inst -> Prints .)
    return          reduce using rule 20 (Inst -> Prints .)
    print           reduce using rule 20 (Inst -> Prints .)
    println         reduce using rule 20 (Inst -> Prints .)
    prints          reduce using rule 20 (Inst -> Prints .)
    for             reduce using rule 20 (Inst -> Prints .)
    while           reduce using rule 20 (Inst -> Prints .)
    read            reduce using rule 20 (Inst -> Prints .)
    if              reduce using rule 20 (Inst -> Prints .)
    repeat          reduce using rule 20 (Inst -> Prints .)
    num             reduce using rule 20 (Inst -> Prints .)
    (               reduce using rule 20 (Inst -> Prints .)
    ;               reduce using rule 20 (Inst -> Prints .)
    )               reduce using rule 20 (Inst -> Prints .)


state 30

    (21) Inst -> Repeat .

    }               reduce using rule 21 (Inst -> Repeat .)
    id              reduce using rule 21 (Inst -> Repeat .)
    gid             reduce using rule 21 (Inst -> Repeat .)
    return          reduce using rule 21 (Inst -> Repeat .)
    print           reduce using rule 21 (Inst -> Repeat .)
    println         reduce using rule 21 (Inst -> Repeat .)
    prints          reduce using rule 21 (Inst -> Repeat .)
    for             reduce using rule 21 (Inst -> Repeat .)
    while           reduce using rule 21 (Inst -> Repeat .)
    read            reduce using rule 21 (Inst -> Repeat .)
    if              reduce using rule 21 (Inst -> Repeat .)
    repeat          reduce using rule 21 (Inst -> Repeat .)
    num             reduce using rule 21 (Inst -> Repeat .)
    (               reduce using rule 21 (Inst -> Repeat .)
    ;               reduce using rule 21 (Inst -> Repeat .)
    )               reduce using rule 21 (Inst -> Repeat .)


state 31

    (22) Inst -> For .

    }               reduce using rule 22 (Inst -> For .)
    id              reduce using rule 22 (Inst -> For .)
    gid             reduce using rule 22 (Inst -> For .)
    return          reduce using rule 22 (Inst -> For .)
    print           reduce using rule 22 (Inst -> For .)
    println         reduce using rule 22 (Inst -> For .)
    prints          reduce using rule 22 (Inst -> For .)
    for             reduce using rule 22 (Inst -> For .)
    while           reduce using rule 22 (Inst -> For .)
    read            reduce using rule 22 (Inst -> For .)
    if              reduce using rule 22 (Inst -> For .)
    repeat          reduce using rule 22 (Inst -> For .)
    num             reduce using rule 22 (Inst -> For .)
    (               reduce using rule 22 (Inst -> For .)
    ;               reduce using rule 22 (Inst -> For .)
    )               reduce using rule 22 (Inst -> For .)


state 32

    (23) Inst -> While .

    }               reduce using rule 23 (Inst -> While .)
    id              reduce using rule 23 (Inst -> While .)
    gid             reduce using rule 23 (Inst -> While .)
    return          reduce using rule 23 (Inst -> While .)
    print           reduce using rule 23 (Inst -> While .)
    println         reduce using rule 23 (Inst -> While .)
    prints          reduce using rule 23 (Inst -> While .)
    for             reduce using rule 23 (Inst -> While .)
    while           reduce using rule 23 (Inst -> While .)
    read            reduce using rule 23 (Inst -> While .)
    if              reduce using rule 23 (Inst -> While .)
    repeat          reduce using rule 23 (Inst -> While .)
    num             reduce using rule 23 (Inst -> While .)
    (               reduce using rule 23 (Inst -> While .)
    ;               reduce using rule 23 (Inst -> While .)
    )               reduce using rule 23 (Inst -> While .)


state 33

    (24) Inst -> Read .

    }               reduce using rule 24 (Inst -> Read .)
    id              reduce using rule 24 (Inst -> Read .)
    gid             reduce using rule 24 (Inst -> Read .)
    return          reduce using rule 24 (Inst -> Read .)
    print           reduce using rule 24 (Inst -> Read .)
    println         reduce using rule 24 (Inst -> Read .)
    prints          reduce using rule 24 (Inst -> Read .)
    for             reduce using rule 24 (Inst -> Read .)
    while           reduce using rule 24 (Inst -> Read .)
    read            reduce using rule 24 (Inst -> Read .)
    if              reduce using rule 24 (Inst -> Read .)
    repeat          reduce using rule 24 (Inst -> Read .)
    num             reduce using rule 24 (Inst -> Read .)
    (               reduce using rule 24 (Inst -> Read .)
    ;               reduce using rule 24 (Inst -> Read .)
    )               reduce using rule 24 (Inst -> Read .)


state 34

    (25) Inst -> If .

    }               reduce using rule 25 (Inst -> If .)
    id              reduce using rule 25 (Inst -> If .)
    gid             reduce using rule 25 (Inst -> If .)
    return          reduce using rule 25 (Inst -> If .)
    print           reduce using rule 25 (Inst -> If .)
    println         reduce using rule 25 (Inst -> If .)
    prints          reduce using rule 25 (Inst -> If .)
    for             reduce using rule 25 (Inst -> If .)
    while           reduce using rule 25 (Inst -> If .)
    read            reduce using rule 25 (Inst -> If .)
    if              reduce using rule 25 (Inst -> If .)
    repeat          reduce using rule 25 (Inst -> If .)
    num             reduce using rule 25 (Inst -> If .)
    (               reduce using rule 25 (Inst -> If .)
    ;               reduce using rule 25 (Inst -> If .)
    )               reduce using rule 25 (Inst -> If .)


state 35

    (47) Attr -> id . = Exp
    (48) Attr -> id . [ Exp ] = Exp
    (49) Attr -> id . [ Exp ] [ Exp ] = Exp
    (59) Exp -> id . addeq Term
    (60) Exp -> id . subeq Term
    (61) Exp -> id . addeql Term
    (62) Exp -> id . subeql Term
    (71) Term -> id . muleq Factor
    (72) Term -> id . diveq Factor
    (73) Term -> id . modeq Factor
    (74) Term -> id . muleql Factor
    (75) Term -> id . diveql Factor
    (76) Term -> id . modeql Factor
    (84) Factor -> id . plus
    (85) Factor -> id . plusl
    (86) Factor -> id . minus
    (87) Factor -> id . minusl
    (92) Factor -> id .
    (95) Factor -> id . ( )
    (97) Factor -> id . [ Exp ]
    (98) Factor -> id . [ Exp ] [ Exp ]

  ! shift/reduce conflict for ( resolved as shift
    =               shift and go to state 57
    [               shift and go to state 58
    addeq           shift and go to state 59
    subeq           shift and go to state 60
    addeql          shift and go to state 61
    subeql          shift and go to state 62
    muleq           shift and go to state 63
    diveq           shift and go to state 64
    modeq           shift and go to state 65
    muleql          shift and go to state 66
    diveql          shift and go to state 67
    modeql          shift and go to state 68
    plus            shift and go to state 69
    plusl           shift and go to state 70
    minus           shift and go to state 71
    minusl          shift and go to state 72
    *               reduce using rule 92 (Factor -> id .)
    /               reduce using rule 92 (Factor -> id .)
    %               reduce using rule 92 (Factor -> id .)
    +               reduce using rule 92 (Factor -> id .)
    -               reduce using rule 92 (Factor -> id .)
    }               reduce using rule 92 (Factor -> id .)
    id              reduce using rule 92 (Factor -> id .)
    gid             reduce using rule 92 (Factor -> id .)
    return          reduce using rule 92 (Factor -> id .)
    print           reduce using rule 92 (Factor -> id .)
    println         reduce using rule 92 (Factor -> id .)
    prints          reduce using rule 92 (Factor -> id .)
    for             reduce using rule 92 (Factor -> id .)
    while           reduce using rule 92 (Factor -> id .)
    read            reduce using rule 92 (Factor -> id .)
    if              reduce using rule 92 (Factor -> id .)
    repeat          reduce using rule 92 (Factor -> id .)
    num             reduce using rule 92 (Factor -> id .)
    ;               reduce using rule 92 (Factor -> id .)
    )               reduce using rule 92 (Factor -> id .)
    (               shift and go to state 73

  ! (               [ reduce using rule 92 (Factor -> id .) ]


state 36

    (50) Attr -> gid . = Exp
    (51) Attr -> gid . [ Exp ] = Exp
    (52) Attr -> gid . [ Exp ] [ Exp ] = Exp
    (63) Exp -> gid . addeq Term
    (64) Exp -> gid . subeq Term
    (65) Exp -> gid . addeql Term
    (66) Exp -> gid . subeql Term
    (77) Term -> gid . muleq Factor
    (78) Term -> gid . diveq Factor
    (79) Term -> gid . modeq Factor
    (80) Term -> gid . muleql Factor
    (81) Term -> gid . diveql Factor
    (82) Term -> gid . modeql Factor
    (88) Factor -> gid . plus
    (89) Factor -> gid . plusl
    (90) Factor -> gid . minus
    (91) Factor -> gid . minusl
    (93) Factor -> gid .
    (99) Factor -> gid . [ Exp ]
    (100) Factor -> gid . [ Exp ] [ Exp ]

    =               shift and go to state 74
    [               shift and go to state 75
    addeq           shift and go to state 76
    subeq           shift and go to state 77
    addeql          shift and go to state 78
    subeql          shift and go to state 79
    muleq           shift and go to state 80
    diveq           shift and go to state 81
    modeq           shift and go to state 82
    muleql          shift and go to state 83
    diveql          shift and go to state 84
    modeql          shift and go to state 85
    plus            shift and go to state 86
    plusl           shift and go to state 87
    minus           shift and go to state 88
    minusl          shift and go to state 89
    *               reduce using rule 93 (Factor -> gid .)
    /               reduce using rule 93 (Factor -> gid .)
    %               reduce using rule 93 (Factor -> gid .)
    +               reduce using rule 93 (Factor -> gid .)
    -               reduce using rule 93 (Factor -> gid .)
    }               reduce using rule 93 (Factor -> gid .)
    id              reduce using rule 93 (Factor -> gid .)
    gid             reduce using rule 93 (Factor -> gid .)
    return          reduce using rule 93 (Factor -> gid .)
    print           reduce using rule 93 (Factor -> gid .)
    println         reduce using rule 93 (Factor -> gid .)
    prints          reduce using rule 93 (Factor -> gid .)
    for             reduce using rule 93 (Factor -> gid .)
    while           reduce using rule 93 (Factor -> gid .)
    read            reduce using rule 93 (Factor -> gid .)
    if              reduce using rule 93 (Factor -> gid .)
    repeat          reduce using rule 93 (Factor -> gid .)
    num             reduce using rule 93 (Factor -> gid .)
    (               reduce using rule 93 (Factor -> gid .)
    ;               reduce using rule 93 (Factor -> gid .)
    )               reduce using rule 93 (Factor -> gid .)


state 37

    (53) Return -> return . ( Exp )

    (               shift and go to state 90


state 38

    (96) Factor -> ( . Cond )
    (101) Factor -> ( . Exp )
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 92
    Exp                            shift and go to state 93
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 39

    (67) Exp -> Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 67 (Exp -> Term .)
    -               reduce using rule 67 (Exp -> Term .)
    }               reduce using rule 67 (Exp -> Term .)
    id              reduce using rule 67 (Exp -> Term .)
    gid             reduce using rule 67 (Exp -> Term .)
    return          reduce using rule 67 (Exp -> Term .)
    print           reduce using rule 67 (Exp -> Term .)
    println         reduce using rule 67 (Exp -> Term .)
    prints          reduce using rule 67 (Exp -> Term .)
    for             reduce using rule 67 (Exp -> Term .)
    while           reduce using rule 67 (Exp -> Term .)
    read            reduce using rule 67 (Exp -> Term .)
    if              reduce using rule 67 (Exp -> Term .)
    repeat          reduce using rule 67 (Exp -> Term .)
    num             reduce using rule 67 (Exp -> Term .)
    (               reduce using rule 67 (Exp -> Term .)
    )               reduce using rule 67 (Exp -> Term .)
    sup             reduce using rule 67 (Exp -> Term .)
    inf             reduce using rule 67 (Exp -> Term .)
    supeq           reduce using rule 67 (Exp -> Term .)
    infeq           reduce using rule 67 (Exp -> Term .)
    eq              reduce using rule 67 (Exp -> Term .)
    diff            reduce using rule 67 (Exp -> Term .)
    ;               reduce using rule 67 (Exp -> Term .)
    ]               reduce using rule 67 (Exp -> Term .)
    and             reduce using rule 67 (Exp -> Term .)
    or              reduce using rule 67 (Exp -> Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 40

    (31) Print -> print . ( Exp )

    (               shift and go to state 100


state 41

    (32) Println -> println . ( Exp )

    (               shift and go to state 101


state 42

    (33) Prints -> prints . ( string )

    (               shift and go to state 102


state 43

    (26) Repeat -> RepeatS . ( num ) { Insts }

    (               shift and go to state 103


state 44

    (94) Factor -> num .

    *               reduce using rule 94 (Factor -> num .)
    /               reduce using rule 94 (Factor -> num .)
    %               reduce using rule 94 (Factor -> num .)
    +               reduce using rule 94 (Factor -> num .)
    -               reduce using rule 94 (Factor -> num .)
    }               reduce using rule 94 (Factor -> num .)
    id              reduce using rule 94 (Factor -> num .)
    gid             reduce using rule 94 (Factor -> num .)
    return          reduce using rule 94 (Factor -> num .)
    print           reduce using rule 94 (Factor -> num .)
    println         reduce using rule 94 (Factor -> num .)
    prints          reduce using rule 94 (Factor -> num .)
    for             reduce using rule 94 (Factor -> num .)
    while           reduce using rule 94 (Factor -> num .)
    read            reduce using rule 94 (Factor -> num .)
    if              reduce using rule 94 (Factor -> num .)
    repeat          reduce using rule 94 (Factor -> num .)
    num             reduce using rule 94 (Factor -> num .)
    (               reduce using rule 94 (Factor -> num .)
    )               reduce using rule 94 (Factor -> num .)
    sup             reduce using rule 94 (Factor -> num .)
    inf             reduce using rule 94 (Factor -> num .)
    supeq           reduce using rule 94 (Factor -> num .)
    infeq           reduce using rule 94 (Factor -> num .)
    eq              reduce using rule 94 (Factor -> num .)
    diff            reduce using rule 94 (Factor -> num .)
    ;               reduce using rule 94 (Factor -> num .)
    ]               reduce using rule 94 (Factor -> num .)
    and             reduce using rule 94 (Factor -> num .)
    or              reduce using rule 94 (Factor -> num .)


state 45

    (28) For -> for . ( Insts ; Cond ; Insts ) { Insts }

    (               shift and go to state 104


state 46

    (29) While -> while . ( Cond ) { Insts }

    (               shift and go to state 105


state 47

    (30) Read -> read . ( id )

    (               shift and go to state 106


state 48

    (54) If -> if . ( Cond ) { Insts }
    (55) If -> if . ( Cond ) Inst
    (56) If -> if . ( Cond ) { Insts } else { Insts }

    (               shift and go to state 107


state 49

    (83) Term -> Factor .

    *               reduce using rule 83 (Term -> Factor .)
    /               reduce using rule 83 (Term -> Factor .)
    %               reduce using rule 83 (Term -> Factor .)
    +               reduce using rule 83 (Term -> Factor .)
    -               reduce using rule 83 (Term -> Factor .)
    }               reduce using rule 83 (Term -> Factor .)
    id              reduce using rule 83 (Term -> Factor .)
    gid             reduce using rule 83 (Term -> Factor .)
    return          reduce using rule 83 (Term -> Factor .)
    print           reduce using rule 83 (Term -> Factor .)
    println         reduce using rule 83 (Term -> Factor .)
    prints          reduce using rule 83 (Term -> Factor .)
    for             reduce using rule 83 (Term -> Factor .)
    while           reduce using rule 83 (Term -> Factor .)
    read            reduce using rule 83 (Term -> Factor .)
    if              reduce using rule 83 (Term -> Factor .)
    repeat          reduce using rule 83 (Term -> Factor .)
    num             reduce using rule 83 (Term -> Factor .)
    (               reduce using rule 83 (Term -> Factor .)
    )               reduce using rule 83 (Term -> Factor .)
    sup             reduce using rule 83 (Term -> Factor .)
    inf             reduce using rule 83 (Term -> Factor .)
    supeq           reduce using rule 83 (Term -> Factor .)
    infeq           reduce using rule 83 (Term -> Factor .)
    eq              reduce using rule 83 (Term -> Factor .)
    diff            reduce using rule 83 (Term -> Factor .)
    ;               reduce using rule 83 (Term -> Factor .)
    ]               reduce using rule 83 (Term -> Factor .)
    and             reduce using rule 83 (Term -> Factor .)
    or              reduce using rule 83 (Term -> Factor .)


state 50

    (27) RepeatS -> repeat .

    (               reduce using rule 27 (RepeatS -> repeat .)


state 51

    (34) BlcInt -> int { Dcls } .

    }               reduce using rule 34 (BlcInt -> int { Dcls } .)
    int             reduce using rule 34 (BlcInt -> int { Dcls } .)
    id              reduce using rule 34 (BlcInt -> int { Dcls } .)
    gid             reduce using rule 34 (BlcInt -> int { Dcls } .)
    return          reduce using rule 34 (BlcInt -> int { Dcls } .)
    print           reduce using rule 34 (BlcInt -> int { Dcls } .)
    println         reduce using rule 34 (BlcInt -> int { Dcls } .)
    prints          reduce using rule 34 (BlcInt -> int { Dcls } .)
    for             reduce using rule 34 (BlcInt -> int { Dcls } .)
    while           reduce using rule 34 (BlcInt -> int { Dcls } .)
    read            reduce using rule 34 (BlcInt -> int { Dcls } .)
    if              reduce using rule 34 (BlcInt -> int { Dcls } .)
    repeat          reduce using rule 34 (BlcInt -> int { Dcls } .)
    num             reduce using rule 34 (BlcInt -> int { Dcls } .)
    (               reduce using rule 34 (BlcInt -> int { Dcls } .)


state 52

    (10) Dcls -> Dcls Dcl .

    }               reduce using rule 10 (Dcls -> Dcls Dcl .)
    id              reduce using rule 10 (Dcls -> Dcls Dcl .)


state 53

    (35) Dcl -> id . [ num ]
    (36) Dcl -> id . [ num ] = num
    (37) Dcl -> id . [ ] = { Nums }
    (40) Dcl -> id . [ num ] [ num ] = num
    (41) Dcl -> id . [ num ] [ num ]
    (42) Dcl -> id . [ ] [ ] = { BlcsNums }
    (45) Dcl -> id .
    (46) Dcl -> id . = num

    [               shift and go to state 108
    }               reduce using rule 45 (Dcl -> id .)
    id              reduce using rule 45 (Dcl -> id .)
    =               shift and go to state 109


state 54

    (4) DefBlc -> id { VarBlcs Insts . }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    }               shift and go to state 110
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 55

    (57) Exp -> Exp + . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 111
    Factor                         shift and go to state 49

state 56

    (58) Exp -> Exp - . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 114
    Factor                         shift and go to state 49

state 57

    (47) Attr -> id = . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 115
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 58

    (48) Attr -> id [ . Exp ] = Exp
    (49) Attr -> id [ . Exp ] [ Exp ] = Exp
    (97) Factor -> id [ . Exp ]
    (98) Factor -> id [ . Exp ] [ Exp ]
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 116
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 59

    (59) Exp -> id addeq . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 117
    Factor                         shift and go to state 49

state 60

    (60) Exp -> id subeq . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 118
    Factor                         shift and go to state 49

state 61

    (61) Exp -> id addeql . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 119
    Factor                         shift and go to state 49

state 62

    (62) Exp -> id subeql . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 120
    Factor                         shift and go to state 49

state 63

    (71) Term -> id muleq . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 122

state 64

    (72) Term -> id diveq . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 124

state 65

    (73) Term -> id modeq . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 125

state 66

    (74) Term -> id muleql . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 126

state 67

    (75) Term -> id diveql . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 127

state 68

    (76) Term -> id modeql . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 128

state 69

    (84) Factor -> id plus .

    *               reduce using rule 84 (Factor -> id plus .)
    /               reduce using rule 84 (Factor -> id plus .)
    %               reduce using rule 84 (Factor -> id plus .)
    +               reduce using rule 84 (Factor -> id plus .)
    -               reduce using rule 84 (Factor -> id plus .)
    }               reduce using rule 84 (Factor -> id plus .)
    id              reduce using rule 84 (Factor -> id plus .)
    gid             reduce using rule 84 (Factor -> id plus .)
    return          reduce using rule 84 (Factor -> id plus .)
    print           reduce using rule 84 (Factor -> id plus .)
    println         reduce using rule 84 (Factor -> id plus .)
    prints          reduce using rule 84 (Factor -> id plus .)
    for             reduce using rule 84 (Factor -> id plus .)
    while           reduce using rule 84 (Factor -> id plus .)
    read            reduce using rule 84 (Factor -> id plus .)
    if              reduce using rule 84 (Factor -> id plus .)
    repeat          reduce using rule 84 (Factor -> id plus .)
    num             reduce using rule 84 (Factor -> id plus .)
    (               reduce using rule 84 (Factor -> id plus .)
    )               reduce using rule 84 (Factor -> id plus .)
    sup             reduce using rule 84 (Factor -> id plus .)
    inf             reduce using rule 84 (Factor -> id plus .)
    supeq           reduce using rule 84 (Factor -> id plus .)
    infeq           reduce using rule 84 (Factor -> id plus .)
    eq              reduce using rule 84 (Factor -> id plus .)
    diff            reduce using rule 84 (Factor -> id plus .)
    ;               reduce using rule 84 (Factor -> id plus .)
    ]               reduce using rule 84 (Factor -> id plus .)
    and             reduce using rule 84 (Factor -> id plus .)
    or              reduce using rule 84 (Factor -> id plus .)


state 70

    (85) Factor -> id plusl .

    *               reduce using rule 85 (Factor -> id plusl .)
    /               reduce using rule 85 (Factor -> id plusl .)
    %               reduce using rule 85 (Factor -> id plusl .)
    +               reduce using rule 85 (Factor -> id plusl .)
    -               reduce using rule 85 (Factor -> id plusl .)
    }               reduce using rule 85 (Factor -> id plusl .)
    id              reduce using rule 85 (Factor -> id plusl .)
    gid             reduce using rule 85 (Factor -> id plusl .)
    return          reduce using rule 85 (Factor -> id plusl .)
    print           reduce using rule 85 (Factor -> id plusl .)
    println         reduce using rule 85 (Factor -> id plusl .)
    prints          reduce using rule 85 (Factor -> id plusl .)
    for             reduce using rule 85 (Factor -> id plusl .)
    while           reduce using rule 85 (Factor -> id plusl .)
    read            reduce using rule 85 (Factor -> id plusl .)
    if              reduce using rule 85 (Factor -> id plusl .)
    repeat          reduce using rule 85 (Factor -> id plusl .)
    num             reduce using rule 85 (Factor -> id plusl .)
    (               reduce using rule 85 (Factor -> id plusl .)
    )               reduce using rule 85 (Factor -> id plusl .)
    sup             reduce using rule 85 (Factor -> id plusl .)
    inf             reduce using rule 85 (Factor -> id plusl .)
    supeq           reduce using rule 85 (Factor -> id plusl .)
    infeq           reduce using rule 85 (Factor -> id plusl .)
    eq              reduce using rule 85 (Factor -> id plusl .)
    diff            reduce using rule 85 (Factor -> id plusl .)
    ;               reduce using rule 85 (Factor -> id plusl .)
    ]               reduce using rule 85 (Factor -> id plusl .)
    and             reduce using rule 85 (Factor -> id plusl .)
    or              reduce using rule 85 (Factor -> id plusl .)


state 71

    (86) Factor -> id minus .

    *               reduce using rule 86 (Factor -> id minus .)
    /               reduce using rule 86 (Factor -> id minus .)
    %               reduce using rule 86 (Factor -> id minus .)
    +               reduce using rule 86 (Factor -> id minus .)
    -               reduce using rule 86 (Factor -> id minus .)
    }               reduce using rule 86 (Factor -> id minus .)
    id              reduce using rule 86 (Factor -> id minus .)
    gid             reduce using rule 86 (Factor -> id minus .)
    return          reduce using rule 86 (Factor -> id minus .)
    print           reduce using rule 86 (Factor -> id minus .)
    println         reduce using rule 86 (Factor -> id minus .)
    prints          reduce using rule 86 (Factor -> id minus .)
    for             reduce using rule 86 (Factor -> id minus .)
    while           reduce using rule 86 (Factor -> id minus .)
    read            reduce using rule 86 (Factor -> id minus .)
    if              reduce using rule 86 (Factor -> id minus .)
    repeat          reduce using rule 86 (Factor -> id minus .)
    num             reduce using rule 86 (Factor -> id minus .)
    (               reduce using rule 86 (Factor -> id minus .)
    )               reduce using rule 86 (Factor -> id minus .)
    sup             reduce using rule 86 (Factor -> id minus .)
    inf             reduce using rule 86 (Factor -> id minus .)
    supeq           reduce using rule 86 (Factor -> id minus .)
    infeq           reduce using rule 86 (Factor -> id minus .)
    eq              reduce using rule 86 (Factor -> id minus .)
    diff            reduce using rule 86 (Factor -> id minus .)
    ;               reduce using rule 86 (Factor -> id minus .)
    ]               reduce using rule 86 (Factor -> id minus .)
    and             reduce using rule 86 (Factor -> id minus .)
    or              reduce using rule 86 (Factor -> id minus .)


state 72

    (87) Factor -> id minusl .

    *               reduce using rule 87 (Factor -> id minusl .)
    /               reduce using rule 87 (Factor -> id minusl .)
    %               reduce using rule 87 (Factor -> id minusl .)
    +               reduce using rule 87 (Factor -> id minusl .)
    -               reduce using rule 87 (Factor -> id minusl .)
    }               reduce using rule 87 (Factor -> id minusl .)
    id              reduce using rule 87 (Factor -> id minusl .)
    gid             reduce using rule 87 (Factor -> id minusl .)
    return          reduce using rule 87 (Factor -> id minusl .)
    print           reduce using rule 87 (Factor -> id minusl .)
    println         reduce using rule 87 (Factor -> id minusl .)
    prints          reduce using rule 87 (Factor -> id minusl .)
    for             reduce using rule 87 (Factor -> id minusl .)
    while           reduce using rule 87 (Factor -> id minusl .)
    read            reduce using rule 87 (Factor -> id minusl .)
    if              reduce using rule 87 (Factor -> id minusl .)
    repeat          reduce using rule 87 (Factor -> id minusl .)
    num             reduce using rule 87 (Factor -> id minusl .)
    (               reduce using rule 87 (Factor -> id minusl .)
    )               reduce using rule 87 (Factor -> id minusl .)
    sup             reduce using rule 87 (Factor -> id minusl .)
    inf             reduce using rule 87 (Factor -> id minusl .)
    supeq           reduce using rule 87 (Factor -> id minusl .)
    infeq           reduce using rule 87 (Factor -> id minusl .)
    eq              reduce using rule 87 (Factor -> id minusl .)
    diff            reduce using rule 87 (Factor -> id minusl .)
    ;               reduce using rule 87 (Factor -> id minusl .)
    ]               reduce using rule 87 (Factor -> id minusl .)
    and             reduce using rule 87 (Factor -> id minusl .)
    or              reduce using rule 87 (Factor -> id minusl .)


state 73

    (95) Factor -> id ( . )

    )               shift and go to state 129


state 74

    (50) Attr -> gid = . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 130
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 75

    (51) Attr -> gid [ . Exp ] = Exp
    (52) Attr -> gid [ . Exp ] [ Exp ] = Exp
    (99) Factor -> gid [ . Exp ]
    (100) Factor -> gid [ . Exp ] [ Exp ]
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 131
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 76

    (63) Exp -> gid addeq . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 132
    Factor                         shift and go to state 49

state 77

    (64) Exp -> gid subeq . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 133
    Factor                         shift and go to state 49

state 78

    (65) Exp -> gid addeql . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 134
    Factor                         shift and go to state 49

state 79

    (66) Exp -> gid subeql . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 112
    gid             shift and go to state 113
    num             shift and go to state 44
    (               shift and go to state 38

    Term                           shift and go to state 135
    Factor                         shift and go to state 49

state 80

    (77) Term -> gid muleq . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 136

state 81

    (78) Term -> gid diveq . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 137

state 82

    (79) Term -> gid modeq . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 138

state 83

    (80) Term -> gid muleql . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 139

state 84

    (81) Term -> gid diveql . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 140

state 85

    (82) Term -> gid modeql . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 141

state 86

    (88) Factor -> gid plus .

    *               reduce using rule 88 (Factor -> gid plus .)
    /               reduce using rule 88 (Factor -> gid plus .)
    %               reduce using rule 88 (Factor -> gid plus .)
    +               reduce using rule 88 (Factor -> gid plus .)
    -               reduce using rule 88 (Factor -> gid plus .)
    }               reduce using rule 88 (Factor -> gid plus .)
    id              reduce using rule 88 (Factor -> gid plus .)
    gid             reduce using rule 88 (Factor -> gid plus .)
    return          reduce using rule 88 (Factor -> gid plus .)
    print           reduce using rule 88 (Factor -> gid plus .)
    println         reduce using rule 88 (Factor -> gid plus .)
    prints          reduce using rule 88 (Factor -> gid plus .)
    for             reduce using rule 88 (Factor -> gid plus .)
    while           reduce using rule 88 (Factor -> gid plus .)
    read            reduce using rule 88 (Factor -> gid plus .)
    if              reduce using rule 88 (Factor -> gid plus .)
    repeat          reduce using rule 88 (Factor -> gid plus .)
    num             reduce using rule 88 (Factor -> gid plus .)
    (               reduce using rule 88 (Factor -> gid plus .)
    )               reduce using rule 88 (Factor -> gid plus .)
    sup             reduce using rule 88 (Factor -> gid plus .)
    inf             reduce using rule 88 (Factor -> gid plus .)
    supeq           reduce using rule 88 (Factor -> gid plus .)
    infeq           reduce using rule 88 (Factor -> gid plus .)
    eq              reduce using rule 88 (Factor -> gid plus .)
    diff            reduce using rule 88 (Factor -> gid plus .)
    ;               reduce using rule 88 (Factor -> gid plus .)
    ]               reduce using rule 88 (Factor -> gid plus .)
    and             reduce using rule 88 (Factor -> gid plus .)
    or              reduce using rule 88 (Factor -> gid plus .)


state 87

    (89) Factor -> gid plusl .

    *               reduce using rule 89 (Factor -> gid plusl .)
    /               reduce using rule 89 (Factor -> gid plusl .)
    %               reduce using rule 89 (Factor -> gid plusl .)
    +               reduce using rule 89 (Factor -> gid plusl .)
    -               reduce using rule 89 (Factor -> gid plusl .)
    }               reduce using rule 89 (Factor -> gid plusl .)
    id              reduce using rule 89 (Factor -> gid plusl .)
    gid             reduce using rule 89 (Factor -> gid plusl .)
    return          reduce using rule 89 (Factor -> gid plusl .)
    print           reduce using rule 89 (Factor -> gid plusl .)
    println         reduce using rule 89 (Factor -> gid plusl .)
    prints          reduce using rule 89 (Factor -> gid plusl .)
    for             reduce using rule 89 (Factor -> gid plusl .)
    while           reduce using rule 89 (Factor -> gid plusl .)
    read            reduce using rule 89 (Factor -> gid plusl .)
    if              reduce using rule 89 (Factor -> gid plusl .)
    repeat          reduce using rule 89 (Factor -> gid plusl .)
    num             reduce using rule 89 (Factor -> gid plusl .)
    (               reduce using rule 89 (Factor -> gid plusl .)
    )               reduce using rule 89 (Factor -> gid plusl .)
    sup             reduce using rule 89 (Factor -> gid plusl .)
    inf             reduce using rule 89 (Factor -> gid plusl .)
    supeq           reduce using rule 89 (Factor -> gid plusl .)
    infeq           reduce using rule 89 (Factor -> gid plusl .)
    eq              reduce using rule 89 (Factor -> gid plusl .)
    diff            reduce using rule 89 (Factor -> gid plusl .)
    ;               reduce using rule 89 (Factor -> gid plusl .)
    ]               reduce using rule 89 (Factor -> gid plusl .)
    and             reduce using rule 89 (Factor -> gid plusl .)
    or              reduce using rule 89 (Factor -> gid plusl .)


state 88

    (90) Factor -> gid minus .

    *               reduce using rule 90 (Factor -> gid minus .)
    /               reduce using rule 90 (Factor -> gid minus .)
    %               reduce using rule 90 (Factor -> gid minus .)
    +               reduce using rule 90 (Factor -> gid minus .)
    -               reduce using rule 90 (Factor -> gid minus .)
    }               reduce using rule 90 (Factor -> gid minus .)
    id              reduce using rule 90 (Factor -> gid minus .)
    gid             reduce using rule 90 (Factor -> gid minus .)
    return          reduce using rule 90 (Factor -> gid minus .)
    print           reduce using rule 90 (Factor -> gid minus .)
    println         reduce using rule 90 (Factor -> gid minus .)
    prints          reduce using rule 90 (Factor -> gid minus .)
    for             reduce using rule 90 (Factor -> gid minus .)
    while           reduce using rule 90 (Factor -> gid minus .)
    read            reduce using rule 90 (Factor -> gid minus .)
    if              reduce using rule 90 (Factor -> gid minus .)
    repeat          reduce using rule 90 (Factor -> gid minus .)
    num             reduce using rule 90 (Factor -> gid minus .)
    (               reduce using rule 90 (Factor -> gid minus .)
    )               reduce using rule 90 (Factor -> gid minus .)
    sup             reduce using rule 90 (Factor -> gid minus .)
    inf             reduce using rule 90 (Factor -> gid minus .)
    supeq           reduce using rule 90 (Factor -> gid minus .)
    infeq           reduce using rule 90 (Factor -> gid minus .)
    eq              reduce using rule 90 (Factor -> gid minus .)
    diff            reduce using rule 90 (Factor -> gid minus .)
    ;               reduce using rule 90 (Factor -> gid minus .)
    ]               reduce using rule 90 (Factor -> gid minus .)
    and             reduce using rule 90 (Factor -> gid minus .)
    or              reduce using rule 90 (Factor -> gid minus .)


state 89

    (91) Factor -> gid minusl .

    *               reduce using rule 91 (Factor -> gid minusl .)
    /               reduce using rule 91 (Factor -> gid minusl .)
    %               reduce using rule 91 (Factor -> gid minusl .)
    +               reduce using rule 91 (Factor -> gid minusl .)
    -               reduce using rule 91 (Factor -> gid minusl .)
    }               reduce using rule 91 (Factor -> gid minusl .)
    id              reduce using rule 91 (Factor -> gid minusl .)
    gid             reduce using rule 91 (Factor -> gid minusl .)
    return          reduce using rule 91 (Factor -> gid minusl .)
    print           reduce using rule 91 (Factor -> gid minusl .)
    println         reduce using rule 91 (Factor -> gid minusl .)
    prints          reduce using rule 91 (Factor -> gid minusl .)
    for             reduce using rule 91 (Factor -> gid minusl .)
    while           reduce using rule 91 (Factor -> gid minusl .)
    read            reduce using rule 91 (Factor -> gid minusl .)
    if              reduce using rule 91 (Factor -> gid minusl .)
    repeat          reduce using rule 91 (Factor -> gid minusl .)
    num             reduce using rule 91 (Factor -> gid minusl .)
    (               reduce using rule 91 (Factor -> gid minusl .)
    )               reduce using rule 91 (Factor -> gid minusl .)
    sup             reduce using rule 91 (Factor -> gid minusl .)
    inf             reduce using rule 91 (Factor -> gid minusl .)
    supeq           reduce using rule 91 (Factor -> gid minusl .)
    infeq           reduce using rule 91 (Factor -> gid minusl .)
    eq              reduce using rule 91 (Factor -> gid minusl .)
    diff            reduce using rule 91 (Factor -> gid minusl .)
    ;               reduce using rule 91 (Factor -> gid minusl .)
    ]               reduce using rule 91 (Factor -> gid minusl .)
    and             reduce using rule 91 (Factor -> gid minusl .)
    or              reduce using rule 91 (Factor -> gid minusl .)


state 90

    (53) Return -> return ( . Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 142
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 91

    (104) Cond -> ( . Cond and Cond )
    (105) Cond -> ( . Cond or Cond )
    (96) Factor -> ( . Cond )
    (101) Factor -> ( . Exp )
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 143
    Exp                            shift and go to state 93
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 92

    (96) Factor -> ( Cond . )
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

    )               shift and go to state 144
    and             shift and go to state 145
    or              shift and go to state 146


state 93

    (101) Factor -> ( Exp . )
    (106) Cond -> Exp . sup Exp
    (107) Cond -> Exp . inf Exp
    (108) Cond -> Exp . supeq Exp
    (109) Cond -> Exp . infeq Exp
    (111) Cond -> Exp . eq Exp
    (112) Cond -> Exp . diff Exp
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               shift and go to state 147
    sup             shift and go to state 148
    inf             shift and go to state 149
    supeq           shift and go to state 150
    infeq           shift and go to state 151
    eq              shift and go to state 152
    diff            shift and go to state 153
    +               shift and go to state 55
    -               shift and go to state 56


state 94

    (110) Cond -> not . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 154
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 95

    (59) Exp -> id . addeq Term
    (60) Exp -> id . subeq Term
    (61) Exp -> id . addeql Term
    (62) Exp -> id . subeql Term
    (71) Term -> id . muleq Factor
    (72) Term -> id . diveq Factor
    (73) Term -> id . modeq Factor
    (74) Term -> id . muleql Factor
    (75) Term -> id . diveql Factor
    (76) Term -> id . modeql Factor
    (84) Factor -> id . plus
    (85) Factor -> id . plusl
    (86) Factor -> id . minus
    (87) Factor -> id . minusl
    (92) Factor -> id .
    (95) Factor -> id . ( )
    (97) Factor -> id . [ Exp ]
    (98) Factor -> id . [ Exp ] [ Exp ]

  ! shift/reduce conflict for ( resolved as shift
    addeq           shift and go to state 59
    subeq           shift and go to state 60
    addeql          shift and go to state 61
    subeql          shift and go to state 62
    muleq           shift and go to state 63
    diveq           shift and go to state 64
    modeq           shift and go to state 65
    muleql          shift and go to state 66
    diveql          shift and go to state 67
    modeql          shift and go to state 68
    plus            shift and go to state 69
    plusl           shift and go to state 70
    minus           shift and go to state 71
    minusl          shift and go to state 72
    *               reduce using rule 92 (Factor -> id .)
    /               reduce using rule 92 (Factor -> id .)
    %               reduce using rule 92 (Factor -> id .)
    )               reduce using rule 92 (Factor -> id .)
    sup             reduce using rule 92 (Factor -> id .)
    inf             reduce using rule 92 (Factor -> id .)
    supeq           reduce using rule 92 (Factor -> id .)
    infeq           reduce using rule 92 (Factor -> id .)
    eq              reduce using rule 92 (Factor -> id .)
    diff            reduce using rule 92 (Factor -> id .)
    +               reduce using rule 92 (Factor -> id .)
    -               reduce using rule 92 (Factor -> id .)
    }               reduce using rule 92 (Factor -> id .)
    id              reduce using rule 92 (Factor -> id .)
    gid             reduce using rule 92 (Factor -> id .)
    return          reduce using rule 92 (Factor -> id .)
    print           reduce using rule 92 (Factor -> id .)
    println         reduce using rule 92 (Factor -> id .)
    prints          reduce using rule 92 (Factor -> id .)
    for             reduce using rule 92 (Factor -> id .)
    while           reduce using rule 92 (Factor -> id .)
    read            reduce using rule 92 (Factor -> id .)
    if              reduce using rule 92 (Factor -> id .)
    repeat          reduce using rule 92 (Factor -> id .)
    num             reduce using rule 92 (Factor -> id .)
    ;               reduce using rule 92 (Factor -> id .)
    ]               reduce using rule 92 (Factor -> id .)
    and             reduce using rule 92 (Factor -> id .)
    or              reduce using rule 92 (Factor -> id .)
    (               shift and go to state 73
    [               shift and go to state 155

  ! (               [ reduce using rule 92 (Factor -> id .) ]


state 96

    (63) Exp -> gid . addeq Term
    (64) Exp -> gid . subeq Term
    (65) Exp -> gid . addeql Term
    (66) Exp -> gid . subeql Term
    (77) Term -> gid . muleq Factor
    (78) Term -> gid . diveq Factor
    (79) Term -> gid . modeq Factor
    (80) Term -> gid . muleql Factor
    (81) Term -> gid . diveql Factor
    (82) Term -> gid . modeql Factor
    (88) Factor -> gid . plus
    (89) Factor -> gid . plusl
    (90) Factor -> gid . minus
    (91) Factor -> gid . minusl
    (93) Factor -> gid .
    (99) Factor -> gid . [ Exp ]
    (100) Factor -> gid . [ Exp ] [ Exp ]

    addeq           shift and go to state 76
    subeq           shift and go to state 77
    addeql          shift and go to state 78
    subeql          shift and go to state 79
    muleq           shift and go to state 80
    diveq           shift and go to state 81
    modeq           shift and go to state 82
    muleql          shift and go to state 83
    diveql          shift and go to state 84
    modeql          shift and go to state 85
    plus            shift and go to state 86
    plusl           shift and go to state 87
    minus           shift and go to state 88
    minusl          shift and go to state 89
    *               reduce using rule 93 (Factor -> gid .)
    /               reduce using rule 93 (Factor -> gid .)
    %               reduce using rule 93 (Factor -> gid .)
    )               reduce using rule 93 (Factor -> gid .)
    sup             reduce using rule 93 (Factor -> gid .)
    inf             reduce using rule 93 (Factor -> gid .)
    supeq           reduce using rule 93 (Factor -> gid .)
    infeq           reduce using rule 93 (Factor -> gid .)
    eq              reduce using rule 93 (Factor -> gid .)
    diff            reduce using rule 93 (Factor -> gid .)
    +               reduce using rule 93 (Factor -> gid .)
    -               reduce using rule 93 (Factor -> gid .)
    }               reduce using rule 93 (Factor -> gid .)
    id              reduce using rule 93 (Factor -> gid .)
    gid             reduce using rule 93 (Factor -> gid .)
    return          reduce using rule 93 (Factor -> gid .)
    print           reduce using rule 93 (Factor -> gid .)
    println         reduce using rule 93 (Factor -> gid .)
    prints          reduce using rule 93 (Factor -> gid .)
    for             reduce using rule 93 (Factor -> gid .)
    while           reduce using rule 93 (Factor -> gid .)
    read            reduce using rule 93 (Factor -> gid .)
    if              reduce using rule 93 (Factor -> gid .)
    repeat          reduce using rule 93 (Factor -> gid .)
    num             reduce using rule 93 (Factor -> gid .)
    (               reduce using rule 93 (Factor -> gid .)
    ;               reduce using rule 93 (Factor -> gid .)
    ]               reduce using rule 93 (Factor -> gid .)
    and             reduce using rule 93 (Factor -> gid .)
    or              reduce using rule 93 (Factor -> gid .)
    [               shift and go to state 156


state 97

    (68) Term -> Term * . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 157

state 98

    (69) Term -> Term / . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 158

state 99

    (70) Term -> Term % . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 121
    gid             shift and go to state 123
    num             shift and go to state 44
    (               shift and go to state 38

    Factor                         shift and go to state 159

state 100

    (31) Print -> print ( . Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 160
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 101

    (32) Println -> println ( . Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 161
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 102

    (33) Prints -> prints ( . string )

    string          shift and go to state 162


state 103

    (26) Repeat -> RepeatS ( . num ) { Insts }

    num             shift and go to state 163


state 104

    (28) For -> for ( . Insts ; Cond ; Insts ) { Insts }
    (13) Insts -> . Insts Inst
    (14) Insts -> .

    ;               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)

    Insts                          shift and go to state 164

state 105

    (29) While -> while ( . Cond ) { Insts }
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 165
    Exp                            shift and go to state 166
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 106

    (30) Read -> read ( . id )

    id              shift and go to state 167


state 107

    (54) If -> if ( . Cond ) { Insts }
    (55) If -> if ( . Cond ) Inst
    (56) If -> if ( . Cond ) { Insts } else { Insts }
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 168
    Exp                            shift and go to state 166
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 108

    (35) Dcl -> id [ . num ]
    (36) Dcl -> id [ . num ] = num
    (37) Dcl -> id [ . ] = { Nums }
    (40) Dcl -> id [ . num ] [ num ] = num
    (41) Dcl -> id [ . num ] [ num ]
    (42) Dcl -> id [ . ] [ ] = { BlcsNums }

    num             shift and go to state 169
    ]               shift and go to state 170


state 109

    (46) Dcl -> id = . num

    num             shift and go to state 171


state 110

    (4) DefBlc -> id { VarBlcs Insts } .

    id              reduce using rule 4 (DefBlc -> id { VarBlcs Insts } .)
    $end            reduce using rule 4 (DefBlc -> id { VarBlcs Insts } .)


state 111

    (57) Exp -> Exp + Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 57 (Exp -> Exp + Term .)
    -               reduce using rule 57 (Exp -> Exp + Term .)
    }               reduce using rule 57 (Exp -> Exp + Term .)
    id              reduce using rule 57 (Exp -> Exp + Term .)
    gid             reduce using rule 57 (Exp -> Exp + Term .)
    return          reduce using rule 57 (Exp -> Exp + Term .)
    print           reduce using rule 57 (Exp -> Exp + Term .)
    println         reduce using rule 57 (Exp -> Exp + Term .)
    prints          reduce using rule 57 (Exp -> Exp + Term .)
    for             reduce using rule 57 (Exp -> Exp + Term .)
    while           reduce using rule 57 (Exp -> Exp + Term .)
    read            reduce using rule 57 (Exp -> Exp + Term .)
    if              reduce using rule 57 (Exp -> Exp + Term .)
    repeat          reduce using rule 57 (Exp -> Exp + Term .)
    num             reduce using rule 57 (Exp -> Exp + Term .)
    (               reduce using rule 57 (Exp -> Exp + Term .)
    )               reduce using rule 57 (Exp -> Exp + Term .)
    sup             reduce using rule 57 (Exp -> Exp + Term .)
    inf             reduce using rule 57 (Exp -> Exp + Term .)
    supeq           reduce using rule 57 (Exp -> Exp + Term .)
    infeq           reduce using rule 57 (Exp -> Exp + Term .)
    eq              reduce using rule 57 (Exp -> Exp + Term .)
    diff            reduce using rule 57 (Exp -> Exp + Term .)
    ;               reduce using rule 57 (Exp -> Exp + Term .)
    ]               reduce using rule 57 (Exp -> Exp + Term .)
    and             reduce using rule 57 (Exp -> Exp + Term .)
    or              reduce using rule 57 (Exp -> Exp + Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 112

    (71) Term -> id . muleq Factor
    (72) Term -> id . diveq Factor
    (73) Term -> id . modeq Factor
    (74) Term -> id . muleql Factor
    (75) Term -> id . diveql Factor
    (76) Term -> id . modeql Factor
    (84) Factor -> id . plus
    (85) Factor -> id . plusl
    (86) Factor -> id . minus
    (87) Factor -> id . minusl
    (92) Factor -> id .
    (95) Factor -> id . ( )
    (97) Factor -> id . [ Exp ]
    (98) Factor -> id . [ Exp ] [ Exp ]

  ! shift/reduce conflict for ( resolved as shift
    muleq           shift and go to state 63
    diveq           shift and go to state 64
    modeq           shift and go to state 65
    muleql          shift and go to state 66
    diveql          shift and go to state 67
    modeql          shift and go to state 68
    plus            shift and go to state 69
    plusl           shift and go to state 70
    minus           shift and go to state 71
    minusl          shift and go to state 72
    *               reduce using rule 92 (Factor -> id .)
    /               reduce using rule 92 (Factor -> id .)
    %               reduce using rule 92 (Factor -> id .)
    +               reduce using rule 92 (Factor -> id .)
    -               reduce using rule 92 (Factor -> id .)
    }               reduce using rule 92 (Factor -> id .)
    id              reduce using rule 92 (Factor -> id .)
    gid             reduce using rule 92 (Factor -> id .)
    return          reduce using rule 92 (Factor -> id .)
    print           reduce using rule 92 (Factor -> id .)
    println         reduce using rule 92 (Factor -> id .)
    prints          reduce using rule 92 (Factor -> id .)
    for             reduce using rule 92 (Factor -> id .)
    while           reduce using rule 92 (Factor -> id .)
    read            reduce using rule 92 (Factor -> id .)
    if              reduce using rule 92 (Factor -> id .)
    repeat          reduce using rule 92 (Factor -> id .)
    num             reduce using rule 92 (Factor -> id .)
    )               reduce using rule 92 (Factor -> id .)
    sup             reduce using rule 92 (Factor -> id .)
    inf             reduce using rule 92 (Factor -> id .)
    supeq           reduce using rule 92 (Factor -> id .)
    infeq           reduce using rule 92 (Factor -> id .)
    eq              reduce using rule 92 (Factor -> id .)
    diff            reduce using rule 92 (Factor -> id .)
    ;               reduce using rule 92 (Factor -> id .)
    ]               reduce using rule 92 (Factor -> id .)
    and             reduce using rule 92 (Factor -> id .)
    or              reduce using rule 92 (Factor -> id .)
    (               shift and go to state 73
    [               shift and go to state 155

  ! (               [ reduce using rule 92 (Factor -> id .) ]


state 113

    (77) Term -> gid . muleq Factor
    (78) Term -> gid . diveq Factor
    (79) Term -> gid . modeq Factor
    (80) Term -> gid . muleql Factor
    (81) Term -> gid . diveql Factor
    (82) Term -> gid . modeql Factor
    (88) Factor -> gid . plus
    (89) Factor -> gid . plusl
    (90) Factor -> gid . minus
    (91) Factor -> gid . minusl
    (93) Factor -> gid .
    (99) Factor -> gid . [ Exp ]
    (100) Factor -> gid . [ Exp ] [ Exp ]

    muleq           shift and go to state 80
    diveq           shift and go to state 81
    modeq           shift and go to state 82
    muleql          shift and go to state 83
    diveql          shift and go to state 84
    modeql          shift and go to state 85
    plus            shift and go to state 86
    plusl           shift and go to state 87
    minus           shift and go to state 88
    minusl          shift and go to state 89
    *               reduce using rule 93 (Factor -> gid .)
    /               reduce using rule 93 (Factor -> gid .)
    %               reduce using rule 93 (Factor -> gid .)
    +               reduce using rule 93 (Factor -> gid .)
    -               reduce using rule 93 (Factor -> gid .)
    }               reduce using rule 93 (Factor -> gid .)
    id              reduce using rule 93 (Factor -> gid .)
    gid             reduce using rule 93 (Factor -> gid .)
    return          reduce using rule 93 (Factor -> gid .)
    print           reduce using rule 93 (Factor -> gid .)
    println         reduce using rule 93 (Factor -> gid .)
    prints          reduce using rule 93 (Factor -> gid .)
    for             reduce using rule 93 (Factor -> gid .)
    while           reduce using rule 93 (Factor -> gid .)
    read            reduce using rule 93 (Factor -> gid .)
    if              reduce using rule 93 (Factor -> gid .)
    repeat          reduce using rule 93 (Factor -> gid .)
    num             reduce using rule 93 (Factor -> gid .)
    (               reduce using rule 93 (Factor -> gid .)
    )               reduce using rule 93 (Factor -> gid .)
    sup             reduce using rule 93 (Factor -> gid .)
    inf             reduce using rule 93 (Factor -> gid .)
    supeq           reduce using rule 93 (Factor -> gid .)
    infeq           reduce using rule 93 (Factor -> gid .)
    eq              reduce using rule 93 (Factor -> gid .)
    diff            reduce using rule 93 (Factor -> gid .)
    ;               reduce using rule 93 (Factor -> gid .)
    ]               reduce using rule 93 (Factor -> gid .)
    and             reduce using rule 93 (Factor -> gid .)
    or              reduce using rule 93 (Factor -> gid .)
    [               shift and go to state 156


state 114

    (58) Exp -> Exp - Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 58 (Exp -> Exp - Term .)
    -               reduce using rule 58 (Exp -> Exp - Term .)
    }               reduce using rule 58 (Exp -> Exp - Term .)
    id              reduce using rule 58 (Exp -> Exp - Term .)
    gid             reduce using rule 58 (Exp -> Exp - Term .)
    return          reduce using rule 58 (Exp -> Exp - Term .)
    print           reduce using rule 58 (Exp -> Exp - Term .)
    println         reduce using rule 58 (Exp -> Exp - Term .)
    prints          reduce using rule 58 (Exp -> Exp - Term .)
    for             reduce using rule 58 (Exp -> Exp - Term .)
    while           reduce using rule 58 (Exp -> Exp - Term .)
    read            reduce using rule 58 (Exp -> Exp - Term .)
    if              reduce using rule 58 (Exp -> Exp - Term .)
    repeat          reduce using rule 58 (Exp -> Exp - Term .)
    num             reduce using rule 58 (Exp -> Exp - Term .)
    (               reduce using rule 58 (Exp -> Exp - Term .)
    )               reduce using rule 58 (Exp -> Exp - Term .)
    sup             reduce using rule 58 (Exp -> Exp - Term .)
    inf             reduce using rule 58 (Exp -> Exp - Term .)
    supeq           reduce using rule 58 (Exp -> Exp - Term .)
    infeq           reduce using rule 58 (Exp -> Exp - Term .)
    eq              reduce using rule 58 (Exp -> Exp - Term .)
    diff            reduce using rule 58 (Exp -> Exp - Term .)
    ;               reduce using rule 58 (Exp -> Exp - Term .)
    ]               reduce using rule 58 (Exp -> Exp - Term .)
    and             reduce using rule 58 (Exp -> Exp - Term .)
    or              reduce using rule 58 (Exp -> Exp - Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 115

    (47) Attr -> id = Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    }               reduce using rule 47 (Attr -> id = Exp .)
    id              reduce using rule 47 (Attr -> id = Exp .)
    gid             reduce using rule 47 (Attr -> id = Exp .)
    return          reduce using rule 47 (Attr -> id = Exp .)
    print           reduce using rule 47 (Attr -> id = Exp .)
    println         reduce using rule 47 (Attr -> id = Exp .)
    prints          reduce using rule 47 (Attr -> id = Exp .)
    for             reduce using rule 47 (Attr -> id = Exp .)
    while           reduce using rule 47 (Attr -> id = Exp .)
    read            reduce using rule 47 (Attr -> id = Exp .)
    if              reduce using rule 47 (Attr -> id = Exp .)
    repeat          reduce using rule 47 (Attr -> id = Exp .)
    num             reduce using rule 47 (Attr -> id = Exp .)
    (               reduce using rule 47 (Attr -> id = Exp .)
    ;               reduce using rule 47 (Attr -> id = Exp .)
    )               reduce using rule 47 (Attr -> id = Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 116

    (48) Attr -> id [ Exp . ] = Exp
    (49) Attr -> id [ Exp . ] [ Exp ] = Exp
    (97) Factor -> id [ Exp . ]
    (98) Factor -> id [ Exp . ] [ Exp ]
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    ]               shift and go to state 172
    +               shift and go to state 55
    -               shift and go to state 56


state 117

    (59) Exp -> id addeq Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 59 (Exp -> id addeq Term .)
    -               reduce using rule 59 (Exp -> id addeq Term .)
    }               reduce using rule 59 (Exp -> id addeq Term .)
    id              reduce using rule 59 (Exp -> id addeq Term .)
    gid             reduce using rule 59 (Exp -> id addeq Term .)
    return          reduce using rule 59 (Exp -> id addeq Term .)
    print           reduce using rule 59 (Exp -> id addeq Term .)
    println         reduce using rule 59 (Exp -> id addeq Term .)
    prints          reduce using rule 59 (Exp -> id addeq Term .)
    for             reduce using rule 59 (Exp -> id addeq Term .)
    while           reduce using rule 59 (Exp -> id addeq Term .)
    read            reduce using rule 59 (Exp -> id addeq Term .)
    if              reduce using rule 59 (Exp -> id addeq Term .)
    repeat          reduce using rule 59 (Exp -> id addeq Term .)
    num             reduce using rule 59 (Exp -> id addeq Term .)
    (               reduce using rule 59 (Exp -> id addeq Term .)
    )               reduce using rule 59 (Exp -> id addeq Term .)
    sup             reduce using rule 59 (Exp -> id addeq Term .)
    inf             reduce using rule 59 (Exp -> id addeq Term .)
    supeq           reduce using rule 59 (Exp -> id addeq Term .)
    infeq           reduce using rule 59 (Exp -> id addeq Term .)
    eq              reduce using rule 59 (Exp -> id addeq Term .)
    diff            reduce using rule 59 (Exp -> id addeq Term .)
    ;               reduce using rule 59 (Exp -> id addeq Term .)
    ]               reduce using rule 59 (Exp -> id addeq Term .)
    and             reduce using rule 59 (Exp -> id addeq Term .)
    or              reduce using rule 59 (Exp -> id addeq Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 118

    (60) Exp -> id subeq Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 60 (Exp -> id subeq Term .)
    -               reduce using rule 60 (Exp -> id subeq Term .)
    }               reduce using rule 60 (Exp -> id subeq Term .)
    id              reduce using rule 60 (Exp -> id subeq Term .)
    gid             reduce using rule 60 (Exp -> id subeq Term .)
    return          reduce using rule 60 (Exp -> id subeq Term .)
    print           reduce using rule 60 (Exp -> id subeq Term .)
    println         reduce using rule 60 (Exp -> id subeq Term .)
    prints          reduce using rule 60 (Exp -> id subeq Term .)
    for             reduce using rule 60 (Exp -> id subeq Term .)
    while           reduce using rule 60 (Exp -> id subeq Term .)
    read            reduce using rule 60 (Exp -> id subeq Term .)
    if              reduce using rule 60 (Exp -> id subeq Term .)
    repeat          reduce using rule 60 (Exp -> id subeq Term .)
    num             reduce using rule 60 (Exp -> id subeq Term .)
    (               reduce using rule 60 (Exp -> id subeq Term .)
    )               reduce using rule 60 (Exp -> id subeq Term .)
    sup             reduce using rule 60 (Exp -> id subeq Term .)
    inf             reduce using rule 60 (Exp -> id subeq Term .)
    supeq           reduce using rule 60 (Exp -> id subeq Term .)
    infeq           reduce using rule 60 (Exp -> id subeq Term .)
    eq              reduce using rule 60 (Exp -> id subeq Term .)
    diff            reduce using rule 60 (Exp -> id subeq Term .)
    ;               reduce using rule 60 (Exp -> id subeq Term .)
    ]               reduce using rule 60 (Exp -> id subeq Term .)
    and             reduce using rule 60 (Exp -> id subeq Term .)
    or              reduce using rule 60 (Exp -> id subeq Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 119

    (61) Exp -> id addeql Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 61 (Exp -> id addeql Term .)
    -               reduce using rule 61 (Exp -> id addeql Term .)
    }               reduce using rule 61 (Exp -> id addeql Term .)
    id              reduce using rule 61 (Exp -> id addeql Term .)
    gid             reduce using rule 61 (Exp -> id addeql Term .)
    return          reduce using rule 61 (Exp -> id addeql Term .)
    print           reduce using rule 61 (Exp -> id addeql Term .)
    println         reduce using rule 61 (Exp -> id addeql Term .)
    prints          reduce using rule 61 (Exp -> id addeql Term .)
    for             reduce using rule 61 (Exp -> id addeql Term .)
    while           reduce using rule 61 (Exp -> id addeql Term .)
    read            reduce using rule 61 (Exp -> id addeql Term .)
    if              reduce using rule 61 (Exp -> id addeql Term .)
    repeat          reduce using rule 61 (Exp -> id addeql Term .)
    num             reduce using rule 61 (Exp -> id addeql Term .)
    (               reduce using rule 61 (Exp -> id addeql Term .)
    )               reduce using rule 61 (Exp -> id addeql Term .)
    sup             reduce using rule 61 (Exp -> id addeql Term .)
    inf             reduce using rule 61 (Exp -> id addeql Term .)
    supeq           reduce using rule 61 (Exp -> id addeql Term .)
    infeq           reduce using rule 61 (Exp -> id addeql Term .)
    eq              reduce using rule 61 (Exp -> id addeql Term .)
    diff            reduce using rule 61 (Exp -> id addeql Term .)
    ;               reduce using rule 61 (Exp -> id addeql Term .)
    ]               reduce using rule 61 (Exp -> id addeql Term .)
    and             reduce using rule 61 (Exp -> id addeql Term .)
    or              reduce using rule 61 (Exp -> id addeql Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 120

    (62) Exp -> id subeql Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 62 (Exp -> id subeql Term .)
    -               reduce using rule 62 (Exp -> id subeql Term .)
    }               reduce using rule 62 (Exp -> id subeql Term .)
    id              reduce using rule 62 (Exp -> id subeql Term .)
    gid             reduce using rule 62 (Exp -> id subeql Term .)
    return          reduce using rule 62 (Exp -> id subeql Term .)
    print           reduce using rule 62 (Exp -> id subeql Term .)
    println         reduce using rule 62 (Exp -> id subeql Term .)
    prints          reduce using rule 62 (Exp -> id subeql Term .)
    for             reduce using rule 62 (Exp -> id subeql Term .)
    while           reduce using rule 62 (Exp -> id subeql Term .)
    read            reduce using rule 62 (Exp -> id subeql Term .)
    if              reduce using rule 62 (Exp -> id subeql Term .)
    repeat          reduce using rule 62 (Exp -> id subeql Term .)
    num             reduce using rule 62 (Exp -> id subeql Term .)
    (               reduce using rule 62 (Exp -> id subeql Term .)
    )               reduce using rule 62 (Exp -> id subeql Term .)
    sup             reduce using rule 62 (Exp -> id subeql Term .)
    inf             reduce using rule 62 (Exp -> id subeql Term .)
    supeq           reduce using rule 62 (Exp -> id subeql Term .)
    infeq           reduce using rule 62 (Exp -> id subeql Term .)
    eq              reduce using rule 62 (Exp -> id subeql Term .)
    diff            reduce using rule 62 (Exp -> id subeql Term .)
    ;               reduce using rule 62 (Exp -> id subeql Term .)
    ]               reduce using rule 62 (Exp -> id subeql Term .)
    and             reduce using rule 62 (Exp -> id subeql Term .)
    or              reduce using rule 62 (Exp -> id subeql Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 121

    (84) Factor -> id . plus
    (85) Factor -> id . plusl
    (86) Factor -> id . minus
    (87) Factor -> id . minusl
    (92) Factor -> id .
    (95) Factor -> id . ( )
    (97) Factor -> id . [ Exp ]
    (98) Factor -> id . [ Exp ] [ Exp ]

  ! shift/reduce conflict for ( resolved as shift
    plus            shift and go to state 69
    plusl           shift and go to state 70
    minus           shift and go to state 71
    minusl          shift and go to state 72
    *               reduce using rule 92 (Factor -> id .)
    /               reduce using rule 92 (Factor -> id .)
    %               reduce using rule 92 (Factor -> id .)
    +               reduce using rule 92 (Factor -> id .)
    -               reduce using rule 92 (Factor -> id .)
    }               reduce using rule 92 (Factor -> id .)
    id              reduce using rule 92 (Factor -> id .)
    gid             reduce using rule 92 (Factor -> id .)
    return          reduce using rule 92 (Factor -> id .)
    print           reduce using rule 92 (Factor -> id .)
    println         reduce using rule 92 (Factor -> id .)
    prints          reduce using rule 92 (Factor -> id .)
    for             reduce using rule 92 (Factor -> id .)
    while           reduce using rule 92 (Factor -> id .)
    read            reduce using rule 92 (Factor -> id .)
    if              reduce using rule 92 (Factor -> id .)
    repeat          reduce using rule 92 (Factor -> id .)
    num             reduce using rule 92 (Factor -> id .)
    )               reduce using rule 92 (Factor -> id .)
    sup             reduce using rule 92 (Factor -> id .)
    inf             reduce using rule 92 (Factor -> id .)
    supeq           reduce using rule 92 (Factor -> id .)
    infeq           reduce using rule 92 (Factor -> id .)
    eq              reduce using rule 92 (Factor -> id .)
    diff            reduce using rule 92 (Factor -> id .)
    ;               reduce using rule 92 (Factor -> id .)
    ]               reduce using rule 92 (Factor -> id .)
    and             reduce using rule 92 (Factor -> id .)
    or              reduce using rule 92 (Factor -> id .)
    (               shift and go to state 73
    [               shift and go to state 155

  ! (               [ reduce using rule 92 (Factor -> id .) ]


state 122

    (71) Term -> id muleq Factor .

    *               reduce using rule 71 (Term -> id muleq Factor .)
    /               reduce using rule 71 (Term -> id muleq Factor .)
    %               reduce using rule 71 (Term -> id muleq Factor .)
    +               reduce using rule 71 (Term -> id muleq Factor .)
    -               reduce using rule 71 (Term -> id muleq Factor .)
    }               reduce using rule 71 (Term -> id muleq Factor .)
    id              reduce using rule 71 (Term -> id muleq Factor .)
    gid             reduce using rule 71 (Term -> id muleq Factor .)
    return          reduce using rule 71 (Term -> id muleq Factor .)
    print           reduce using rule 71 (Term -> id muleq Factor .)
    println         reduce using rule 71 (Term -> id muleq Factor .)
    prints          reduce using rule 71 (Term -> id muleq Factor .)
    for             reduce using rule 71 (Term -> id muleq Factor .)
    while           reduce using rule 71 (Term -> id muleq Factor .)
    read            reduce using rule 71 (Term -> id muleq Factor .)
    if              reduce using rule 71 (Term -> id muleq Factor .)
    repeat          reduce using rule 71 (Term -> id muleq Factor .)
    num             reduce using rule 71 (Term -> id muleq Factor .)
    (               reduce using rule 71 (Term -> id muleq Factor .)
    )               reduce using rule 71 (Term -> id muleq Factor .)
    sup             reduce using rule 71 (Term -> id muleq Factor .)
    inf             reduce using rule 71 (Term -> id muleq Factor .)
    supeq           reduce using rule 71 (Term -> id muleq Factor .)
    infeq           reduce using rule 71 (Term -> id muleq Factor .)
    eq              reduce using rule 71 (Term -> id muleq Factor .)
    diff            reduce using rule 71 (Term -> id muleq Factor .)
    ;               reduce using rule 71 (Term -> id muleq Factor .)
    ]               reduce using rule 71 (Term -> id muleq Factor .)
    and             reduce using rule 71 (Term -> id muleq Factor .)
    or              reduce using rule 71 (Term -> id muleq Factor .)


state 123

    (88) Factor -> gid . plus
    (89) Factor -> gid . plusl
    (90) Factor -> gid . minus
    (91) Factor -> gid . minusl
    (93) Factor -> gid .
    (99) Factor -> gid . [ Exp ]
    (100) Factor -> gid . [ Exp ] [ Exp ]

    plus            shift and go to state 86
    plusl           shift and go to state 87
    minus           shift and go to state 88
    minusl          shift and go to state 89
    *               reduce using rule 93 (Factor -> gid .)
    /               reduce using rule 93 (Factor -> gid .)
    %               reduce using rule 93 (Factor -> gid .)
    +               reduce using rule 93 (Factor -> gid .)
    -               reduce using rule 93 (Factor -> gid .)
    }               reduce using rule 93 (Factor -> gid .)
    id              reduce using rule 93 (Factor -> gid .)
    gid             reduce using rule 93 (Factor -> gid .)
    return          reduce using rule 93 (Factor -> gid .)
    print           reduce using rule 93 (Factor -> gid .)
    println         reduce using rule 93 (Factor -> gid .)
    prints          reduce using rule 93 (Factor -> gid .)
    for             reduce using rule 93 (Factor -> gid .)
    while           reduce using rule 93 (Factor -> gid .)
    read            reduce using rule 93 (Factor -> gid .)
    if              reduce using rule 93 (Factor -> gid .)
    repeat          reduce using rule 93 (Factor -> gid .)
    num             reduce using rule 93 (Factor -> gid .)
    (               reduce using rule 93 (Factor -> gid .)
    )               reduce using rule 93 (Factor -> gid .)
    sup             reduce using rule 93 (Factor -> gid .)
    inf             reduce using rule 93 (Factor -> gid .)
    supeq           reduce using rule 93 (Factor -> gid .)
    infeq           reduce using rule 93 (Factor -> gid .)
    eq              reduce using rule 93 (Factor -> gid .)
    diff            reduce using rule 93 (Factor -> gid .)
    ;               reduce using rule 93 (Factor -> gid .)
    ]               reduce using rule 93 (Factor -> gid .)
    and             reduce using rule 93 (Factor -> gid .)
    or              reduce using rule 93 (Factor -> gid .)
    [               shift and go to state 156


state 124

    (72) Term -> id diveq Factor .

    *               reduce using rule 72 (Term -> id diveq Factor .)
    /               reduce using rule 72 (Term -> id diveq Factor .)
    %               reduce using rule 72 (Term -> id diveq Factor .)
    +               reduce using rule 72 (Term -> id diveq Factor .)
    -               reduce using rule 72 (Term -> id diveq Factor .)
    }               reduce using rule 72 (Term -> id diveq Factor .)
    id              reduce using rule 72 (Term -> id diveq Factor .)
    gid             reduce using rule 72 (Term -> id diveq Factor .)
    return          reduce using rule 72 (Term -> id diveq Factor .)
    print           reduce using rule 72 (Term -> id diveq Factor .)
    println         reduce using rule 72 (Term -> id diveq Factor .)
    prints          reduce using rule 72 (Term -> id diveq Factor .)
    for             reduce using rule 72 (Term -> id diveq Factor .)
    while           reduce using rule 72 (Term -> id diveq Factor .)
    read            reduce using rule 72 (Term -> id diveq Factor .)
    if              reduce using rule 72 (Term -> id diveq Factor .)
    repeat          reduce using rule 72 (Term -> id diveq Factor .)
    num             reduce using rule 72 (Term -> id diveq Factor .)
    (               reduce using rule 72 (Term -> id diveq Factor .)
    )               reduce using rule 72 (Term -> id diveq Factor .)
    sup             reduce using rule 72 (Term -> id diveq Factor .)
    inf             reduce using rule 72 (Term -> id diveq Factor .)
    supeq           reduce using rule 72 (Term -> id diveq Factor .)
    infeq           reduce using rule 72 (Term -> id diveq Factor .)
    eq              reduce using rule 72 (Term -> id diveq Factor .)
    diff            reduce using rule 72 (Term -> id diveq Factor .)
    ;               reduce using rule 72 (Term -> id diveq Factor .)
    ]               reduce using rule 72 (Term -> id diveq Factor .)
    and             reduce using rule 72 (Term -> id diveq Factor .)
    or              reduce using rule 72 (Term -> id diveq Factor .)


state 125

    (73) Term -> id modeq Factor .

    *               reduce using rule 73 (Term -> id modeq Factor .)
    /               reduce using rule 73 (Term -> id modeq Factor .)
    %               reduce using rule 73 (Term -> id modeq Factor .)
    +               reduce using rule 73 (Term -> id modeq Factor .)
    -               reduce using rule 73 (Term -> id modeq Factor .)
    }               reduce using rule 73 (Term -> id modeq Factor .)
    id              reduce using rule 73 (Term -> id modeq Factor .)
    gid             reduce using rule 73 (Term -> id modeq Factor .)
    return          reduce using rule 73 (Term -> id modeq Factor .)
    print           reduce using rule 73 (Term -> id modeq Factor .)
    println         reduce using rule 73 (Term -> id modeq Factor .)
    prints          reduce using rule 73 (Term -> id modeq Factor .)
    for             reduce using rule 73 (Term -> id modeq Factor .)
    while           reduce using rule 73 (Term -> id modeq Factor .)
    read            reduce using rule 73 (Term -> id modeq Factor .)
    if              reduce using rule 73 (Term -> id modeq Factor .)
    repeat          reduce using rule 73 (Term -> id modeq Factor .)
    num             reduce using rule 73 (Term -> id modeq Factor .)
    (               reduce using rule 73 (Term -> id modeq Factor .)
    )               reduce using rule 73 (Term -> id modeq Factor .)
    sup             reduce using rule 73 (Term -> id modeq Factor .)
    inf             reduce using rule 73 (Term -> id modeq Factor .)
    supeq           reduce using rule 73 (Term -> id modeq Factor .)
    infeq           reduce using rule 73 (Term -> id modeq Factor .)
    eq              reduce using rule 73 (Term -> id modeq Factor .)
    diff            reduce using rule 73 (Term -> id modeq Factor .)
    ;               reduce using rule 73 (Term -> id modeq Factor .)
    ]               reduce using rule 73 (Term -> id modeq Factor .)
    and             reduce using rule 73 (Term -> id modeq Factor .)
    or              reduce using rule 73 (Term -> id modeq Factor .)


state 126

    (74) Term -> id muleql Factor .

    *               reduce using rule 74 (Term -> id muleql Factor .)
    /               reduce using rule 74 (Term -> id muleql Factor .)
    %               reduce using rule 74 (Term -> id muleql Factor .)
    +               reduce using rule 74 (Term -> id muleql Factor .)
    -               reduce using rule 74 (Term -> id muleql Factor .)
    }               reduce using rule 74 (Term -> id muleql Factor .)
    id              reduce using rule 74 (Term -> id muleql Factor .)
    gid             reduce using rule 74 (Term -> id muleql Factor .)
    return          reduce using rule 74 (Term -> id muleql Factor .)
    print           reduce using rule 74 (Term -> id muleql Factor .)
    println         reduce using rule 74 (Term -> id muleql Factor .)
    prints          reduce using rule 74 (Term -> id muleql Factor .)
    for             reduce using rule 74 (Term -> id muleql Factor .)
    while           reduce using rule 74 (Term -> id muleql Factor .)
    read            reduce using rule 74 (Term -> id muleql Factor .)
    if              reduce using rule 74 (Term -> id muleql Factor .)
    repeat          reduce using rule 74 (Term -> id muleql Factor .)
    num             reduce using rule 74 (Term -> id muleql Factor .)
    (               reduce using rule 74 (Term -> id muleql Factor .)
    )               reduce using rule 74 (Term -> id muleql Factor .)
    sup             reduce using rule 74 (Term -> id muleql Factor .)
    inf             reduce using rule 74 (Term -> id muleql Factor .)
    supeq           reduce using rule 74 (Term -> id muleql Factor .)
    infeq           reduce using rule 74 (Term -> id muleql Factor .)
    eq              reduce using rule 74 (Term -> id muleql Factor .)
    diff            reduce using rule 74 (Term -> id muleql Factor .)
    ;               reduce using rule 74 (Term -> id muleql Factor .)
    ]               reduce using rule 74 (Term -> id muleql Factor .)
    and             reduce using rule 74 (Term -> id muleql Factor .)
    or              reduce using rule 74 (Term -> id muleql Factor .)


state 127

    (75) Term -> id diveql Factor .

    *               reduce using rule 75 (Term -> id diveql Factor .)
    /               reduce using rule 75 (Term -> id diveql Factor .)
    %               reduce using rule 75 (Term -> id diveql Factor .)
    +               reduce using rule 75 (Term -> id diveql Factor .)
    -               reduce using rule 75 (Term -> id diveql Factor .)
    }               reduce using rule 75 (Term -> id diveql Factor .)
    id              reduce using rule 75 (Term -> id diveql Factor .)
    gid             reduce using rule 75 (Term -> id diveql Factor .)
    return          reduce using rule 75 (Term -> id diveql Factor .)
    print           reduce using rule 75 (Term -> id diveql Factor .)
    println         reduce using rule 75 (Term -> id diveql Factor .)
    prints          reduce using rule 75 (Term -> id diveql Factor .)
    for             reduce using rule 75 (Term -> id diveql Factor .)
    while           reduce using rule 75 (Term -> id diveql Factor .)
    read            reduce using rule 75 (Term -> id diveql Factor .)
    if              reduce using rule 75 (Term -> id diveql Factor .)
    repeat          reduce using rule 75 (Term -> id diveql Factor .)
    num             reduce using rule 75 (Term -> id diveql Factor .)
    (               reduce using rule 75 (Term -> id diveql Factor .)
    )               reduce using rule 75 (Term -> id diveql Factor .)
    sup             reduce using rule 75 (Term -> id diveql Factor .)
    inf             reduce using rule 75 (Term -> id diveql Factor .)
    supeq           reduce using rule 75 (Term -> id diveql Factor .)
    infeq           reduce using rule 75 (Term -> id diveql Factor .)
    eq              reduce using rule 75 (Term -> id diveql Factor .)
    diff            reduce using rule 75 (Term -> id diveql Factor .)
    ;               reduce using rule 75 (Term -> id diveql Factor .)
    ]               reduce using rule 75 (Term -> id diveql Factor .)
    and             reduce using rule 75 (Term -> id diveql Factor .)
    or              reduce using rule 75 (Term -> id diveql Factor .)


state 128

    (76) Term -> id modeql Factor .

    *               reduce using rule 76 (Term -> id modeql Factor .)
    /               reduce using rule 76 (Term -> id modeql Factor .)
    %               reduce using rule 76 (Term -> id modeql Factor .)
    +               reduce using rule 76 (Term -> id modeql Factor .)
    -               reduce using rule 76 (Term -> id modeql Factor .)
    }               reduce using rule 76 (Term -> id modeql Factor .)
    id              reduce using rule 76 (Term -> id modeql Factor .)
    gid             reduce using rule 76 (Term -> id modeql Factor .)
    return          reduce using rule 76 (Term -> id modeql Factor .)
    print           reduce using rule 76 (Term -> id modeql Factor .)
    println         reduce using rule 76 (Term -> id modeql Factor .)
    prints          reduce using rule 76 (Term -> id modeql Factor .)
    for             reduce using rule 76 (Term -> id modeql Factor .)
    while           reduce using rule 76 (Term -> id modeql Factor .)
    read            reduce using rule 76 (Term -> id modeql Factor .)
    if              reduce using rule 76 (Term -> id modeql Factor .)
    repeat          reduce using rule 76 (Term -> id modeql Factor .)
    num             reduce using rule 76 (Term -> id modeql Factor .)
    (               reduce using rule 76 (Term -> id modeql Factor .)
    )               reduce using rule 76 (Term -> id modeql Factor .)
    sup             reduce using rule 76 (Term -> id modeql Factor .)
    inf             reduce using rule 76 (Term -> id modeql Factor .)
    supeq           reduce using rule 76 (Term -> id modeql Factor .)
    infeq           reduce using rule 76 (Term -> id modeql Factor .)
    eq              reduce using rule 76 (Term -> id modeql Factor .)
    diff            reduce using rule 76 (Term -> id modeql Factor .)
    ;               reduce using rule 76 (Term -> id modeql Factor .)
    ]               reduce using rule 76 (Term -> id modeql Factor .)
    and             reduce using rule 76 (Term -> id modeql Factor .)
    or              reduce using rule 76 (Term -> id modeql Factor .)


state 129

    (95) Factor -> id ( ) .

    *               reduce using rule 95 (Factor -> id ( ) .)
    /               reduce using rule 95 (Factor -> id ( ) .)
    %               reduce using rule 95 (Factor -> id ( ) .)
    +               reduce using rule 95 (Factor -> id ( ) .)
    -               reduce using rule 95 (Factor -> id ( ) .)
    }               reduce using rule 95 (Factor -> id ( ) .)
    id              reduce using rule 95 (Factor -> id ( ) .)
    gid             reduce using rule 95 (Factor -> id ( ) .)
    return          reduce using rule 95 (Factor -> id ( ) .)
    print           reduce using rule 95 (Factor -> id ( ) .)
    println         reduce using rule 95 (Factor -> id ( ) .)
    prints          reduce using rule 95 (Factor -> id ( ) .)
    for             reduce using rule 95 (Factor -> id ( ) .)
    while           reduce using rule 95 (Factor -> id ( ) .)
    read            reduce using rule 95 (Factor -> id ( ) .)
    if              reduce using rule 95 (Factor -> id ( ) .)
    repeat          reduce using rule 95 (Factor -> id ( ) .)
    num             reduce using rule 95 (Factor -> id ( ) .)
    (               reduce using rule 95 (Factor -> id ( ) .)
    )               reduce using rule 95 (Factor -> id ( ) .)
    sup             reduce using rule 95 (Factor -> id ( ) .)
    inf             reduce using rule 95 (Factor -> id ( ) .)
    supeq           reduce using rule 95 (Factor -> id ( ) .)
    infeq           reduce using rule 95 (Factor -> id ( ) .)
    eq              reduce using rule 95 (Factor -> id ( ) .)
    diff            reduce using rule 95 (Factor -> id ( ) .)
    ;               reduce using rule 95 (Factor -> id ( ) .)
    ]               reduce using rule 95 (Factor -> id ( ) .)
    and             reduce using rule 95 (Factor -> id ( ) .)
    or              reduce using rule 95 (Factor -> id ( ) .)


state 130

    (50) Attr -> gid = Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    }               reduce using rule 50 (Attr -> gid = Exp .)
    id              reduce using rule 50 (Attr -> gid = Exp .)
    gid             reduce using rule 50 (Attr -> gid = Exp .)
    return          reduce using rule 50 (Attr -> gid = Exp .)
    print           reduce using rule 50 (Attr -> gid = Exp .)
    println         reduce using rule 50 (Attr -> gid = Exp .)
    prints          reduce using rule 50 (Attr -> gid = Exp .)
    for             reduce using rule 50 (Attr -> gid = Exp .)
    while           reduce using rule 50 (Attr -> gid = Exp .)
    read            reduce using rule 50 (Attr -> gid = Exp .)
    if              reduce using rule 50 (Attr -> gid = Exp .)
    repeat          reduce using rule 50 (Attr -> gid = Exp .)
    num             reduce using rule 50 (Attr -> gid = Exp .)
    (               reduce using rule 50 (Attr -> gid = Exp .)
    ;               reduce using rule 50 (Attr -> gid = Exp .)
    )               reduce using rule 50 (Attr -> gid = Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 131

    (51) Attr -> gid [ Exp . ] = Exp
    (52) Attr -> gid [ Exp . ] [ Exp ] = Exp
    (99) Factor -> gid [ Exp . ]
    (100) Factor -> gid [ Exp . ] [ Exp ]
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    ]               shift and go to state 173
    +               shift and go to state 55
    -               shift and go to state 56


state 132

    (63) Exp -> gid addeq Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 63 (Exp -> gid addeq Term .)
    -               reduce using rule 63 (Exp -> gid addeq Term .)
    }               reduce using rule 63 (Exp -> gid addeq Term .)
    id              reduce using rule 63 (Exp -> gid addeq Term .)
    gid             reduce using rule 63 (Exp -> gid addeq Term .)
    return          reduce using rule 63 (Exp -> gid addeq Term .)
    print           reduce using rule 63 (Exp -> gid addeq Term .)
    println         reduce using rule 63 (Exp -> gid addeq Term .)
    prints          reduce using rule 63 (Exp -> gid addeq Term .)
    for             reduce using rule 63 (Exp -> gid addeq Term .)
    while           reduce using rule 63 (Exp -> gid addeq Term .)
    read            reduce using rule 63 (Exp -> gid addeq Term .)
    if              reduce using rule 63 (Exp -> gid addeq Term .)
    repeat          reduce using rule 63 (Exp -> gid addeq Term .)
    num             reduce using rule 63 (Exp -> gid addeq Term .)
    (               reduce using rule 63 (Exp -> gid addeq Term .)
    )               reduce using rule 63 (Exp -> gid addeq Term .)
    sup             reduce using rule 63 (Exp -> gid addeq Term .)
    inf             reduce using rule 63 (Exp -> gid addeq Term .)
    supeq           reduce using rule 63 (Exp -> gid addeq Term .)
    infeq           reduce using rule 63 (Exp -> gid addeq Term .)
    eq              reduce using rule 63 (Exp -> gid addeq Term .)
    diff            reduce using rule 63 (Exp -> gid addeq Term .)
    ;               reduce using rule 63 (Exp -> gid addeq Term .)
    ]               reduce using rule 63 (Exp -> gid addeq Term .)
    and             reduce using rule 63 (Exp -> gid addeq Term .)
    or              reduce using rule 63 (Exp -> gid addeq Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 133

    (64) Exp -> gid subeq Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 64 (Exp -> gid subeq Term .)
    -               reduce using rule 64 (Exp -> gid subeq Term .)
    }               reduce using rule 64 (Exp -> gid subeq Term .)
    id              reduce using rule 64 (Exp -> gid subeq Term .)
    gid             reduce using rule 64 (Exp -> gid subeq Term .)
    return          reduce using rule 64 (Exp -> gid subeq Term .)
    print           reduce using rule 64 (Exp -> gid subeq Term .)
    println         reduce using rule 64 (Exp -> gid subeq Term .)
    prints          reduce using rule 64 (Exp -> gid subeq Term .)
    for             reduce using rule 64 (Exp -> gid subeq Term .)
    while           reduce using rule 64 (Exp -> gid subeq Term .)
    read            reduce using rule 64 (Exp -> gid subeq Term .)
    if              reduce using rule 64 (Exp -> gid subeq Term .)
    repeat          reduce using rule 64 (Exp -> gid subeq Term .)
    num             reduce using rule 64 (Exp -> gid subeq Term .)
    (               reduce using rule 64 (Exp -> gid subeq Term .)
    )               reduce using rule 64 (Exp -> gid subeq Term .)
    sup             reduce using rule 64 (Exp -> gid subeq Term .)
    inf             reduce using rule 64 (Exp -> gid subeq Term .)
    supeq           reduce using rule 64 (Exp -> gid subeq Term .)
    infeq           reduce using rule 64 (Exp -> gid subeq Term .)
    eq              reduce using rule 64 (Exp -> gid subeq Term .)
    diff            reduce using rule 64 (Exp -> gid subeq Term .)
    ;               reduce using rule 64 (Exp -> gid subeq Term .)
    ]               reduce using rule 64 (Exp -> gid subeq Term .)
    and             reduce using rule 64 (Exp -> gid subeq Term .)
    or              reduce using rule 64 (Exp -> gid subeq Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 134

    (65) Exp -> gid addeql Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 65 (Exp -> gid addeql Term .)
    -               reduce using rule 65 (Exp -> gid addeql Term .)
    }               reduce using rule 65 (Exp -> gid addeql Term .)
    id              reduce using rule 65 (Exp -> gid addeql Term .)
    gid             reduce using rule 65 (Exp -> gid addeql Term .)
    return          reduce using rule 65 (Exp -> gid addeql Term .)
    print           reduce using rule 65 (Exp -> gid addeql Term .)
    println         reduce using rule 65 (Exp -> gid addeql Term .)
    prints          reduce using rule 65 (Exp -> gid addeql Term .)
    for             reduce using rule 65 (Exp -> gid addeql Term .)
    while           reduce using rule 65 (Exp -> gid addeql Term .)
    read            reduce using rule 65 (Exp -> gid addeql Term .)
    if              reduce using rule 65 (Exp -> gid addeql Term .)
    repeat          reduce using rule 65 (Exp -> gid addeql Term .)
    num             reduce using rule 65 (Exp -> gid addeql Term .)
    (               reduce using rule 65 (Exp -> gid addeql Term .)
    )               reduce using rule 65 (Exp -> gid addeql Term .)
    sup             reduce using rule 65 (Exp -> gid addeql Term .)
    inf             reduce using rule 65 (Exp -> gid addeql Term .)
    supeq           reduce using rule 65 (Exp -> gid addeql Term .)
    infeq           reduce using rule 65 (Exp -> gid addeql Term .)
    eq              reduce using rule 65 (Exp -> gid addeql Term .)
    diff            reduce using rule 65 (Exp -> gid addeql Term .)
    ;               reduce using rule 65 (Exp -> gid addeql Term .)
    ]               reduce using rule 65 (Exp -> gid addeql Term .)
    and             reduce using rule 65 (Exp -> gid addeql Term .)
    or              reduce using rule 65 (Exp -> gid addeql Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 135

    (66) Exp -> gid subeql Term .
    (68) Term -> Term . * Factor
    (69) Term -> Term . / Factor
    (70) Term -> Term . % Factor

    +               reduce using rule 66 (Exp -> gid subeql Term .)
    -               reduce using rule 66 (Exp -> gid subeql Term .)
    }               reduce using rule 66 (Exp -> gid subeql Term .)
    id              reduce using rule 66 (Exp -> gid subeql Term .)
    gid             reduce using rule 66 (Exp -> gid subeql Term .)
    return          reduce using rule 66 (Exp -> gid subeql Term .)
    print           reduce using rule 66 (Exp -> gid subeql Term .)
    println         reduce using rule 66 (Exp -> gid subeql Term .)
    prints          reduce using rule 66 (Exp -> gid subeql Term .)
    for             reduce using rule 66 (Exp -> gid subeql Term .)
    while           reduce using rule 66 (Exp -> gid subeql Term .)
    read            reduce using rule 66 (Exp -> gid subeql Term .)
    if              reduce using rule 66 (Exp -> gid subeql Term .)
    repeat          reduce using rule 66 (Exp -> gid subeql Term .)
    num             reduce using rule 66 (Exp -> gid subeql Term .)
    (               reduce using rule 66 (Exp -> gid subeql Term .)
    )               reduce using rule 66 (Exp -> gid subeql Term .)
    sup             reduce using rule 66 (Exp -> gid subeql Term .)
    inf             reduce using rule 66 (Exp -> gid subeql Term .)
    supeq           reduce using rule 66 (Exp -> gid subeql Term .)
    infeq           reduce using rule 66 (Exp -> gid subeql Term .)
    eq              reduce using rule 66 (Exp -> gid subeql Term .)
    diff            reduce using rule 66 (Exp -> gid subeql Term .)
    ;               reduce using rule 66 (Exp -> gid subeql Term .)
    ]               reduce using rule 66 (Exp -> gid subeql Term .)
    and             reduce using rule 66 (Exp -> gid subeql Term .)
    or              reduce using rule 66 (Exp -> gid subeql Term .)
    *               shift and go to state 97
    /               shift and go to state 98
    %               shift and go to state 99


state 136

    (77) Term -> gid muleq Factor .

    *               reduce using rule 77 (Term -> gid muleq Factor .)
    /               reduce using rule 77 (Term -> gid muleq Factor .)
    %               reduce using rule 77 (Term -> gid muleq Factor .)
    +               reduce using rule 77 (Term -> gid muleq Factor .)
    -               reduce using rule 77 (Term -> gid muleq Factor .)
    }               reduce using rule 77 (Term -> gid muleq Factor .)
    id              reduce using rule 77 (Term -> gid muleq Factor .)
    gid             reduce using rule 77 (Term -> gid muleq Factor .)
    return          reduce using rule 77 (Term -> gid muleq Factor .)
    print           reduce using rule 77 (Term -> gid muleq Factor .)
    println         reduce using rule 77 (Term -> gid muleq Factor .)
    prints          reduce using rule 77 (Term -> gid muleq Factor .)
    for             reduce using rule 77 (Term -> gid muleq Factor .)
    while           reduce using rule 77 (Term -> gid muleq Factor .)
    read            reduce using rule 77 (Term -> gid muleq Factor .)
    if              reduce using rule 77 (Term -> gid muleq Factor .)
    repeat          reduce using rule 77 (Term -> gid muleq Factor .)
    num             reduce using rule 77 (Term -> gid muleq Factor .)
    (               reduce using rule 77 (Term -> gid muleq Factor .)
    )               reduce using rule 77 (Term -> gid muleq Factor .)
    sup             reduce using rule 77 (Term -> gid muleq Factor .)
    inf             reduce using rule 77 (Term -> gid muleq Factor .)
    supeq           reduce using rule 77 (Term -> gid muleq Factor .)
    infeq           reduce using rule 77 (Term -> gid muleq Factor .)
    eq              reduce using rule 77 (Term -> gid muleq Factor .)
    diff            reduce using rule 77 (Term -> gid muleq Factor .)
    ;               reduce using rule 77 (Term -> gid muleq Factor .)
    ]               reduce using rule 77 (Term -> gid muleq Factor .)
    and             reduce using rule 77 (Term -> gid muleq Factor .)
    or              reduce using rule 77 (Term -> gid muleq Factor .)


state 137

    (78) Term -> gid diveq Factor .

    *               reduce using rule 78 (Term -> gid diveq Factor .)
    /               reduce using rule 78 (Term -> gid diveq Factor .)
    %               reduce using rule 78 (Term -> gid diveq Factor .)
    +               reduce using rule 78 (Term -> gid diveq Factor .)
    -               reduce using rule 78 (Term -> gid diveq Factor .)
    }               reduce using rule 78 (Term -> gid diveq Factor .)
    id              reduce using rule 78 (Term -> gid diveq Factor .)
    gid             reduce using rule 78 (Term -> gid diveq Factor .)
    return          reduce using rule 78 (Term -> gid diveq Factor .)
    print           reduce using rule 78 (Term -> gid diveq Factor .)
    println         reduce using rule 78 (Term -> gid diveq Factor .)
    prints          reduce using rule 78 (Term -> gid diveq Factor .)
    for             reduce using rule 78 (Term -> gid diveq Factor .)
    while           reduce using rule 78 (Term -> gid diveq Factor .)
    read            reduce using rule 78 (Term -> gid diveq Factor .)
    if              reduce using rule 78 (Term -> gid diveq Factor .)
    repeat          reduce using rule 78 (Term -> gid diveq Factor .)
    num             reduce using rule 78 (Term -> gid diveq Factor .)
    (               reduce using rule 78 (Term -> gid diveq Factor .)
    )               reduce using rule 78 (Term -> gid diveq Factor .)
    sup             reduce using rule 78 (Term -> gid diveq Factor .)
    inf             reduce using rule 78 (Term -> gid diveq Factor .)
    supeq           reduce using rule 78 (Term -> gid diveq Factor .)
    infeq           reduce using rule 78 (Term -> gid diveq Factor .)
    eq              reduce using rule 78 (Term -> gid diveq Factor .)
    diff            reduce using rule 78 (Term -> gid diveq Factor .)
    ;               reduce using rule 78 (Term -> gid diveq Factor .)
    ]               reduce using rule 78 (Term -> gid diveq Factor .)
    and             reduce using rule 78 (Term -> gid diveq Factor .)
    or              reduce using rule 78 (Term -> gid diveq Factor .)


state 138

    (79) Term -> gid modeq Factor .

    *               reduce using rule 79 (Term -> gid modeq Factor .)
    /               reduce using rule 79 (Term -> gid modeq Factor .)
    %               reduce using rule 79 (Term -> gid modeq Factor .)
    +               reduce using rule 79 (Term -> gid modeq Factor .)
    -               reduce using rule 79 (Term -> gid modeq Factor .)
    }               reduce using rule 79 (Term -> gid modeq Factor .)
    id              reduce using rule 79 (Term -> gid modeq Factor .)
    gid             reduce using rule 79 (Term -> gid modeq Factor .)
    return          reduce using rule 79 (Term -> gid modeq Factor .)
    print           reduce using rule 79 (Term -> gid modeq Factor .)
    println         reduce using rule 79 (Term -> gid modeq Factor .)
    prints          reduce using rule 79 (Term -> gid modeq Factor .)
    for             reduce using rule 79 (Term -> gid modeq Factor .)
    while           reduce using rule 79 (Term -> gid modeq Factor .)
    read            reduce using rule 79 (Term -> gid modeq Factor .)
    if              reduce using rule 79 (Term -> gid modeq Factor .)
    repeat          reduce using rule 79 (Term -> gid modeq Factor .)
    num             reduce using rule 79 (Term -> gid modeq Factor .)
    (               reduce using rule 79 (Term -> gid modeq Factor .)
    )               reduce using rule 79 (Term -> gid modeq Factor .)
    sup             reduce using rule 79 (Term -> gid modeq Factor .)
    inf             reduce using rule 79 (Term -> gid modeq Factor .)
    supeq           reduce using rule 79 (Term -> gid modeq Factor .)
    infeq           reduce using rule 79 (Term -> gid modeq Factor .)
    eq              reduce using rule 79 (Term -> gid modeq Factor .)
    diff            reduce using rule 79 (Term -> gid modeq Factor .)
    ;               reduce using rule 79 (Term -> gid modeq Factor .)
    ]               reduce using rule 79 (Term -> gid modeq Factor .)
    and             reduce using rule 79 (Term -> gid modeq Factor .)
    or              reduce using rule 79 (Term -> gid modeq Factor .)


state 139

    (80) Term -> gid muleql Factor .

    *               reduce using rule 80 (Term -> gid muleql Factor .)
    /               reduce using rule 80 (Term -> gid muleql Factor .)
    %               reduce using rule 80 (Term -> gid muleql Factor .)
    +               reduce using rule 80 (Term -> gid muleql Factor .)
    -               reduce using rule 80 (Term -> gid muleql Factor .)
    }               reduce using rule 80 (Term -> gid muleql Factor .)
    id              reduce using rule 80 (Term -> gid muleql Factor .)
    gid             reduce using rule 80 (Term -> gid muleql Factor .)
    return          reduce using rule 80 (Term -> gid muleql Factor .)
    print           reduce using rule 80 (Term -> gid muleql Factor .)
    println         reduce using rule 80 (Term -> gid muleql Factor .)
    prints          reduce using rule 80 (Term -> gid muleql Factor .)
    for             reduce using rule 80 (Term -> gid muleql Factor .)
    while           reduce using rule 80 (Term -> gid muleql Factor .)
    read            reduce using rule 80 (Term -> gid muleql Factor .)
    if              reduce using rule 80 (Term -> gid muleql Factor .)
    repeat          reduce using rule 80 (Term -> gid muleql Factor .)
    num             reduce using rule 80 (Term -> gid muleql Factor .)
    (               reduce using rule 80 (Term -> gid muleql Factor .)
    )               reduce using rule 80 (Term -> gid muleql Factor .)
    sup             reduce using rule 80 (Term -> gid muleql Factor .)
    inf             reduce using rule 80 (Term -> gid muleql Factor .)
    supeq           reduce using rule 80 (Term -> gid muleql Factor .)
    infeq           reduce using rule 80 (Term -> gid muleql Factor .)
    eq              reduce using rule 80 (Term -> gid muleql Factor .)
    diff            reduce using rule 80 (Term -> gid muleql Factor .)
    ;               reduce using rule 80 (Term -> gid muleql Factor .)
    ]               reduce using rule 80 (Term -> gid muleql Factor .)
    and             reduce using rule 80 (Term -> gid muleql Factor .)
    or              reduce using rule 80 (Term -> gid muleql Factor .)


state 140

    (81) Term -> gid diveql Factor .

    *               reduce using rule 81 (Term -> gid diveql Factor .)
    /               reduce using rule 81 (Term -> gid diveql Factor .)
    %               reduce using rule 81 (Term -> gid diveql Factor .)
    +               reduce using rule 81 (Term -> gid diveql Factor .)
    -               reduce using rule 81 (Term -> gid diveql Factor .)
    }               reduce using rule 81 (Term -> gid diveql Factor .)
    id              reduce using rule 81 (Term -> gid diveql Factor .)
    gid             reduce using rule 81 (Term -> gid diveql Factor .)
    return          reduce using rule 81 (Term -> gid diveql Factor .)
    print           reduce using rule 81 (Term -> gid diveql Factor .)
    println         reduce using rule 81 (Term -> gid diveql Factor .)
    prints          reduce using rule 81 (Term -> gid diveql Factor .)
    for             reduce using rule 81 (Term -> gid diveql Factor .)
    while           reduce using rule 81 (Term -> gid diveql Factor .)
    read            reduce using rule 81 (Term -> gid diveql Factor .)
    if              reduce using rule 81 (Term -> gid diveql Factor .)
    repeat          reduce using rule 81 (Term -> gid diveql Factor .)
    num             reduce using rule 81 (Term -> gid diveql Factor .)
    (               reduce using rule 81 (Term -> gid diveql Factor .)
    )               reduce using rule 81 (Term -> gid diveql Factor .)
    sup             reduce using rule 81 (Term -> gid diveql Factor .)
    inf             reduce using rule 81 (Term -> gid diveql Factor .)
    supeq           reduce using rule 81 (Term -> gid diveql Factor .)
    infeq           reduce using rule 81 (Term -> gid diveql Factor .)
    eq              reduce using rule 81 (Term -> gid diveql Factor .)
    diff            reduce using rule 81 (Term -> gid diveql Factor .)
    ;               reduce using rule 81 (Term -> gid diveql Factor .)
    ]               reduce using rule 81 (Term -> gid diveql Factor .)
    and             reduce using rule 81 (Term -> gid diveql Factor .)
    or              reduce using rule 81 (Term -> gid diveql Factor .)


state 141

    (82) Term -> gid modeql Factor .

    *               reduce using rule 82 (Term -> gid modeql Factor .)
    /               reduce using rule 82 (Term -> gid modeql Factor .)
    %               reduce using rule 82 (Term -> gid modeql Factor .)
    +               reduce using rule 82 (Term -> gid modeql Factor .)
    -               reduce using rule 82 (Term -> gid modeql Factor .)
    }               reduce using rule 82 (Term -> gid modeql Factor .)
    id              reduce using rule 82 (Term -> gid modeql Factor .)
    gid             reduce using rule 82 (Term -> gid modeql Factor .)
    return          reduce using rule 82 (Term -> gid modeql Factor .)
    print           reduce using rule 82 (Term -> gid modeql Factor .)
    println         reduce using rule 82 (Term -> gid modeql Factor .)
    prints          reduce using rule 82 (Term -> gid modeql Factor .)
    for             reduce using rule 82 (Term -> gid modeql Factor .)
    while           reduce using rule 82 (Term -> gid modeql Factor .)
    read            reduce using rule 82 (Term -> gid modeql Factor .)
    if              reduce using rule 82 (Term -> gid modeql Factor .)
    repeat          reduce using rule 82 (Term -> gid modeql Factor .)
    num             reduce using rule 82 (Term -> gid modeql Factor .)
    (               reduce using rule 82 (Term -> gid modeql Factor .)
    )               reduce using rule 82 (Term -> gid modeql Factor .)
    sup             reduce using rule 82 (Term -> gid modeql Factor .)
    inf             reduce using rule 82 (Term -> gid modeql Factor .)
    supeq           reduce using rule 82 (Term -> gid modeql Factor .)
    infeq           reduce using rule 82 (Term -> gid modeql Factor .)
    eq              reduce using rule 82 (Term -> gid modeql Factor .)
    diff            reduce using rule 82 (Term -> gid modeql Factor .)
    ;               reduce using rule 82 (Term -> gid modeql Factor .)
    ]               reduce using rule 82 (Term -> gid modeql Factor .)
    and             reduce using rule 82 (Term -> gid modeql Factor .)
    or              reduce using rule 82 (Term -> gid modeql Factor .)


state 142

    (53) Return -> return ( Exp . )
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               shift and go to state 174
    +               shift and go to state 55
    -               shift and go to state 56


state 143

    (104) Cond -> ( Cond . and Cond )
    (105) Cond -> ( Cond . or Cond )
    (96) Factor -> ( Cond . )
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

    and             shift and go to state 175
    or              shift and go to state 176
    )               shift and go to state 144


state 144

    (96) Factor -> ( Cond ) .

    *               reduce using rule 96 (Factor -> ( Cond ) .)
    /               reduce using rule 96 (Factor -> ( Cond ) .)
    %               reduce using rule 96 (Factor -> ( Cond ) .)
    +               reduce using rule 96 (Factor -> ( Cond ) .)
    -               reduce using rule 96 (Factor -> ( Cond ) .)
    }               reduce using rule 96 (Factor -> ( Cond ) .)
    id              reduce using rule 96 (Factor -> ( Cond ) .)
    gid             reduce using rule 96 (Factor -> ( Cond ) .)
    return          reduce using rule 96 (Factor -> ( Cond ) .)
    print           reduce using rule 96 (Factor -> ( Cond ) .)
    println         reduce using rule 96 (Factor -> ( Cond ) .)
    prints          reduce using rule 96 (Factor -> ( Cond ) .)
    for             reduce using rule 96 (Factor -> ( Cond ) .)
    while           reduce using rule 96 (Factor -> ( Cond ) .)
    read            reduce using rule 96 (Factor -> ( Cond ) .)
    if              reduce using rule 96 (Factor -> ( Cond ) .)
    repeat          reduce using rule 96 (Factor -> ( Cond ) .)
    num             reduce using rule 96 (Factor -> ( Cond ) .)
    (               reduce using rule 96 (Factor -> ( Cond ) .)
    )               reduce using rule 96 (Factor -> ( Cond ) .)
    sup             reduce using rule 96 (Factor -> ( Cond ) .)
    inf             reduce using rule 96 (Factor -> ( Cond ) .)
    supeq           reduce using rule 96 (Factor -> ( Cond ) .)
    infeq           reduce using rule 96 (Factor -> ( Cond ) .)
    eq              reduce using rule 96 (Factor -> ( Cond ) .)
    diff            reduce using rule 96 (Factor -> ( Cond ) .)
    ;               reduce using rule 96 (Factor -> ( Cond ) .)
    ]               reduce using rule 96 (Factor -> ( Cond ) .)
    and             reduce using rule 96 (Factor -> ( Cond ) .)
    or              reduce using rule 96 (Factor -> ( Cond ) .)


state 145

    (102) Cond -> Cond and . Cond
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 177
    Exp                            shift and go to state 166
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 146

    (103) Cond -> Cond or . Cond
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 178
    Exp                            shift and go to state 166
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 147

    (101) Factor -> ( Exp ) .

    *               reduce using rule 101 (Factor -> ( Exp ) .)
    /               reduce using rule 101 (Factor -> ( Exp ) .)
    %               reduce using rule 101 (Factor -> ( Exp ) .)
    +               reduce using rule 101 (Factor -> ( Exp ) .)
    -               reduce using rule 101 (Factor -> ( Exp ) .)
    }               reduce using rule 101 (Factor -> ( Exp ) .)
    id              reduce using rule 101 (Factor -> ( Exp ) .)
    gid             reduce using rule 101 (Factor -> ( Exp ) .)
    return          reduce using rule 101 (Factor -> ( Exp ) .)
    print           reduce using rule 101 (Factor -> ( Exp ) .)
    println         reduce using rule 101 (Factor -> ( Exp ) .)
    prints          reduce using rule 101 (Factor -> ( Exp ) .)
    for             reduce using rule 101 (Factor -> ( Exp ) .)
    while           reduce using rule 101 (Factor -> ( Exp ) .)
    read            reduce using rule 101 (Factor -> ( Exp ) .)
    if              reduce using rule 101 (Factor -> ( Exp ) .)
    repeat          reduce using rule 101 (Factor -> ( Exp ) .)
    num             reduce using rule 101 (Factor -> ( Exp ) .)
    (               reduce using rule 101 (Factor -> ( Exp ) .)
    )               reduce using rule 101 (Factor -> ( Exp ) .)
    sup             reduce using rule 101 (Factor -> ( Exp ) .)
    inf             reduce using rule 101 (Factor -> ( Exp ) .)
    supeq           reduce using rule 101 (Factor -> ( Exp ) .)
    infeq           reduce using rule 101 (Factor -> ( Exp ) .)
    eq              reduce using rule 101 (Factor -> ( Exp ) .)
    diff            reduce using rule 101 (Factor -> ( Exp ) .)
    ;               reduce using rule 101 (Factor -> ( Exp ) .)
    ]               reduce using rule 101 (Factor -> ( Exp ) .)
    and             reduce using rule 101 (Factor -> ( Exp ) .)
    or              reduce using rule 101 (Factor -> ( Exp ) .)


state 148

    (106) Cond -> Exp sup . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 179
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 149

    (107) Cond -> Exp inf . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 180
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 150

    (108) Cond -> Exp supeq . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 181
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 151

    (109) Cond -> Exp infeq . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 182
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 152

    (111) Cond -> Exp eq . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 183
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 153

    (112) Cond -> Exp diff . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 184
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 154

    (110) Cond -> not Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               reduce using rule 110 (Cond -> not Exp .)
    and             reduce using rule 110 (Cond -> not Exp .)
    or              reduce using rule 110 (Cond -> not Exp .)
    ;               reduce using rule 110 (Cond -> not Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 155

    (97) Factor -> id [ . Exp ]
    (98) Factor -> id [ . Exp ] [ Exp ]
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 185
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 156

    (99) Factor -> gid [ . Exp ]
    (100) Factor -> gid [ . Exp ] [ Exp ]
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 186
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 157

    (68) Term -> Term * Factor .

    *               reduce using rule 68 (Term -> Term * Factor .)
    /               reduce using rule 68 (Term -> Term * Factor .)
    %               reduce using rule 68 (Term -> Term * Factor .)
    +               reduce using rule 68 (Term -> Term * Factor .)
    -               reduce using rule 68 (Term -> Term * Factor .)
    }               reduce using rule 68 (Term -> Term * Factor .)
    id              reduce using rule 68 (Term -> Term * Factor .)
    gid             reduce using rule 68 (Term -> Term * Factor .)
    return          reduce using rule 68 (Term -> Term * Factor .)
    print           reduce using rule 68 (Term -> Term * Factor .)
    println         reduce using rule 68 (Term -> Term * Factor .)
    prints          reduce using rule 68 (Term -> Term * Factor .)
    for             reduce using rule 68 (Term -> Term * Factor .)
    while           reduce using rule 68 (Term -> Term * Factor .)
    read            reduce using rule 68 (Term -> Term * Factor .)
    if              reduce using rule 68 (Term -> Term * Factor .)
    repeat          reduce using rule 68 (Term -> Term * Factor .)
    num             reduce using rule 68 (Term -> Term * Factor .)
    (               reduce using rule 68 (Term -> Term * Factor .)
    )               reduce using rule 68 (Term -> Term * Factor .)
    sup             reduce using rule 68 (Term -> Term * Factor .)
    inf             reduce using rule 68 (Term -> Term * Factor .)
    supeq           reduce using rule 68 (Term -> Term * Factor .)
    infeq           reduce using rule 68 (Term -> Term * Factor .)
    eq              reduce using rule 68 (Term -> Term * Factor .)
    diff            reduce using rule 68 (Term -> Term * Factor .)
    ;               reduce using rule 68 (Term -> Term * Factor .)
    ]               reduce using rule 68 (Term -> Term * Factor .)
    and             reduce using rule 68 (Term -> Term * Factor .)
    or              reduce using rule 68 (Term -> Term * Factor .)


state 158

    (69) Term -> Term / Factor .

    *               reduce using rule 69 (Term -> Term / Factor .)
    /               reduce using rule 69 (Term -> Term / Factor .)
    %               reduce using rule 69 (Term -> Term / Factor .)
    +               reduce using rule 69 (Term -> Term / Factor .)
    -               reduce using rule 69 (Term -> Term / Factor .)
    }               reduce using rule 69 (Term -> Term / Factor .)
    id              reduce using rule 69 (Term -> Term / Factor .)
    gid             reduce using rule 69 (Term -> Term / Factor .)
    return          reduce using rule 69 (Term -> Term / Factor .)
    print           reduce using rule 69 (Term -> Term / Factor .)
    println         reduce using rule 69 (Term -> Term / Factor .)
    prints          reduce using rule 69 (Term -> Term / Factor .)
    for             reduce using rule 69 (Term -> Term / Factor .)
    while           reduce using rule 69 (Term -> Term / Factor .)
    read            reduce using rule 69 (Term -> Term / Factor .)
    if              reduce using rule 69 (Term -> Term / Factor .)
    repeat          reduce using rule 69 (Term -> Term / Factor .)
    num             reduce using rule 69 (Term -> Term / Factor .)
    (               reduce using rule 69 (Term -> Term / Factor .)
    )               reduce using rule 69 (Term -> Term / Factor .)
    sup             reduce using rule 69 (Term -> Term / Factor .)
    inf             reduce using rule 69 (Term -> Term / Factor .)
    supeq           reduce using rule 69 (Term -> Term / Factor .)
    infeq           reduce using rule 69 (Term -> Term / Factor .)
    eq              reduce using rule 69 (Term -> Term / Factor .)
    diff            reduce using rule 69 (Term -> Term / Factor .)
    ;               reduce using rule 69 (Term -> Term / Factor .)
    ]               reduce using rule 69 (Term -> Term / Factor .)
    and             reduce using rule 69 (Term -> Term / Factor .)
    or              reduce using rule 69 (Term -> Term / Factor .)


state 159

    (70) Term -> Term % Factor .

    *               reduce using rule 70 (Term -> Term % Factor .)
    /               reduce using rule 70 (Term -> Term % Factor .)
    %               reduce using rule 70 (Term -> Term % Factor .)
    +               reduce using rule 70 (Term -> Term % Factor .)
    -               reduce using rule 70 (Term -> Term % Factor .)
    }               reduce using rule 70 (Term -> Term % Factor .)
    id              reduce using rule 70 (Term -> Term % Factor .)
    gid             reduce using rule 70 (Term -> Term % Factor .)
    return          reduce using rule 70 (Term -> Term % Factor .)
    print           reduce using rule 70 (Term -> Term % Factor .)
    println         reduce using rule 70 (Term -> Term % Factor .)
    prints          reduce using rule 70 (Term -> Term % Factor .)
    for             reduce using rule 70 (Term -> Term % Factor .)
    while           reduce using rule 70 (Term -> Term % Factor .)
    read            reduce using rule 70 (Term -> Term % Factor .)
    if              reduce using rule 70 (Term -> Term % Factor .)
    repeat          reduce using rule 70 (Term -> Term % Factor .)
    num             reduce using rule 70 (Term -> Term % Factor .)
    (               reduce using rule 70 (Term -> Term % Factor .)
    )               reduce using rule 70 (Term -> Term % Factor .)
    sup             reduce using rule 70 (Term -> Term % Factor .)
    inf             reduce using rule 70 (Term -> Term % Factor .)
    supeq           reduce using rule 70 (Term -> Term % Factor .)
    infeq           reduce using rule 70 (Term -> Term % Factor .)
    eq              reduce using rule 70 (Term -> Term % Factor .)
    diff            reduce using rule 70 (Term -> Term % Factor .)
    ;               reduce using rule 70 (Term -> Term % Factor .)
    ]               reduce using rule 70 (Term -> Term % Factor .)
    and             reduce using rule 70 (Term -> Term % Factor .)
    or              reduce using rule 70 (Term -> Term % Factor .)


state 160

    (31) Print -> print ( Exp . )
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               shift and go to state 187
    +               shift and go to state 55
    -               shift and go to state 56


state 161

    (32) Println -> println ( Exp . )
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               shift and go to state 188
    +               shift and go to state 55
    -               shift and go to state 56


state 162

    (33) Prints -> prints ( string . )

    )               shift and go to state 189


state 163

    (26) Repeat -> RepeatS ( num . ) { Insts }

    )               shift and go to state 190


state 164

    (28) For -> for ( Insts . ; Cond ; Insts ) { Insts }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    ;               shift and go to state 191
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 165

    (29) While -> while ( Cond . ) { Insts }
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

    )               shift and go to state 192
    and             shift and go to state 145
    or              shift and go to state 146


state 166

    (106) Cond -> Exp . sup Exp
    (107) Cond -> Exp . inf Exp
    (108) Cond -> Exp . supeq Exp
    (109) Cond -> Exp . infeq Exp
    (111) Cond -> Exp . eq Exp
    (112) Cond -> Exp . diff Exp
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    sup             shift and go to state 148
    inf             shift and go to state 149
    supeq           shift and go to state 150
    infeq           shift and go to state 151
    eq              shift and go to state 152
    diff            shift and go to state 153
    +               shift and go to state 55
    -               shift and go to state 56


state 167

    (30) Read -> read ( id . )

    )               shift and go to state 193


state 168

    (54) If -> if ( Cond . ) { Insts }
    (55) If -> if ( Cond . ) Inst
    (56) If -> if ( Cond . ) { Insts } else { Insts }
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

    )               shift and go to state 194
    and             shift and go to state 145
    or              shift and go to state 146


state 169

    (35) Dcl -> id [ num . ]
    (36) Dcl -> id [ num . ] = num
    (40) Dcl -> id [ num . ] [ num ] = num
    (41) Dcl -> id [ num . ] [ num ]

    ]               shift and go to state 195


state 170

    (37) Dcl -> id [ ] . = { Nums }
    (42) Dcl -> id [ ] . [ ] = { BlcsNums }

    =               shift and go to state 197
    [               shift and go to state 196


state 171

    (46) Dcl -> id = num .

    }               reduce using rule 46 (Dcl -> id = num .)
    id              reduce using rule 46 (Dcl -> id = num .)


state 172

    (48) Attr -> id [ Exp ] . = Exp
    (49) Attr -> id [ Exp ] . [ Exp ] = Exp
    (97) Factor -> id [ Exp ] .
    (98) Factor -> id [ Exp ] . [ Exp ]

    =               shift and go to state 199
    [               shift and go to state 198
    *               reduce using rule 97 (Factor -> id [ Exp ] .)
    /               reduce using rule 97 (Factor -> id [ Exp ] .)
    %               reduce using rule 97 (Factor -> id [ Exp ] .)
    +               reduce using rule 97 (Factor -> id [ Exp ] .)
    -               reduce using rule 97 (Factor -> id [ Exp ] .)
    }               reduce using rule 97 (Factor -> id [ Exp ] .)
    id              reduce using rule 97 (Factor -> id [ Exp ] .)
    gid             reduce using rule 97 (Factor -> id [ Exp ] .)
    return          reduce using rule 97 (Factor -> id [ Exp ] .)
    print           reduce using rule 97 (Factor -> id [ Exp ] .)
    println         reduce using rule 97 (Factor -> id [ Exp ] .)
    prints          reduce using rule 97 (Factor -> id [ Exp ] .)
    for             reduce using rule 97 (Factor -> id [ Exp ] .)
    while           reduce using rule 97 (Factor -> id [ Exp ] .)
    read            reduce using rule 97 (Factor -> id [ Exp ] .)
    if              reduce using rule 97 (Factor -> id [ Exp ] .)
    repeat          reduce using rule 97 (Factor -> id [ Exp ] .)
    num             reduce using rule 97 (Factor -> id [ Exp ] .)
    (               reduce using rule 97 (Factor -> id [ Exp ] .)
    ;               reduce using rule 97 (Factor -> id [ Exp ] .)
    )               reduce using rule 97 (Factor -> id [ Exp ] .)


state 173

    (51) Attr -> gid [ Exp ] . = Exp
    (52) Attr -> gid [ Exp ] . [ Exp ] = Exp
    (99) Factor -> gid [ Exp ] .
    (100) Factor -> gid [ Exp ] . [ Exp ]

    =               shift and go to state 201
    [               shift and go to state 200
    *               reduce using rule 99 (Factor -> gid [ Exp ] .)
    /               reduce using rule 99 (Factor -> gid [ Exp ] .)
    %               reduce using rule 99 (Factor -> gid [ Exp ] .)
    +               reduce using rule 99 (Factor -> gid [ Exp ] .)
    -               reduce using rule 99 (Factor -> gid [ Exp ] .)
    }               reduce using rule 99 (Factor -> gid [ Exp ] .)
    id              reduce using rule 99 (Factor -> gid [ Exp ] .)
    gid             reduce using rule 99 (Factor -> gid [ Exp ] .)
    return          reduce using rule 99 (Factor -> gid [ Exp ] .)
    print           reduce using rule 99 (Factor -> gid [ Exp ] .)
    println         reduce using rule 99 (Factor -> gid [ Exp ] .)
    prints          reduce using rule 99 (Factor -> gid [ Exp ] .)
    for             reduce using rule 99 (Factor -> gid [ Exp ] .)
    while           reduce using rule 99 (Factor -> gid [ Exp ] .)
    read            reduce using rule 99 (Factor -> gid [ Exp ] .)
    if              reduce using rule 99 (Factor -> gid [ Exp ] .)
    repeat          reduce using rule 99 (Factor -> gid [ Exp ] .)
    num             reduce using rule 99 (Factor -> gid [ Exp ] .)
    (               reduce using rule 99 (Factor -> gid [ Exp ] .)
    ;               reduce using rule 99 (Factor -> gid [ Exp ] .)
    )               reduce using rule 99 (Factor -> gid [ Exp ] .)


state 174

    (53) Return -> return ( Exp ) .

    }               reduce using rule 53 (Return -> return ( Exp ) .)
    id              reduce using rule 53 (Return -> return ( Exp ) .)
    gid             reduce using rule 53 (Return -> return ( Exp ) .)
    return          reduce using rule 53 (Return -> return ( Exp ) .)
    print           reduce using rule 53 (Return -> return ( Exp ) .)
    println         reduce using rule 53 (Return -> return ( Exp ) .)
    prints          reduce using rule 53 (Return -> return ( Exp ) .)
    for             reduce using rule 53 (Return -> return ( Exp ) .)
    while           reduce using rule 53 (Return -> return ( Exp ) .)
    read            reduce using rule 53 (Return -> return ( Exp ) .)
    if              reduce using rule 53 (Return -> return ( Exp ) .)
    repeat          reduce using rule 53 (Return -> return ( Exp ) .)
    num             reduce using rule 53 (Return -> return ( Exp ) .)
    (               reduce using rule 53 (Return -> return ( Exp ) .)
    ;               reduce using rule 53 (Return -> return ( Exp ) .)
    )               reduce using rule 53 (Return -> return ( Exp ) .)


state 175

    (104) Cond -> ( Cond and . Cond )
    (102) Cond -> Cond and . Cond
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 202
    Exp                            shift and go to state 166
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 176

    (105) Cond -> ( Cond or . Cond )
    (103) Cond -> Cond or . Cond
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 203
    Exp                            shift and go to state 166
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 177

    (102) Cond -> Cond and Cond .
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 102 (Cond -> Cond and Cond .)
    ;               reduce using rule 102 (Cond -> Cond and Cond .)
    and             shift and go to state 145
    or              shift and go to state 146

  ! and             [ reduce using rule 102 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 102 (Cond -> Cond and Cond .) ]


state 178

    (103) Cond -> Cond or Cond .
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               reduce using rule 103 (Cond -> Cond or Cond .)
    ;               reduce using rule 103 (Cond -> Cond or Cond .)
    and             shift and go to state 145
    or              shift and go to state 146

  ! and             [ reduce using rule 103 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 103 (Cond -> Cond or Cond .) ]


state 179

    (106) Cond -> Exp sup Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               reduce using rule 106 (Cond -> Exp sup Exp .)
    and             reduce using rule 106 (Cond -> Exp sup Exp .)
    or              reduce using rule 106 (Cond -> Exp sup Exp .)
    ;               reduce using rule 106 (Cond -> Exp sup Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 180

    (107) Cond -> Exp inf Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               reduce using rule 107 (Cond -> Exp inf Exp .)
    and             reduce using rule 107 (Cond -> Exp inf Exp .)
    or              reduce using rule 107 (Cond -> Exp inf Exp .)
    ;               reduce using rule 107 (Cond -> Exp inf Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 181

    (108) Cond -> Exp supeq Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               reduce using rule 108 (Cond -> Exp supeq Exp .)
    and             reduce using rule 108 (Cond -> Exp supeq Exp .)
    or              reduce using rule 108 (Cond -> Exp supeq Exp .)
    ;               reduce using rule 108 (Cond -> Exp supeq Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 182

    (109) Cond -> Exp infeq Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               reduce using rule 109 (Cond -> Exp infeq Exp .)
    and             reduce using rule 109 (Cond -> Exp infeq Exp .)
    or              reduce using rule 109 (Cond -> Exp infeq Exp .)
    ;               reduce using rule 109 (Cond -> Exp infeq Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 183

    (111) Cond -> Exp eq Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               reduce using rule 111 (Cond -> Exp eq Exp .)
    and             reduce using rule 111 (Cond -> Exp eq Exp .)
    or              reduce using rule 111 (Cond -> Exp eq Exp .)
    ;               reduce using rule 111 (Cond -> Exp eq Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 184

    (112) Cond -> Exp diff Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    )               reduce using rule 112 (Cond -> Exp diff Exp .)
    and             reduce using rule 112 (Cond -> Exp diff Exp .)
    or              reduce using rule 112 (Cond -> Exp diff Exp .)
    ;               reduce using rule 112 (Cond -> Exp diff Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 185

    (97) Factor -> id [ Exp . ]
    (98) Factor -> id [ Exp . ] [ Exp ]
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    ]               shift and go to state 204
    +               shift and go to state 55
    -               shift and go to state 56


state 186

    (99) Factor -> gid [ Exp . ]
    (100) Factor -> gid [ Exp . ] [ Exp ]
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    ]               shift and go to state 205
    +               shift and go to state 55
    -               shift and go to state 56


state 187

    (31) Print -> print ( Exp ) .

    }               reduce using rule 31 (Print -> print ( Exp ) .)
    id              reduce using rule 31 (Print -> print ( Exp ) .)
    gid             reduce using rule 31 (Print -> print ( Exp ) .)
    return          reduce using rule 31 (Print -> print ( Exp ) .)
    print           reduce using rule 31 (Print -> print ( Exp ) .)
    println         reduce using rule 31 (Print -> print ( Exp ) .)
    prints          reduce using rule 31 (Print -> print ( Exp ) .)
    for             reduce using rule 31 (Print -> print ( Exp ) .)
    while           reduce using rule 31 (Print -> print ( Exp ) .)
    read            reduce using rule 31 (Print -> print ( Exp ) .)
    if              reduce using rule 31 (Print -> print ( Exp ) .)
    repeat          reduce using rule 31 (Print -> print ( Exp ) .)
    num             reduce using rule 31 (Print -> print ( Exp ) .)
    (               reduce using rule 31 (Print -> print ( Exp ) .)
    ;               reduce using rule 31 (Print -> print ( Exp ) .)
    )               reduce using rule 31 (Print -> print ( Exp ) .)


state 188

    (32) Println -> println ( Exp ) .

    }               reduce using rule 32 (Println -> println ( Exp ) .)
    id              reduce using rule 32 (Println -> println ( Exp ) .)
    gid             reduce using rule 32 (Println -> println ( Exp ) .)
    return          reduce using rule 32 (Println -> println ( Exp ) .)
    print           reduce using rule 32 (Println -> println ( Exp ) .)
    println         reduce using rule 32 (Println -> println ( Exp ) .)
    prints          reduce using rule 32 (Println -> println ( Exp ) .)
    for             reduce using rule 32 (Println -> println ( Exp ) .)
    while           reduce using rule 32 (Println -> println ( Exp ) .)
    read            reduce using rule 32 (Println -> println ( Exp ) .)
    if              reduce using rule 32 (Println -> println ( Exp ) .)
    repeat          reduce using rule 32 (Println -> println ( Exp ) .)
    num             reduce using rule 32 (Println -> println ( Exp ) .)
    (               reduce using rule 32 (Println -> println ( Exp ) .)
    ;               reduce using rule 32 (Println -> println ( Exp ) .)
    )               reduce using rule 32 (Println -> println ( Exp ) .)


state 189

    (33) Prints -> prints ( string ) .

    }               reduce using rule 33 (Prints -> prints ( string ) .)
    id              reduce using rule 33 (Prints -> prints ( string ) .)
    gid             reduce using rule 33 (Prints -> prints ( string ) .)
    return          reduce using rule 33 (Prints -> prints ( string ) .)
    print           reduce using rule 33 (Prints -> prints ( string ) .)
    println         reduce using rule 33 (Prints -> prints ( string ) .)
    prints          reduce using rule 33 (Prints -> prints ( string ) .)
    for             reduce using rule 33 (Prints -> prints ( string ) .)
    while           reduce using rule 33 (Prints -> prints ( string ) .)
    read            reduce using rule 33 (Prints -> prints ( string ) .)
    if              reduce using rule 33 (Prints -> prints ( string ) .)
    repeat          reduce using rule 33 (Prints -> prints ( string ) .)
    num             reduce using rule 33 (Prints -> prints ( string ) .)
    (               reduce using rule 33 (Prints -> prints ( string ) .)
    ;               reduce using rule 33 (Prints -> prints ( string ) .)
    )               reduce using rule 33 (Prints -> prints ( string ) .)


state 190

    (26) Repeat -> RepeatS ( num ) . { Insts }

    {               shift and go to state 206


state 191

    (28) For -> for ( Insts ; . Cond ; Insts ) { Insts }
    (102) Cond -> . Cond and Cond
    (103) Cond -> . Cond or Cond
    (104) Cond -> . ( Cond and Cond )
    (105) Cond -> . ( Cond or Cond )
    (106) Cond -> . Exp sup Exp
    (107) Cond -> . Exp inf Exp
    (108) Cond -> . Exp supeq Exp
    (109) Cond -> . Exp infeq Exp
    (110) Cond -> . not Exp
    (111) Cond -> . Exp eq Exp
    (112) Cond -> . Exp diff Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    (               shift and go to state 91
    not             shift and go to state 94
    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44

    Cond                           shift and go to state 207
    Exp                            shift and go to state 166
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 192

    (29) While -> while ( Cond ) . { Insts }

    {               shift and go to state 208


state 193

    (30) Read -> read ( id ) .

    }               reduce using rule 30 (Read -> read ( id ) .)
    id              reduce using rule 30 (Read -> read ( id ) .)
    gid             reduce using rule 30 (Read -> read ( id ) .)
    return          reduce using rule 30 (Read -> read ( id ) .)
    print           reduce using rule 30 (Read -> read ( id ) .)
    println         reduce using rule 30 (Read -> read ( id ) .)
    prints          reduce using rule 30 (Read -> read ( id ) .)
    for             reduce using rule 30 (Read -> read ( id ) .)
    while           reduce using rule 30 (Read -> read ( id ) .)
    read            reduce using rule 30 (Read -> read ( id ) .)
    if              reduce using rule 30 (Read -> read ( id ) .)
    repeat          reduce using rule 30 (Read -> read ( id ) .)
    num             reduce using rule 30 (Read -> read ( id ) .)
    (               reduce using rule 30 (Read -> read ( id ) .)
    ;               reduce using rule 30 (Read -> read ( id ) .)
    )               reduce using rule 30 (Read -> read ( id ) .)


state 194

    (54) If -> if ( Cond ) . { Insts }
    (55) If -> if ( Cond ) . Inst
    (56) If -> if ( Cond ) . { Insts } else { Insts }
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    {               shift and go to state 209
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 210
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 195

    (35) Dcl -> id [ num ] .
    (36) Dcl -> id [ num ] . = num
    (40) Dcl -> id [ num ] . [ num ] = num
    (41) Dcl -> id [ num ] . [ num ]

    }               reduce using rule 35 (Dcl -> id [ num ] .)
    id              reduce using rule 35 (Dcl -> id [ num ] .)
    =               shift and go to state 212
    [               shift and go to state 211


state 196

    (42) Dcl -> id [ ] [ . ] = { BlcsNums }

    ]               shift and go to state 213


state 197

    (37) Dcl -> id [ ] = . { Nums }

    {               shift and go to state 214


state 198

    (49) Attr -> id [ Exp ] [ . Exp ] = Exp
    (98) Factor -> id [ Exp ] [ . Exp ]
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 215
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 199

    (48) Attr -> id [ Exp ] = . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 216
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 200

    (52) Attr -> gid [ Exp ] [ . Exp ] = Exp
    (100) Factor -> gid [ Exp ] [ . Exp ]
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 217
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 201

    (51) Attr -> gid [ Exp ] = . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 218
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 202

    (104) Cond -> ( Cond and Cond . )
    (102) Cond -> Cond and Cond .
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 219
    and             shift and go to state 145
    or              shift and go to state 146

  ! and             [ reduce using rule 102 (Cond -> Cond and Cond .) ]
  ! or              [ reduce using rule 102 (Cond -> Cond and Cond .) ]
  ! )               [ reduce using rule 102 (Cond -> Cond and Cond .) ]


state 203

    (105) Cond -> ( Cond or Cond . )
    (103) Cond -> Cond or Cond .
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    )               shift and go to state 220
    and             shift and go to state 145
    or              shift and go to state 146

  ! and             [ reduce using rule 103 (Cond -> Cond or Cond .) ]
  ! or              [ reduce using rule 103 (Cond -> Cond or Cond .) ]
  ! )               [ reduce using rule 103 (Cond -> Cond or Cond .) ]


state 204

    (97) Factor -> id [ Exp ] .
    (98) Factor -> id [ Exp ] . [ Exp ]

    *               reduce using rule 97 (Factor -> id [ Exp ] .)
    /               reduce using rule 97 (Factor -> id [ Exp ] .)
    %               reduce using rule 97 (Factor -> id [ Exp ] .)
    )               reduce using rule 97 (Factor -> id [ Exp ] .)
    sup             reduce using rule 97 (Factor -> id [ Exp ] .)
    inf             reduce using rule 97 (Factor -> id [ Exp ] .)
    supeq           reduce using rule 97 (Factor -> id [ Exp ] .)
    infeq           reduce using rule 97 (Factor -> id [ Exp ] .)
    eq              reduce using rule 97 (Factor -> id [ Exp ] .)
    diff            reduce using rule 97 (Factor -> id [ Exp ] .)
    +               reduce using rule 97 (Factor -> id [ Exp ] .)
    -               reduce using rule 97 (Factor -> id [ Exp ] .)
    }               reduce using rule 97 (Factor -> id [ Exp ] .)
    id              reduce using rule 97 (Factor -> id [ Exp ] .)
    gid             reduce using rule 97 (Factor -> id [ Exp ] .)
    return          reduce using rule 97 (Factor -> id [ Exp ] .)
    print           reduce using rule 97 (Factor -> id [ Exp ] .)
    println         reduce using rule 97 (Factor -> id [ Exp ] .)
    prints          reduce using rule 97 (Factor -> id [ Exp ] .)
    for             reduce using rule 97 (Factor -> id [ Exp ] .)
    while           reduce using rule 97 (Factor -> id [ Exp ] .)
    read            reduce using rule 97 (Factor -> id [ Exp ] .)
    if              reduce using rule 97 (Factor -> id [ Exp ] .)
    repeat          reduce using rule 97 (Factor -> id [ Exp ] .)
    num             reduce using rule 97 (Factor -> id [ Exp ] .)
    (               reduce using rule 97 (Factor -> id [ Exp ] .)
    ;               reduce using rule 97 (Factor -> id [ Exp ] .)
    ]               reduce using rule 97 (Factor -> id [ Exp ] .)
    and             reduce using rule 97 (Factor -> id [ Exp ] .)
    or              reduce using rule 97 (Factor -> id [ Exp ] .)
    [               shift and go to state 221


state 205

    (99) Factor -> gid [ Exp ] .
    (100) Factor -> gid [ Exp ] . [ Exp ]

    *               reduce using rule 99 (Factor -> gid [ Exp ] .)
    /               reduce using rule 99 (Factor -> gid [ Exp ] .)
    %               reduce using rule 99 (Factor -> gid [ Exp ] .)
    )               reduce using rule 99 (Factor -> gid [ Exp ] .)
    sup             reduce using rule 99 (Factor -> gid [ Exp ] .)
    inf             reduce using rule 99 (Factor -> gid [ Exp ] .)
    supeq           reduce using rule 99 (Factor -> gid [ Exp ] .)
    infeq           reduce using rule 99 (Factor -> gid [ Exp ] .)
    eq              reduce using rule 99 (Factor -> gid [ Exp ] .)
    diff            reduce using rule 99 (Factor -> gid [ Exp ] .)
    +               reduce using rule 99 (Factor -> gid [ Exp ] .)
    -               reduce using rule 99 (Factor -> gid [ Exp ] .)
    }               reduce using rule 99 (Factor -> gid [ Exp ] .)
    id              reduce using rule 99 (Factor -> gid [ Exp ] .)
    gid             reduce using rule 99 (Factor -> gid [ Exp ] .)
    return          reduce using rule 99 (Factor -> gid [ Exp ] .)
    print           reduce using rule 99 (Factor -> gid [ Exp ] .)
    println         reduce using rule 99 (Factor -> gid [ Exp ] .)
    prints          reduce using rule 99 (Factor -> gid [ Exp ] .)
    for             reduce using rule 99 (Factor -> gid [ Exp ] .)
    while           reduce using rule 99 (Factor -> gid [ Exp ] .)
    read            reduce using rule 99 (Factor -> gid [ Exp ] .)
    if              reduce using rule 99 (Factor -> gid [ Exp ] .)
    repeat          reduce using rule 99 (Factor -> gid [ Exp ] .)
    num             reduce using rule 99 (Factor -> gid [ Exp ] .)
    (               reduce using rule 99 (Factor -> gid [ Exp ] .)
    ;               reduce using rule 99 (Factor -> gid [ Exp ] .)
    ]               reduce using rule 99 (Factor -> gid [ Exp ] .)
    and             reduce using rule 99 (Factor -> gid [ Exp ] .)
    or              reduce using rule 99 (Factor -> gid [ Exp ] .)
    [               shift and go to state 222


state 206

    (26) Repeat -> RepeatS ( num ) { . Insts }
    (13) Insts -> . Insts Inst
    (14) Insts -> .

    }               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)

    Insts                          shift and go to state 223

state 207

    (28) For -> for ( Insts ; Cond . ; Insts ) { Insts }
    (102) Cond -> Cond . and Cond
    (103) Cond -> Cond . or Cond

    ;               shift and go to state 224
    and             shift and go to state 145
    or              shift and go to state 146


state 208

    (29) While -> while ( Cond ) { . Insts }
    (13) Insts -> . Insts Inst
    (14) Insts -> .

    }               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)

    Insts                          shift and go to state 225

state 209

    (54) If -> if ( Cond ) { . Insts }
    (56) If -> if ( Cond ) { . Insts } else { Insts }
    (13) Insts -> . Insts Inst
    (14) Insts -> .

    }               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)

    Insts                          shift and go to state 226

state 210

    (55) If -> if ( Cond ) Inst .

    }               reduce using rule 55 (If -> if ( Cond ) Inst .)
    id              reduce using rule 55 (If -> if ( Cond ) Inst .)
    gid             reduce using rule 55 (If -> if ( Cond ) Inst .)
    return          reduce using rule 55 (If -> if ( Cond ) Inst .)
    print           reduce using rule 55 (If -> if ( Cond ) Inst .)
    println         reduce using rule 55 (If -> if ( Cond ) Inst .)
    prints          reduce using rule 55 (If -> if ( Cond ) Inst .)
    for             reduce using rule 55 (If -> if ( Cond ) Inst .)
    while           reduce using rule 55 (If -> if ( Cond ) Inst .)
    read            reduce using rule 55 (If -> if ( Cond ) Inst .)
    if              reduce using rule 55 (If -> if ( Cond ) Inst .)
    repeat          reduce using rule 55 (If -> if ( Cond ) Inst .)
    num             reduce using rule 55 (If -> if ( Cond ) Inst .)
    (               reduce using rule 55 (If -> if ( Cond ) Inst .)
    ;               reduce using rule 55 (If -> if ( Cond ) Inst .)
    )               reduce using rule 55 (If -> if ( Cond ) Inst .)


state 211

    (40) Dcl -> id [ num ] [ . num ] = num
    (41) Dcl -> id [ num ] [ . num ]

    num             shift and go to state 227


state 212

    (36) Dcl -> id [ num ] = . num

    num             shift and go to state 228


state 213

    (42) Dcl -> id [ ] [ ] . = { BlcsNums }

    =               shift and go to state 229


state 214

    (37) Dcl -> id [ ] = { . Nums }
    (38) Nums -> . Nums num
    (39) Nums -> .

    }               reduce using rule 39 (Nums -> .)
    num             reduce using rule 39 (Nums -> .)

    Nums                           shift and go to state 230

state 215

    (49) Attr -> id [ Exp ] [ Exp . ] = Exp
    (98) Factor -> id [ Exp ] [ Exp . ]
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    ]               shift and go to state 231
    +               shift and go to state 55
    -               shift and go to state 56


state 216

    (48) Attr -> id [ Exp ] = Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    }               reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    id              reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    gid             reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    return          reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    print           reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    println         reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    prints          reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    for             reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    while           reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    read            reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    if              reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    repeat          reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    num             reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    (               reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    ;               reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    )               reduce using rule 48 (Attr -> id [ Exp ] = Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 217

    (52) Attr -> gid [ Exp ] [ Exp . ] = Exp
    (100) Factor -> gid [ Exp ] [ Exp . ]
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    ]               shift and go to state 232
    +               shift and go to state 55
    -               shift and go to state 56


state 218

    (51) Attr -> gid [ Exp ] = Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    }               reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    id              reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    gid             reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    return          reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    print           reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    println         reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    prints          reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    for             reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    while           reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    read            reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    if              reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    repeat          reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    num             reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    (               reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    ;               reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    )               reduce using rule 51 (Attr -> gid [ Exp ] = Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 219

    (104) Cond -> ( Cond and Cond ) .

    )               reduce using rule 104 (Cond -> ( Cond and Cond ) .)
    and             reduce using rule 104 (Cond -> ( Cond and Cond ) .)
    or              reduce using rule 104 (Cond -> ( Cond and Cond ) .)
    ;               reduce using rule 104 (Cond -> ( Cond and Cond ) .)


state 220

    (105) Cond -> ( Cond or Cond ) .

    )               reduce using rule 105 (Cond -> ( Cond or Cond ) .)
    and             reduce using rule 105 (Cond -> ( Cond or Cond ) .)
    or              reduce using rule 105 (Cond -> ( Cond or Cond ) .)
    ;               reduce using rule 105 (Cond -> ( Cond or Cond ) .)


state 221

    (98) Factor -> id [ Exp ] [ . Exp ]
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 233
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 222

    (100) Factor -> gid [ Exp ] [ . Exp ]
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 234
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 223

    (26) Repeat -> RepeatS ( num ) { Insts . }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    }               shift and go to state 235
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    RepeatS                        shift and go to state 43
    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 224

    (28) For -> for ( Insts ; Cond ; . Insts ) { Insts }
    (13) Insts -> . Insts Inst
    (14) Insts -> .

    )               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)

    Insts                          shift and go to state 236

state 225

    (29) While -> while ( Cond ) { Insts . }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    }               shift and go to state 237
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 226

    (54) If -> if ( Cond ) { Insts . }
    (56) If -> if ( Cond ) { Insts . } else { Insts }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    }               shift and go to state 238
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 227

    (40) Dcl -> id [ num ] [ num . ] = num
    (41) Dcl -> id [ num ] [ num . ]

    ]               shift and go to state 239


state 228

    (36) Dcl -> id [ num ] = num .

    }               reduce using rule 36 (Dcl -> id [ num ] = num .)
    id              reduce using rule 36 (Dcl -> id [ num ] = num .)


state 229

    (42) Dcl -> id [ ] [ ] = . { BlcsNums }

    {               shift and go to state 240


state 230

    (37) Dcl -> id [ ] = { Nums . }
    (38) Nums -> Nums . num

    }               shift and go to state 241
    num             shift and go to state 242


state 231

    (49) Attr -> id [ Exp ] [ Exp ] . = Exp
    (98) Factor -> id [ Exp ] [ Exp ] .

    =               shift and go to state 243
    *               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    /               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    %               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    +               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    -               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    }               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    id              reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    gid             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    return          reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    print           reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    println         reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    prints          reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    for             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    while           reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    read            reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    if              reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    repeat          reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    num             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    (               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    ;               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    )               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)


state 232

    (52) Attr -> gid [ Exp ] [ Exp ] . = Exp
    (100) Factor -> gid [ Exp ] [ Exp ] .

    =               shift and go to state 244
    *               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    /               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    %               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    +               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    -               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    }               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    id              reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    gid             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    return          reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    print           reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    println         reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    prints          reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    for             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    while           reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    read            reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    if              reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    repeat          reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    num             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    (               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    ;               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    )               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)


state 233

    (98) Factor -> id [ Exp ] [ Exp . ]
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    ]               shift and go to state 245
    +               shift and go to state 55
    -               shift and go to state 56


state 234

    (100) Factor -> gid [ Exp ] [ Exp . ]
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    ]               shift and go to state 246
    +               shift and go to state 55
    -               shift and go to state 56


state 235

    (26) Repeat -> RepeatS ( num ) { Insts } .

    }               reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    id              reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    gid             reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    return          reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    print           reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    println         reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    prints          reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    for             reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    while           reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    read            reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    if              reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    repeat          reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    num             reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    (               reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    ;               reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)
    )               reduce using rule 26 (Repeat -> RepeatS ( num ) { Insts } .)


state 236

    (28) For -> for ( Insts ; Cond ; Insts . ) { Insts }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    )               shift and go to state 247
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 237

    (29) While -> while ( Cond ) { Insts } .

    }               reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    id              reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    gid             reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    return          reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    print           reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    println         reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    prints          reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    for             reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    while           reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    read            reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    if              reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    repeat          reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    num             reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    (               reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    ;               reduce using rule 29 (While -> while ( Cond ) { Insts } .)
    )               reduce using rule 29 (While -> while ( Cond ) { Insts } .)


state 238

    (54) If -> if ( Cond ) { Insts } .
    (56) If -> if ( Cond ) { Insts } . else { Insts }

    }               reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    id              reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    gid             reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    return          reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    print           reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    println         reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    prints          reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    for             reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    while           reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    read            reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    if              reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    repeat          reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    num             reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    (               reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    ;               reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    )               reduce using rule 54 (If -> if ( Cond ) { Insts } .)
    else            shift and go to state 248


state 239

    (40) Dcl -> id [ num ] [ num ] . = num
    (41) Dcl -> id [ num ] [ num ] .

    =               shift and go to state 249
    }               reduce using rule 41 (Dcl -> id [ num ] [ num ] .)
    id              reduce using rule 41 (Dcl -> id [ num ] [ num ] .)


state 240

    (42) Dcl -> id [ ] [ ] = { . BlcsNums }
    (43) BlcsNums -> . BlcsNums { Nums }
    (44) BlcsNums -> .

    }               reduce using rule 44 (BlcsNums -> .)
    {               reduce using rule 44 (BlcsNums -> .)

    BlcsNums                       shift and go to state 250

state 241

    (37) Dcl -> id [ ] = { Nums } .

    }               reduce using rule 37 (Dcl -> id [ ] = { Nums } .)
    id              reduce using rule 37 (Dcl -> id [ ] = { Nums } .)


state 242

    (38) Nums -> Nums num .

    }               reduce using rule 38 (Nums -> Nums num .)
    num             reduce using rule 38 (Nums -> Nums num .)


state 243

    (49) Attr -> id [ Exp ] [ Exp ] = . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 251
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 244

    (52) Attr -> gid [ Exp ] [ Exp ] = . Exp
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    id              shift and go to state 95
    gid             shift and go to state 96
    num             shift and go to state 44
    (               shift and go to state 38

    Exp                            shift and go to state 252
    Term                           shift and go to state 39
    Factor                         shift and go to state 49

state 245

    (98) Factor -> id [ Exp ] [ Exp ] .

    *               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    /               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    %               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    )               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    sup             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    inf             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    supeq           reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    infeq           reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    eq              reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    diff            reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    +               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    -               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    }               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    id              reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    gid             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    return          reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    print           reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    println         reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    prints          reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    for             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    while           reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    read            reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    if              reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    repeat          reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    num             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    (               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    ;               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    ]               reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    and             reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)
    or              reduce using rule 98 (Factor -> id [ Exp ] [ Exp ] .)


state 246

    (100) Factor -> gid [ Exp ] [ Exp ] .

    *               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    /               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    %               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    )               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    sup             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    inf             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    supeq           reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    infeq           reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    eq              reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    diff            reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    +               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    -               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    }               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    id              reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    gid             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    return          reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    print           reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    println         reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    prints          reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    for             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    while           reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    read            reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    if              reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    repeat          reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    num             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    (               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    ;               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    ]               reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    and             reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)
    or              reduce using rule 100 (Factor -> gid [ Exp ] [ Exp ] .)


state 247

    (28) For -> for ( Insts ; Cond ; Insts ) . { Insts }

    {               shift and go to state 253


state 248

    (56) If -> if ( Cond ) { Insts } else . { Insts }

    {               shift and go to state 254


state 249

    (40) Dcl -> id [ num ] [ num ] = . num

    num             shift and go to state 255


state 250

    (42) Dcl -> id [ ] [ ] = { BlcsNums . }
    (43) BlcsNums -> BlcsNums . { Nums }

    }               shift and go to state 257
    {               shift and go to state 256


state 251

    (49) Attr -> id [ Exp ] [ Exp ] = Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    }               reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    id              reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    gid             reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    return          reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    prints          reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    for             reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    while           reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    if              reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    num             reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    (               reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    ;               reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    )               reduce using rule 49 (Attr -> id [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 252

    (52) Attr -> gid [ Exp ] [ Exp ] = Exp .
    (57) Exp -> Exp . + Term
    (58) Exp -> Exp . - Term

    }               reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    id              reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    gid             reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    return          reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    print           reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    println         reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    prints          reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    for             reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    while           reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    read            reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    if              reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    repeat          reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    num             reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    (               reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    ;               reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    )               reduce using rule 52 (Attr -> gid [ Exp ] [ Exp ] = Exp .)
    +               shift and go to state 55
    -               shift and go to state 56


state 253

    (28) For -> for ( Insts ; Cond ; Insts ) { . Insts }
    (13) Insts -> . Insts Inst
    (14) Insts -> .

    }               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)

    Insts                          shift and go to state 258

state 254

    (56) If -> if ( Cond ) { Insts } else { . Insts }
    (13) Insts -> . Insts Inst
    (14) Insts -> .

    }               reduce using rule 14 (Insts -> .)
    id              reduce using rule 14 (Insts -> .)
    gid             reduce using rule 14 (Insts -> .)
    return          reduce using rule 14 (Insts -> .)
    print           reduce using rule 14 (Insts -> .)
    println         reduce using rule 14 (Insts -> .)
    prints          reduce using rule 14 (Insts -> .)
    for             reduce using rule 14 (Insts -> .)
    while           reduce using rule 14 (Insts -> .)
    read            reduce using rule 14 (Insts -> .)
    if              reduce using rule 14 (Insts -> .)
    repeat          reduce using rule 14 (Insts -> .)
    num             reduce using rule 14 (Insts -> .)
    (               reduce using rule 14 (Insts -> .)

    Insts                          shift and go to state 259

state 255

    (40) Dcl -> id [ num ] [ num ] = num .

    }               reduce using rule 40 (Dcl -> id [ num ] [ num ] = num .)
    id              reduce using rule 40 (Dcl -> id [ num ] [ num ] = num .)


state 256

    (43) BlcsNums -> BlcsNums { . Nums }
    (38) Nums -> . Nums num
    (39) Nums -> .

    }               reduce using rule 39 (Nums -> .)
    num             reduce using rule 39 (Nums -> .)

    Nums                           shift and go to state 260

state 257

    (42) Dcl -> id [ ] [ ] = { BlcsNums } .

    }               reduce using rule 42 (Dcl -> id [ ] [ ] = { BlcsNums } .)
    id              reduce using rule 42 (Dcl -> id [ ] [ ] = { BlcsNums } .)


state 258

    (28) For -> for ( Insts ; Cond ; Insts ) { Insts . }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    }               shift and go to state 261
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 259

    (56) If -> if ( Cond ) { Insts } else { Insts . }
    (13) Insts -> Insts . Inst
    (15) Inst -> . Attr
    (16) Inst -> . Return
    (17) Inst -> . Exp
    (18) Inst -> . Print
    (19) Inst -> . Println
    (20) Inst -> . Prints
    (21) Inst -> . Repeat
    (22) Inst -> . For
    (23) Inst -> . While
    (24) Inst -> . Read
    (25) Inst -> . If
    (47) Attr -> . id = Exp
    (48) Attr -> . id [ Exp ] = Exp
    (49) Attr -> . id [ Exp ] [ Exp ] = Exp
    (50) Attr -> . gid = Exp
    (51) Attr -> . gid [ Exp ] = Exp
    (52) Attr -> . gid [ Exp ] [ Exp ] = Exp
    (53) Return -> . return ( Exp )
    (57) Exp -> . Exp + Term
    (58) Exp -> . Exp - Term
    (59) Exp -> . id addeq Term
    (60) Exp -> . id subeq Term
    (61) Exp -> . id addeql Term
    (62) Exp -> . id subeql Term
    (63) Exp -> . gid addeq Term
    (64) Exp -> . gid subeq Term
    (65) Exp -> . gid addeql Term
    (66) Exp -> . gid subeql Term
    (67) Exp -> . Term
    (31) Print -> . print ( Exp )
    (32) Println -> . println ( Exp )
    (33) Prints -> . prints ( string )
    (26) Repeat -> . RepeatS ( num ) { Insts }
    (28) For -> . for ( Insts ; Cond ; Insts ) { Insts }
    (29) While -> . while ( Cond ) { Insts }
    (30) Read -> . read ( id )
    (54) If -> . if ( Cond ) { Insts }
    (55) If -> . if ( Cond ) Inst
    (56) If -> . if ( Cond ) { Insts } else { Insts }
    (68) Term -> . Term * Factor
    (69) Term -> . Term / Factor
    (70) Term -> . Term % Factor
    (71) Term -> . id muleq Factor
    (72) Term -> . id diveq Factor
    (73) Term -> . id modeq Factor
    (74) Term -> . id muleql Factor
    (75) Term -> . id diveql Factor
    (76) Term -> . id modeql Factor
    (77) Term -> . gid muleq Factor
    (78) Term -> . gid diveq Factor
    (79) Term -> . gid modeq Factor
    (80) Term -> . gid muleql Factor
    (81) Term -> . gid diveql Factor
    (82) Term -> . gid modeql Factor
    (83) Term -> . Factor
    (27) RepeatS -> . repeat
    (84) Factor -> . id plus
    (85) Factor -> . id plusl
    (86) Factor -> . id minus
    (87) Factor -> . id minusl
    (88) Factor -> . gid plus
    (89) Factor -> . gid plusl
    (90) Factor -> . gid minus
    (91) Factor -> . gid minusl
    (92) Factor -> . id
    (93) Factor -> . gid
    (94) Factor -> . num
    (95) Factor -> . id ( )
    (96) Factor -> . ( Cond )
    (97) Factor -> . id [ Exp ]
    (98) Factor -> . id [ Exp ] [ Exp ]
    (99) Factor -> . gid [ Exp ]
    (100) Factor -> . gid [ Exp ] [ Exp ]
    (101) Factor -> . ( Exp )

    }               shift and go to state 262
    id              shift and go to state 35
    gid             shift and go to state 36
    return          shift and go to state 37
    print           shift and go to state 40
    println         shift and go to state 41
    prints          shift and go to state 42
    for             shift and go to state 45
    while           shift and go to state 46
    read            shift and go to state 47
    if              shift and go to state 48
    repeat          shift and go to state 50
    num             shift and go to state 44
    (               shift and go to state 38

    Inst                           shift and go to state 23
    Attr                           shift and go to state 24
    Return                         shift and go to state 25
    Exp                            shift and go to state 26
    Print                          shift and go to state 27
    Println                        shift and go to state 28
    Prints                         shift and go to state 29
    Repeat                         shift and go to state 30
    For                            shift and go to state 31
    While                          shift and go to state 32
    Read                           shift and go to state 33
    If                             shift and go to state 34
    Term                           shift and go to state 39
    RepeatS                        shift and go to state 43
    Factor                         shift and go to state 49

state 260

    (43) BlcsNums -> BlcsNums { Nums . }
    (38) Nums -> Nums . num

    }               shift and go to state 263
    num             shift and go to state 242


state 261

    (28) For -> for ( Insts ; Cond ; Insts ) { Insts } .

    }               reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    id              reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    gid             reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    return          reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    print           reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    println         reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    prints          reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    for             reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    while           reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    read            reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    if              reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    repeat          reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    num             reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    (               reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    ;               reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)
    )               reduce using rule 28 (For -> for ( Insts ; Cond ; Insts ) { Insts } .)


state 262

    (56) If -> if ( Cond ) { Insts } else { Insts } .

    }               reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    id              reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    gid             reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    return          reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    print           reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    println         reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    prints          reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    for             reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    while           reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    read            reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    if              reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    repeat          reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    num             reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    (               reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    ;               reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)
    )               reduce using rule 56 (If -> if ( Cond ) { Insts } else { Insts } .)


state 263

    (43) BlcsNums -> BlcsNums { Nums } .

    }               reduce using rule 43 (BlcsNums -> BlcsNums { Nums } .)
    {               reduce using rule 43 (BlcsNums -> BlcsNums { Nums } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 35 resolved as shift
WARNING: shift/reduce conflict for ( in state 95 resolved as shift
WARNING: shift/reduce conflict for ( in state 112 resolved as shift
WARNING: shift/reduce conflict for ( in state 121 resolved as shift
WARNING: shift/reduce conflict for and in state 177 resolved as shift
WARNING: shift/reduce conflict for or in state 177 resolved as shift
WARNING: shift/reduce conflict for and in state 178 resolved as shift
WARNING: shift/reduce conflict for or in state 178 resolved as shift
WARNING: shift/reduce conflict for ) in state 202 resolved as shift
WARNING: shift/reduce conflict for and in state 202 resolved as shift
WARNING: shift/reduce conflict for or in state 202 resolved as shift
WARNING: shift/reduce conflict for ) in state 203 resolved as shift
WARNING: shift/reduce conflict for and in state 203 resolved as shift
WARNING: shift/reduce conflict for or in state 203 resolved as shift
